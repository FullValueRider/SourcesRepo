 Class Seq
    ' Emulates the MS ArrayList as follows
    ' 
    ' Constructors:     Implemented with enhancement
    '
    ' PROPERTIES
    ' ==========
    ' Capacity:         Implemented
    ' Count:            Implemented see also CountIt
    ' IsFixedSize:      Not Implemented
    ' IsReadOnly:       Not Implemented
    ' IsSynchronsed:    Not Implemented
    ' Item()            Implemented, Default Memeber
    ' SyncRoot          Not Implemented
    '
    ' METHODS
    ' =======
    ' Adaptor:          Not Implemented but see AddRange
    ' Add:              Implemented see also AddItems
    ' AddRange:         Implemented with enhancement
    ' BinarySearch:     Not Implemented See CountIt, FilterIt
    ' Clear             Implemented Sugar foir RemoveAll 
    ' Clone:            Implemented - shallow copy of objects
    ' Contains          Implemented Sugar for HoldsItem, See Also LacksItem
    ' CopyTo:           Implemented with enhancement, see also Slice
    ' FixedSize:        Not Implemented
    ' GetENumerator     Not Implemented, Use Items for enumeration
    ' GetRange          Implemented Sugar for Slice
    ' IndexOf           Implemented partially
    ' Insert            Implemented
    ' InsertRange:      Implemented with enhancements
    ' LastIndexOf       Implemented with enhancements
    ' ReadOnly:         Not Implemented
    ' Remove:           Implemented
    ' RemoveRange       Implemented, sugar for Remove
    ' Repeat:           Implemented
    ' Reverse:          Implemented Partially
    ' SetRange:         Not Implemented
    ' Sort:             Not Implemented
    ' ToArray:          Implemented, Sugar for Items, for type conversion see Mapit
    ' TrimToSize        Implemented
    
    ' Additional facilities
    ' Where possible, methods are redefined as functions that return the instance of Me
    ' to allow chaining of methods
    '
    ' AddItems Add multiple items in one statement
    ' FirstIndex
    ' LastIndex
    ' LacksItem Sugar for 'Not HoldsItem'
    ' Join, Returns a single string if the items are strings
    ' CountIt
    ' FilterIt
    ' MaptIt
    ' Slice
    ' ToCollection
    ' IsQueryable
    ' IsNotQueryable
    ' HasOneItem
    ' HasItems
    ' HasAnyItems
    
    Attribute VB_GlobalNameSpace = False
    Attribute VB_Creatable = True
    Attribute VB_PredeclaredId = True
    Attribute VB_Exposed = True
    Option Explicit
    
    'Implements IIndexed
    
    Private Const MY_TYPENAME                       As String = "Seq"
    Private Const DEFAULT_CHUNK                     As Long = 16
    Private Const FIRST_INDEX                       As Long = 1
    
    
    Public Enum SeqSplitType
        SplitAfter
        SplitBefore
    
    End Enum
    
    
	Private Type state
    
        Host                                        As variant ' an array
        LastIndex                                   As long
        Size                                        As long
  
    End Type

    Private s                                       As state

    ' The following are accepted
    
    ' ParamArray which is interpretee as follows.
    ' - No Items: empty seq of default size
    ' - If more than one item: Items in paramArray. Capacity is the number of items
    ' - If only one Item then
    ' - If number: Empty seq with specified capacity
    ' - If String: Items are characters: capcity is length of string
    ' - If Array: Items as provided by For Each on the array
    ' - Dictionaries: Items from the Items method.  Capcity is the count of the dictionary
    ' - Collection: Items from the collection.  Capacity is collection Count
    ' - Stack,Queue: Items as provided by the ToArray method, capcity is count.
    
     
     Public Function Deb(ParamArray ipParamarray() As Variant) As Seq
        With New Seq
            Set Deb = .ConstructInstance(CVar(ipParamarray))
        End With
    End Function

    Friend Function ConstructInstance(ByVal ipFPA As Variant) As Seq
        
        s.LastIndex = 0
        s.Size = DEFAULT_CHUNK
        Resize
        
        Dim myFPA As Variant = VarOp.ResolveParamArray(ipFPA)
        
        Dim myMeta As Meta = Meta.Deb(myFPA)
       
        Select Case True
        
            Case myMeta.IsNotQueryable
            
                ' There is nothing to add to the newly created instance so
                Return Me
                
            
            Case myMeta.IsString

                s.Size = myMeta.Size
                Resize
                AddKnownRange myMeta.Cargo
            
            
            ' the case below fails when the cargo is not 0 based (i.e. a collection)
            Case myMeta.IsNumber
               
                ' A single number is treated as a capacity argument
                s.Size = CLng(myFPA)
                Resize
                ' The lastindex should be set for this particular case
                ' as one of the requirements for setting an initial capacity
                ' is to allow assignment to any item with an index within that capacity
                s.LastIndex = UBound(s.Host)
           
            Case myMeta.IsArray
            
                s.Size = ((myMeta.Size \ DEFAULT_CHUNK) + 1) * DEFAULT_CHUNK
                Resize
                AddKnownRange myMeta.Cargo 'myFPA' (myMeta.FirstRank.FirstIndex)
                            
            
            Case myMeta.IsItemByIndex0
            
                s.Size = ((myMeta.Size \ DEFAULT_CHUNK) + 1) * DEFAULT_CHUNK
                Resize
                AddKnownRange myMeta.Cargo
                 
                 
             Case myMeta.IsItemByIndex1
             
                s.Size = ((myMeta.Size \ DEFAULT_CHUNK) + 1) * DEFAULT_CHUNK
                Resize
                AddKnownRange myMeta.Cargo
                 
                 
             Case myMeta.IsItemByToArray
             
                s.Size = ((myMeta.Size \ DEFAULT_CHUNK) + 1) * DEFAULT_CHUNK
                Resize
                AddKnownRange myMeta.Cargo
                 
                 
             Case myMeta.IsItemByKey

                s.Size = ((myMeta.Size \ DEFAULT_CHUNK) + 1) * DEFAULT_CHUNK
                Resize
                AddKnownRange myMeta.Cargo
                 
            Case Else
            
                ' adding a single object/item

                s.Size = DEFAULT_CHUNK
                Resize
                Add myMeta.Cargo
                
        End Select

        Return Me

    End Function

    'Description(Adds a single item, returns index at which item is added.  For compatability with arraylist)
    Public Function Add(ByRef ipItem As Variant) As Long
        
        If VBA.IsObject(ipItem) Then
            Set s.Host(GetNextIndex) = ipItem
        Else
            s.Host(GetNextIndex) = ipItem
        End If
        
       Return s.LastIndex
       
    End Function
    
 
    '@Description("Adds one or more items as is. Return the Me instance")
    Public Function AddItems(ParamArray ipParamArray() As Variant) As Seq
      
        If ArrayInfo.IsNotAllocated(CVar(ipParamArray)) Then
            Return Me
        End If
        
        ' for add items we don't try to interpret what an item is, we just add it
        Dim myItem As Variant
        For Each myItem In ipParamArray
            Add myItem
        Next
        
        Return Me
        
    End Function
    

    '@Description("For internal use.  The container object is known to be acceptale for the use below")
    Friend Function AddKnownRange(ByRef ipRange As Variant) As Seq
       
        Dim myIter As IterItems = IterItems(ipRange)
        Do
            Dim myItem As Variant = myIter.Item(0)
            If VBA.IsObject(myItem) Then
                
                Set s.Host(GetNextIndex) = myItem
                
                
            Else
                
                s.Host(GetNextIndex) = myItem
                
                
            End If

        Loop While myIter.MoveNext

        Return Me

    End Function

    ' Adds a the items in a single container. To add a container as a single item use additems
    ' terminology is to match ArrayList
    Public Function AddRange(ByVal ipRange As Variant) As Seq
        
        Dim myMeta As Meta = Meta.Deb(ipRange)
        If myMeta.IsNotQueryable Then
            Return Me
        End If
        
        Return AddKnownRange(ipRange)

    End Function

    '@Description("Get the index of the next item in the seq")
    Public Function GetNextIndex() As Long

        s.LastIndex += 1
        If s.LastIndex > s.Size Then
            	
                s.Size += DEFAULT_CHUNK
                Resize

        End If

       Return s.LastIndex

    End Function

    'toDo: update so that we can request a slice as an array
    Public Function ToArray() As Variant
        
        Dim myArray As Variant = s.Host
        'S.Host is 1 based but we need to retturn an array that is zero
        'based to be consistent with how arrays behave
        If s.LastIndex = 0 Then
            ReDim Preserve myArray(0 To 0)
        Else
            ReDim Preserve myArray(0 To s.LastIndex - 1)
        End If
        Return myArray

    End Function

    
    Public Function Items() As Variant
        Items = Me.ToArray
    End Function

    '@DefaultMember
    Public Property Get Item(ByVal ipIndex As Long) As Variant 'Implements IIndexed.Item
        If ipIndex < FIRST_INDEX Or ipIndex > s.LastIndex Then
            Return CVErr(9&)
        Else
            Return s.Host(ipIndex)
        End If
    End Property

    Public Property Let Item(ByVal ipIndex As Long, ByRef ipItem As Variant) 'Implements IIndexed.Item
        s.Host(ipIndex) = ipItem
    End Property

    Public Property Set Item(ByVal ipIndex As Long, ByRef ipItem As Variant) 'Implements IIndexed.Item
    	Set s.Host(ipIndex) = ipItem
    End Property

    Public Function Init(ByRef ipItem As Variant) As Seq
       If VBA.IsObject(ipItem) Then
            Return InitByObject(ipItem)
       Else
       	    Return InitByPrimitive(ipItem)
       End If
    End Function
    
    Private Function InitByPrimitive(ByRef ipItem As Variant) As Seq
        Dim myIndex As Long
        For myIndex = FIRST_INDEX To LastIndex
            s.Host(myIndex) = ipItem
        Next
        Return Me
    End Function
    
    Private Function InitByObject(ByRef ipitem As Variant) As Seq
        Dim myIndex As Long
        For myIndex = FIRST_INDEX To LastIndex
            s.Host(myIndex) = ipitem
        Next
        Return Me
    End Function
    
    Public Function Insert(ByVal ipIndex As Long, ParamArray ipElements() As Variant) As Seq

        If ipIndex < 1 Or ipIndex > s.LastIndex Then
            Return Me
        End If
        
        If ArrayInfo.IsNotAllocated(ipElements) Then
             Return Me
        End If

        'Dim myPPA As Variant = Meta.Deb(ipElements)
        
        Return InsertRange(ipIndex, CVar(ipElements))
            
    End Function
    
    
    ' may need to check insertion below for when string is supplied
    Public Function InsertRange(ByVal ipIndex As Long, ParamArray ipParamarray() As Variant) As Seq
   	
        If ipIndex < FIRST_INDEX Or ipIndex > s.LastIndex Then
            Return Me
        End If
      
        Dim myParamArray As Variant = VarOp.ResolveParamArray(ipParamarray)
        Dim myMeta As Meta = Meta(myParamArray)
        
        If myMeta.IsNotQueryable Then
            Return Me
        End If
        
        MoveUp ipIndex, myMeta.Size

        
        Dim myIter As IterItems = IterItems(myParamArray)
        Do
            'Assign s.Host(ipIndex), myIter.Item
            Dim myItem As Variant = myIter.Item(0)
        	If VBA.IsObject(myItem) Then
                Set s.Host(ipIndex) = myItem
            Else
                s.Host(ipIndex) = myItem
            End If
            ipIndex += 1
        Loop While myIter.MoveNext

        Return Me
        
   End Function

  
    
   
    Public Function RemoveRange(ByVal ipIndex As Long, ByVal ipCount As Long) As Seq
        Return Me.RemoveAt(ipCount, ipCount)
    End Function
    
    
    Public Function RemoveAt(ByVal ipRemoveIndex As Long, Optional ipCount As Long = 1) As Seq
    
        If ipRemoveIndex < 1 Or ipRemoveIndex > s.LastIndex Then
            Return Me
        End If
        
        If ipCount < 1 Then
            Return Me
        End If
        
        If ipRemoveIndex + ipCount > s.LastIndex Then
        
            ipCount = s.LastIndex - ipRemoveIndex + 1
            
        End If
           
        MoveDown ipRemoveIndex, ipCount ' -1 +1 cancels
            
        Return Me
        
    End Function
    
    
    Public Function Repeat(ByVal ipIterator As IterConst) As Seq
        
        Do
            DoEvents
            Add ipIterator.Item
        Loop While ipIterator.MoveNext
        
        Return Me
        
    End Function
    
    
    Public Function Repeat(ByVal ipIterator As IterNum) As Seq
        
        Do
            DoEvents
           Add ipIterator.Item
        Loop While ipIterator.MoveNext
        
        Return Me
        
    End Function
    
    
    Public Function Repeat(ByRef ipItem As Variant, ByVal ipCount As Long) As Seq
        
        Dim myCount As Long
        For myCount = 1 To ipCount
            Add ipItem
        Next
        Return Me
    End Function
    
    ' Copyto does not work as it stands because VBA does a copy
    ' in when we do VarArray.cargo= Array
    ' If we use Variant, then we cannot use twinbasics overloading
    ' so we will need to write a function to allow us to access
    ' the safearray structure so we can do diret writes.
    '@Description("Makes a shallow copy of the seq in the provided array")
    Public Function CopyTo(ByRef ipArray As Variant) As Seq
       
       ' Dim myArray As Variant = ipVarArray.Cargo
        If Guard.IsNotArray(ipArray, CurrentComponentName, CurrentProcedureName) Then Return Me
        If Guard.IsNotAllocated(ipArray, CurrentComponentName, CurrentProcedureName) Then Return Me
        If Guard.TooManyRanks(ipArray, CurrentComponentName, CurrentProcedureName) Then Return Me
        'If Guard.SizeMismatch(s.LastIndex > ArrayInfo.Count(myArray), CurrentComponentName, CurrentProcedureName) Then Return Me
       
        
        Dim myIndex  As Long = VBA.LBound(ipArray)
        Dim myEndIndex As Long = VBA.UBound(ipArray)
        
        Dim myItems As IterItems = IterItems(Me)
        Do
            Dim myItem As Variant = myItems.Item(0)
            
            If VBA.IsObject(myItem) Then
                Set ipArray(myIndex) = myItem
            Else
                ipArray(myIndex) = myItem
            End If
            
            myIndex += 1
            
        Loop While myItems.MoveNext And myIndex <= myEndIndex
        
        Return Me
        
    End Function
    
    
    Public Function CopyTo(ByRef ipArray As Variant, ByVal ipArrayStartIndex As Long) As Seq
        
         ' Dim myArray As Variant = ipVarArray.Cargo
        If Guard.IsNotArray(ipArray, CurrentComponentName, CurrentProcedureName) Then Return Me
        If Guard.IsNotAllocated(ipArray, CurrentComponentName, CurrentProcedureName) Then Return Me
        If Guard.TooManyRanks(ipArray, CurrentComponentName, CurrentProcedureName) Then Return Me
        'If Guard.SizeMismatch(s.LastIndex > ArrayInfo.Count(myArray), CurrentComponentName, CurrentProcedureName) Then Return Me
       
        
        Dim myIndex  As Long = ipArrayStartIndex
        Dim myEndIndex As Long = VBA.UBound(ipArray)
        
        Dim myItems As IterItems = IterItems(Me)
        Do
            Dim myItem As Variant = myItems.Item(0)
            
            If VBA.IsObject(myItem) Then
                Set ipArray(myIndex) = myItem
            Else
                ipArray(myIndex) = myItem
            End If
            
            myIndex += 1
            
        Loop While myItems.MoveNext And myIndex <= myEndIndex
        
        Return Me
    End Function
    
    Public Function CopyTo _
    ( _ 
        ByVal ipSeqStartIndex As Long, _
        ByRef ipArray As Variant, _
        ByVal ipArrayStartIndex As Long, _
        ByVal ipArrayCount As Long _
    ) As Seq
    
         ' Dim myArray As Variant = ipVarArray.Cargo
        If Guard.IsNotArray(ipArray, CurrentComponentName, CurrentProcedureName) Then Return Me
        If Guard.IsNotAllocated(ipArray, CurrentComponentName, CurrentProcedureName) Then Return Me
        If Guard.TooManyRanks(ipArray, CurrentComponentName, CurrentProcedureName) Then Return Me
        'If Guard.SizeMismatch(s.LastIndex > ArrayInfo.Count(myArray), CurrentComponentName, CurrentProcedureName) Then Return Me
       
        ipSeqStartIndex -= 1
        Dim myIndex  As Long = ipArrayStartIndex
        Dim myEndIndex As Long = ipArrayStartIndex + ipArrayCount - 1
        If myEndIndex > UBound(ipArray) Then
            myEndIndex = UBound(ipArray)
        End If
        Dim myItems As IterItems = IterItems(Me).SetFTS(ipSeqStartIndex)
        Do
            Dim myItem As Variant = myItems.Item(0)
            
            If VBA.IsObject(myItem) Then
                Set ipArray(myIndex) = myItem
            Else
                ipArray(myIndex) = myItem
            End If
            
            myIndex += 1
            
        Loop While myItems.MoveNext And myIndex <= myEndIndex
        
        Return Me
        
   End Function
   
   Public Function GetRange(ByVal ipStartIndex As Long, Optional ByVal ipRun As Variant = Empty, ByVal ipEndIndex As Variant = Empty) As Seq
        Return Slice(ipStartIndex, ipRun, ipEndIndex)
   End Function
   
    Public Function Slice _
    ( _
        Optional ByVal ipStartIndex As Variant = Empty, _
        Optional ipRun As Variant = Empty, _
        Optional ipEndIndex As Variant = Empty _
    ) As Seq
       'Debug.Print "Under construction"
        Dim myStartIndex As Long
        Dim myRun As Long
        Dim myser As SER = Ranges.ResolveStartEndRun(FIRST_INDEX, LastIndex, ipStartIndex, ipEndIndex, ipRun)
        
        ' The introduction of ResolveStartRunEnd means we always get sane values for 
        ' myStartIndex and myRun so no furthe rchecking of bounds is needed
        Dim myS As Seq = Seq.Deb
        Dim myIndex As Long
        For myIndex = myser.NativeStart To myser.NativeEnd
            myS.Add s.Host(myIndex)
        Next
        
        Return myS
        
    End Function
   
    Public Function SplitAt(ByVal ipIndex As Long, Optional ByVal ipSplitType As SeqSplitType = SplitBefore) As Seq
    
        Dim mySer As SER = Ranges.ResolveStartEndRun(FirstIndex, LastIndex, ipIndex)
    
        Dim mySplit As Seq
        If ipSplitType = SplitBefore Then
             Set mySplit = Seq.Deb.AddItems(Me.Slice(1, mySer.NativeStart - 1), Me.Slice(mySer.NativeStart))
        Else
        	Set mySplit = Seq.Deb.AddItems(Me.Slice(1, mySer.NativeStart), Me.Slice(mySer.NativeStart + 1))
            
        End If
        Return mySplit
        
    
    End Function
    
    '@Description("Splits the seq at the first occurence of ipItem")
    Public Function SplitAtItem(ByVal ipItem As Variant, Optional ByVal ipSplitType As SeqSplitType = SplitBefore) As Seq
        Dim mySplit As Seq
        Dim myItems As IterItems = IterItems(Me)
        Do
        
            If myItems.Item(0) = ipItem Then
                Dim myIndex As Long = myItems.Key(0)
                If ipSplitType = SplitBefore Then
                    Set mySplit = Seq.Deb.AddItems(Me.Slice(1, myIndex - 1), Me.Slice(myIndex))
                Else
                    Set mySplit = Seq.Deb.AddItems(Me.Slice(1, myIndex), Me.Slice(myIndex + 1))
                End If
            End If
        
        Loop While myItems.MoveNext
    
    
    End Function
    
    Public Function Stuff(ByRef ipItem As Variant) As Seq
        Return Insert(1, ipItem)
    End Function
    
    Public Function StuffItems(ParamArray ipItems() As Variant) As Seq
    	Return InsertRange(1, VBA.CVar(ipItems))
    End Function
    
    Public Function StuffRange(ByRef ipItems As Variant) As Seq
        Return InsertRange(1, ipItems)
    End Function
       
    Public Function Clone() As Seq
        Return Seq.Deb.AddRange(Me.ToArray)
    End Function
    
    '@Description("Deletes all items in the seq")
    Public Function Clear() As Seq
        Return RemoveAll
    End Function
    
    Public Function RemoveAll() As Seq
    
        If Count = 0 Then
            Return Me
        End If
        
        Dim myIndex As Long
        For myIndex = LastIndex To FirstIndex Step -1
            s.Host(myIndex) = Empty
        Next
        s.LastIndex = 0
        s.Size = DEFAULT_CHUNK
        Resize
        Return Me
    End Function
    
      '@Description("Removes one(default) or more instances of ipItem from the seq.  A count of -1 removes all instances")
    Public Function Remove(ByRef ipItem As Variant, Optional ByVal ipcount As Long = 1) As Seq
    
        Dim myIndex As Long = 1
        Dim myCounter As Long = 0
        Do
        
            If s.Host(myIndex) = ipItem Then
                Me.RemoveAt(myIndex)
                If ipcount = -1 Then
                    Continue Do
                End If
                
                myCounter += 1
                
                If ipcount > myCounter Then
                    Continue Do
                End If
               
            Else
            
                myIndex += 1
                
            End If
            
        Loop Until myIndex > UBound(s.Host)
        
        Return Me
        
    End Function
    
    Public Function Contains(ByRef ipItem As Variant) As Boolean
        Return Me.HoldsItem(ipItem)
    End Function

    '@Description("Moves all elements from ipIndex to s.lastindex down by ipCount places")
    Private Sub MoveDown(ByVal ipToIndex As Long, ByVal ipCount As Long)
      
        If ipCount < 1 Then
            Exit Sub
        End If
        
        ' If ipIndex < FIRST_INDEX Or ipIndex > s.LastIndex Then
        '     Exit Sub
        ' End If
        
        Dim myToIndex As Long = ipToIndex
        
        Dim myFromIndex As Long
        For myFromIndex = ipToIndex + ipCount To s.LastIndex
        
            If VBA.IsObject(s.Host(myFromIndex)) Then
                Set s.Host(myToIndex) = s.Host(myFromIndex)
            Else
            	s.Host(myToIndex) = s.Host(myFromIndex)
            End If
           ' s.Host(myFromIndex) = Empty
            myToIndex += 1
           
            
        Next
        Dim myIndex As Long
        For myIndex = s.LastIndex - ipCount + 1 To s.LastIndex
            s.Host(myIndex) = Empty
        Next
        s.LastIndex -= ipCount
        
    End Sub
    
    '@Description("Moves all elements from ipIndex to s.lastindex up by ipCount places")
    Private Sub MoveUp(ByVal ipIndex As Long, Optional ByVal ipCount As Long = 1)
    	
        If ipCount < 1 Then
            Exit Sub
        End If
        
        If ipIndex < FIRST_INDEX Or ipIndex > s.LastIndex Then
            Exit Sub
        End If

        
        Do While s.LastIndex + ipCount > s.Size
        	DoEvents
            s.Size += DEFAULT_CHUNK
            Resize

        Loop
    
        Dim myToIndex As Long = s.LastIndex + ipCount
        Dim myFromIndex As Long = s.LastIndex
        
        Dim myIterations As Long
        For myIterations = 0 To s.LastIndex - ipIndex

            Assign s.Host(myToIndex - myIterations), s.Host(myFromIndex - myIterations)
            
        Next

        s.LastIndex = s.LastIndex + ipCount
        
    End Sub

    Public Function HoldsItem(ByRef ipItem As Variant) As Boolean 'Implements IIndexed.HoldsItem
        'Me.IsQueryable
        If s.LastIndex < 1 Then
            Return False
        End If
        Dim myIndex As Long
        For myIndex = 1 To s.LastIndex
            Dim myItem As Variant = s.Host(myIndex)
            If myItem = ipItem Then
                Return True
            End If
          
        Next
        Return False
    End Function

    Public Function LacksItem(ByRef ipItem As Variant) As Boolean 'Implements IIndexed.LacksItem
        LacksItem = Not HoldsItem(ipItem)
    End Function

    Public Function MapIt(ByVal ipMapper As IMapper) As Seq

        Dim myAL As Seq = Seq.Deb
   
        Dim myI As IterItems = IterItems(Me.TrimToSize)
        Do
            DoEvents
            myAL.Add ipMapper.ExecMapper(myI.Item(0))    '(s.Host(myI.Item))
        Loop While myI.MoveNext

        Return myAL

    End Function

    Public Function FilterIt(ByVal ipComparer As IComparer) As Seq

        Dim mySeq As Seq = Seq.Deb
        Dim myI As IterItems = IterItems(Me)
        Do
            DoEvents
            Dim myItem As Variant = myI.Item(0)
            If ipComparer.ExecCmp(myItem) Then mySeq.Add myItem
        Loop While myI.MoveNext
        Return mySeq
        
    End Function
    
    ' Does not generate an interim seq as would filterIt followed by Count.
    Public Function CountIt(ByVal ipComparer As IComparer) As Long
        
        Dim myCount As Long = 0
        Dim myIndex As Long
        For myIndex = FirstIndex To LastIndex
            If ipComparer.ExecCmp(s.Host(myIndex)) Then myCount += 1
        Next

        Return myCount

    End Function
    
    '@Description("Returns a single value based on the Reducer").
    Public Function ReduceIt(ByRef ipReducer As IReducer) As Variant
        Return ipReducer.ExecReduction(Me)
    End Function
    
    '@Description("Returns the item at FirstIndex")
    Public Property Get First() As Variant
        Return s.Host(FIRST_INDEX)
    End Property
    
    '@Description("Assigns to the Item at FirstIndex")
    Public Property Let First(ByRef ipItem As Variant)
        s.Host(FIRST_INDEX) = ipItem
    End Property
    
    '@Description("Assigns to the Item at FirstIndex")
    Public Property Set First(ByRef ipItem As Variant)
        Set s.Host(FIRST_INDEX) = ipItem
    End Property
    
    '@Description("Returns the Item at LastIndex")
    Public Property Get Last() As Variant
        Return s.Host(s.LastIndex)
    End Property
    '@Description("Assigns to the Item at LastIndex")
    Public Property Let Last(ByRef ipItem As Variant)
        s.Host(s.LastIndex) = ipItem
    End Property
    '@Descriotion("Assigns to the item at LastIndex")
    Public Property Set Last(ByRef ipItem As Variant)
        Set s.Host(s.LastIndex) = ipItem
    End Property
        
    '@Returns("Returns the value of the first Index")
    Public Function FirstIndex() As Variant
        If s.LastIndex < FIRST_INDEX Then
            Return CVErr(9&)
        Else
            Return FIRST_INDEX
        End If
    End Function

    '@Description("Returns the value of the last used index")
    Public Function LastIndex() As Variant
        If s.LastIndex < FIRST_INDEX Then
            Return CVErr(9&)
        Else
            Return s.LastIndex
        End If
    End Function
    
    '@Description("Returns the First but One index or error 9")
    Public Function FBOIndex() As Variant
        If FIRST_INDEX + 1 <= s.LastIndex Then
            Return FIRST_INDEX + 1
        Else
            Return CVErr(9&)
        End If
    End Function
    
     '@Description("Returns the last but One index or error 9")
    Public Function LBOIndex() As Variant
        If s.LastIndex - 1 >= FirstIndex Then
            Return s.LastIndex - 1
        Else
            Return CVErr(9&)
        End If
    End Function
    
    
    Public Function Count() As Long
        Count = s.LastIndex
    End Function
    
    Public Property Get Capacity() As Long
        Capacity = s.Size
    End Property
    
    '@("Resizes the host array to the specifies capacity, existting values in the capacity range are preserved")
    Public Property Let Capacity(ByVal ipCapacity As Long)
        s.Size = ipCapacity
        Resize
    End Property
    
    
    '@Description("Returns the index of the Item")
    Public Function IndexOf _
    ( _
        ByVal ipItem As Variant, _
        Optional ipStart As Variant = Empty, _
        Optional ipEnd As Variant = Empty, _
        Optional ipRun As Variant = Empty _
    ) As Long

        Dim mySER As SER = Ranges.ResolveStartEndRun(FIRST_INDEX, LastIndex, ipStart, ipEnd, ipRun)
        
        Dim myIndex As Long
        For myIndex = mySER.NativeStart To mySER.NativeEnd
            If s.Host(myIndex) = ipItem Then Return myIndex
        Next
        Return -1
    End Function

    Public Function LastIndexOf(ByVal ipItem As Variant) As Long

        Dim myIndex As Long
        For myIndex = s.LastIndex To FIRST_INDEX Step -1
            If s.Host(myIndex) = ipItem Then Return myIndex
        Next
        Return -1
    End Function
    
    Public Function Join(Optional ByVal ipSeparator As String = char.twcomma) As String
        
        On Error Resume Next
        Dim myString As String = VBA.Join(Me.ToArray, ipSeparator)
        On Error GoTo 0
        Return myString

    End Function
    
    Public Function TrimToSize() As Seq
        If s.LastIndex > 0 Then
            ReDim Preserve s.Host(FIRST_INDEX To s.LastIndex)
        End If
        Return Me
    End Function
    
    
    Private Sub Resize()
        If s.Size < 1 Then
            ReDim Preserve s.Host(1 To DEFAULT_CHUNK)
        Else
            ReDim Preserve s.Host(1 To s.Size)
        End If
        
        ' The last index is not set here because it depends on why 
        ' resize was called
        ' Last index should be adjusted at the calling site.
    End Sub

    
    Public Function TypeName() As String
        Return MY_TYPENAME
    End Function

    Public Function IsQueryable() As Boolean
        Return Count > 0
    End Function
    
    Public Function IsNOtQueryable() As Boolean
        Return Count < 1
    End Function
    
    Public Function HasItems() As Boolean
        Return Count > 1
    End Function
    
    Public Function HasAnyItems() As Boolean
        Return Count > 0
    End Function
    
    Public Function HasOneItem() As Boolean
        Return Count = 1
    End Function
    
    Public Function ToCollection() As Collection
        Dim myC As Collection
        Dim myI As IterItems = IterItems(Me)
        Do
            myC.Add myI.Item(0)
        Loop While myI.MoveNext
        Return myC
    End Function
    
    Public Function Push(ByRef ipItem As Variant) As Long
        Return Add(ipItem)
    End Function
    
    Public Function PushItems(ParamArray ipParamArray() As Variant) As Seq
        Return AddItems(CVar(ipParamArray))
    End Function
    
    Public Function PushRangs(ByRef ipRange As Variant) As Seq
        Return AddRange(ipRange)
    End Function
    
    Public Function Queue(ByRef ipItem As Variant) As Long
        Return Add(ipItem)
    End Function
    
    Public Function QueueItems(ParamArray ipParamArray() As Variant) As Seq
        Return AddItems(CVar(ipParamArray))
    End Function
    
    Public Function QueueRange(ByRef ipRange As Variant) As Seq
        Return AddRange(ipRange)
    End Function
    
    
    Public Function RotL(Optional ByVal ipCount As Long = 1) As Seq
        Dim mycount As Long
        For mycount = 1 To ipCount
            AddItems Dequeue
        Next
        Return Me
    End Function
    
    Public Function RotR(Optional ByVal ipcount As Long = 1) As Seq
        Dim mycount As Long
        For mycount = 1 To ipcount
            Insert 1, Pop
        Next
        Return Me
    End Function
    
    Public Function Pop(Optional ipCount As Long = 1) As Variant
        
        If ipCount < 1 Then
            Return Null
        End If
        
        Dim mySeq As Seq = Seq.Deb
        Dim myCount As Long
        For myCount = 1 To ipCount
            mySeq.Add Me.Last
            Me.RemoveAt(Me.LastIndex)
        Next
        
        If mySeq.Count = 1 Then
            Return mySeq.First
        Else
        	Return mySeq
        End If
        
        ' Dim myA As Variant = Me.Slice(s.LastIndex - ipCount + 1, s.LastIndex).ToArray
        ' Me.RemoveAt(s.LastIndex - ipCount + 1, ipCount)
        ' If ipCount = 1 Then
        '     Return myA(0)
        ' Else
        ' 	Return myA
        ' End If
        
    End Function
    
    Public Function Dequeue(Optional ipCount As Long = 1) As Variant
        
        If ipCount < 1 Then
            Return Null
        End If
        
        Dim myA As Variant = Slice(FIRST_INDEX, iprun:=ipCount).ToArray
        Me.RemoveAt(FIRST_INDEX, ipCount)
        Return IIf(ipCount = 1, myA(0), myA)
       
    End Function
    
    Public Function Sort() As Variant
        Cops.SortInPlace Me
        Return Me
    End Function
    
    Public Function Swap(ByRef ipLHS As Long, ByVal ipRHS As Long) As Seq
    	Dim myTmp As Variant
        If VBA.IsObject(s.Host(ipLHS)) Then
            Set myTmp = s.Host(ipLHS)
        Else
            myTmp = s.Host(ipLHS)
        End If
        
        If VBA.IsObject(s.Host(ipRHS)) Then
            Set s.Host(ipLHS) = s.Host(ipRHS)
        Else
            s.Host(ipLHS) = s.Host(ipRHS)
        End If
        If VBA.IsObject(myTmp) Then
            Set s.Host(ipRHS) = myTmp
        Else
            s.Host(ipRHS) = myTmp
        End If
        
        Return Me
    End Function
    
    Public Function Reverse() As Seq
    
        ' we need to reverse in place
       
        Dim myArray As Variant
        ReDim myArray(LBound(s.Host, 1) To UBound(s.Host, 1))
        
        
        Dim myindex As Long = 1
        Dim myReverseIndex As Long
        For myReverseIndex = LastIndex To FirstIndex Step -1
            
            myArray(myReverseIndex) = s.Host(myindex)
            myindex += 1
        Next
        
        s.Host = myArray
        ' Dim myReversed As Seq = Seq.Deb
        ' Dim myItems As IterItems = IterItems.Deb(Me).MoveToEnd
        ' Do
        ' 	myReversed.Add myItems(0)
        ' Loop While myItems.MovePrev
         Return Me
        
    End Function

    Public Function Set(ByVal ipSet As SetOf, ipParam As Seq) As Seq
        Return Cops.Set(ipSet, Me, ipParam)
    End Function
    
    Public Function Merge(ByRef ipParam As Variant) As Seq
    	Return Me.AddRange(ipParam)
    End Function
    
    Public Function Host() As Variant 'Implements IIndexed.Host
        Return Items
    End Function
    
    Public Function IsUnique() As Boolean
        
        Dim myFreqs As KvpH = Me.Freq
        Dim myIter As IterItems = IterItems(myFreqs)
        Do
        	
            If myIter.Item(0) > 1 Then
            
                Return False
                
            End If
            
        Loop While myIter.MoveNext
        
        Return True
        
    End Function
    
    Public Function IsNotUnique() As Boolean
        Return Not IsUnique
    End Function
    
    
    Public Function Freq() As KvpH
    
        Dim myKvpH As KvpH = KvpH.Deb
        
        Dim myIter As IterItems = IterItems(Me)
        Do
            
            If myKvpH.HoldsKey(myIter.Item(0)) Then
            
                myKvpH.Item(myIter.Item(0)) += 1
            
            
            Else
                
                myKvpH.Add myIter.Item(0), 1
                
                
            End If
            
        Loop While myIter.MoveNext
        
        Return myKvpH
        
    End Function
    
    '@Description(creates an KvpH of collections items where the items in the collection are bucketed based on the value at an Index)
    Public Function Freq(ByVal ipIndex As Long) As KvpH
    
        Dim myKvpH As KvpH = KvpH.Deb
        
            Dim myIter As IterItems = IterItems(Me)
            Do
                Dim myItem As Variant = myIter.Item(0)
                If myKvpH.HoldsKey(myItem.Item(ipIndex)) Then
                
                    myKvpH.Item(myItem.Item(ipIndex)).add myIter.Item(0)
                
                
                Else
                    
                    myKvpH.Add myItem.Item(0), Seq.Deb
                    
                    
                End If
                
            Loop While myIter.MoveNext
        
        Return myKvpH
        
    End Function
    
 End Class
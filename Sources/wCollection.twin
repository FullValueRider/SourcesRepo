Class wCollection

    Attribute VB_GlobalNameSpace = False
    Attribute VB_Creatable = True
    Attribute VB_PredeclaredId = True
    Attribute VB_Exposed = True
     ' a wrapper for the twinBasic/vba Collection object
     ' that removbes some of the inconvenience
     
	Implements Collection Via Host = New Collection

    Const MY_TYPENAME                   As String = "wCollection"
    Const FIRST_INDEX                   As Long = 1
    
    
    Public Function Deb(Optional ByRef ipListArray As Variant = Empty) As wCollection
        With New wCollection
            Return .ConstructInstance(ipListArray)
        End With
    End Function
    
    Public Function ConstructInstance(ByRef ipList As Variant) As wCollection
        
        If VBA.IsEmpty(ipList) Then
            Return Me
        End If
        
        Dim myItems As IterItems = IterItems(ipList)
        Do
            Host.Add myItems.Item(0)
        Loop While myItems.MoveNext
        
        Return Me
        
    End Function
    
    
    Public Function Clear() As wCollection
        Dim myIndex As Long
        For myIndex = Host.Count To 1 Step -1
            Host.Remove myIndex
        Next
        Return Me
    End Function
    
    
    Public Function Clone() As wCollection
    
        Dim myItems As wCollection = wCollection.Deb
        
        Dim myItem As Variant
        For Each myItem In Host
            myItems.Add myItem
        Next
        
        Return myItems
        
    End Function
    
    Public Function Exists(ByRef ipItem As Variant) As Boolean
    
        Dim myIndex  As Long
        For myIndex = 1 To Count
        
            If VBA.IsObject(ipItem) And VBA.IsObject(Host.Item(myIndex)) Then
                If ObjPtr(ipItem) = ObjPtr(Host.Item(myIndex)) Then
                    Return True
                End If
            ElseIf (Not VBA.IsObject(ipItem)) And (Not VBA.IsObject(Host.Item(myIndex))) Then
                If Host.Item(myIndex) = ipItem Then
                    Return True
                End If
            End If
            
        Next
        
        Return False
        
    End Function
    
    
    '@DefaultMember
    Public Property Get Item(ByVal ipIndex As Variant) As Variant
        Return Host.Item(ipIndex)
    End Property
    
    Public Property Let Item(ByVal ipIndex As Variant, ByRef ipItem As Variant)
    	Host.Add ipItem, after:=ipIndex
        Host.Remove ipIndex
    End Property
    
    Public Property Set Item(ByVal ipIndex As Variant, ByRef ipItem As Variant)
    	Host.Add ipItem, after:=ipIndex
        Host.Remove ipIndex
    End Property
    
    Public Function Items(Optional ByVal ipSeqType As st__SeqType = st_seq) As Variant
        
        Select Case ipSeqType
        
            Case st_Array:          Return ToArray
                
            Case st_Seq:            Return Seq.Deb(Host)
                
            Case st_Collection:     Return Host
                
            Case st_wCollection:    Return Clone
            
            Case Else
                Err.Raise 17 + vbObjectError, _
                    "twLib.wCollection.Items", _
                    "Unexpected ipSeqType"
        End Select
        
    End Function
    
    Public Function HoldsItem(ByRef ipItem As Variant) As Boolean
        Return Me.Exists(ipItem)
    End Function
    
    Public Function LacksItem(ByRef ipItem As Variant) As Boolean
        Return Not Me.Exists(ipItem)
    End Function
    
    Public Function HoldsKey(ByRef ipKey As Long) As Boolean
        Return IIf(ipKey > FIRST_INDEX And ipKey <= Count, True, False)
    End Function
    
    Public Function HoldsKey(ByRef ipKey As String) As Boolean
        
        On Error Resume Next
        Dim myVar As Variant = Array(Host.Item(ipKey))
        Return Err.Number = 0
       
    End Function
    
    Public Function LacksKey(ByVal ipKey As Long) As Boolean
        Return Not HoldsKey(ipKey)
    End Function
    
    Public Function LacksKey(ByRef ipKey As String) As Boolean
        Return Not Me.HoldsKey(ipKey)
    End Function
    
    
    Public Function Sort() As Variant
    	Cops.SortInPlace Me
        Return Me
    End Function
    
    
    Public Function Reverse() As wCollection
        
        Dim myA As Variant
        ReDim myA(1 To Host.Count)
        
        Dim myIndex As Long
        For myIndex = 1 To Host.Count
        	If VBA.IsObject(Host.Item(myIndex)) Then
                Set myA(myIndex) = Host.Item(myIndex)
            Else
                myA(myIndex) = Host.Item(myIndex)
            End If
        Next
        
        Dim myEndIndex As Long = Host.Count
        For myIndex = 1 To Host.Count
            If VBA.IsObject(myA(myEndIndex)) Then
                Set Item(myIndex) = myA(myEndIndex)
            Else
            	Item(myIndex) = myA(myEndIndex)
            End If
            myEndIndex -= 1
        Next
        
        Return Me
        
    End Function
    
    
    Public Function First() As Variant
        Return Item(FIRST_INDEX)
    End Function
    
    Public Function Last() As Variant
        Return Item(Count)
    End Function
    
    
    Public Property Get Host() As Collection
        Return Host
    End Property
    
    Public Function ToArray() As Variant
    
        If Count = 0 Then
            Return Array()
        Else
                Dim myArray As Variant
                ReDim myArray(0 To Count - 1)
                Dim myIndex As Long
                For myIndex = 0 To Count - 1
                    If VBA.IsObject(Host.Item(myIndex + 1)) Then
                        Set myArray(myIndex) = Item(myIndex + 1)
                    Else
                        myArray(myIndex) = Item(myIndex + 1)
                    End If
                Next
        
            Return myArray
        End If
        
    End Function
    
    '@Description("Returns the index of the first found Item")
    Public Function IndexOf(ByRef ipItem As Variant) As Long
    
        Dim myIndex As Long
        For myIndex = 1 To Count
            Dim myHostItem As Variant = Host.Item(myIndex)
            If myHostItem = ipItem Then
                Return myIndex
            End If
        Next
        
    End Function
    
    Public Property Get TypeName() As String
        Return MY_TYPENAME
    End Property
    
End Class
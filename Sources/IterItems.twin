Class IterItems
    Attribute VB_GlobalNameSpace = False
    Attribute VB_Creatable = True
    Attribute VB_PredeclaredId = True
    Attribute VB_Exposed = True
    Attribute VB_Description = "Iterates 'Collection' entities with only one rank, strings, and single values."
    Option Explicit
  
    '2022 Nov 22 Revised GetItem method.
    ' The get itemMethod has been changed to a property and the use of an optional Index as been deprecated
    ' Thus instead of using GetItem/Set Item IterItems now uses a default Item method.
    ' the downside to this change is that the current item must be referenced at Item(0)
    ' or just (0) due to Item being the fefault method.
    
    
   ' Implements via means that all methods of Meta appear as methods of IterItems
   ' but which are directed to the object HostMeta
   ' this there is no need to reference with HostMeta when using Meta methods
    Implements Meta Via HostMeta
    
    
    Const MY_NAME                               As String = "IterItems"

    Private Type Properties
        
       ' Meta                                    As Meta     ' Data from Meta reflects the indexing of the entity
                                                            ' Contains the entity to be enumerated
        FTS                                     As FTS     ' FTS = From To Step Rank
        Offset                                  As long     ' The current offset from first index
        Items                                   As seq  ' Used for ItemByToArray objects
        Keys                                    As seq  ' Keys from ItemByKey objects
        Circular                                As boolean
    End Type

    Private p                                   As properties

    '@DefaultMember
    Public Function Deb(ByRef ipIterable As Variant) As IterItems
        With New IterItems
            Return .ConstructInstance(ipIterable)
        End With
    End Function

    Friend Function ConstructInstance(ByRef ipIterable As Variant) As IterItems
    
        p.Circular = False
        Set HostMeta = Meta(ipIterable)
       ' Set HostMeta = HostMeta
        
        Select Case True
        
            Case IsItemByToArray
            
                Set p.Items = Seq.Deb(Cargo.ToArray)
                
                
            Case IsItemByKey
            
                Set p.Keys = Seq.Deb(Cargo.Keys)
                
                
        End Select
        
        If Ranks.Count > 1 Then
        
            Err.Raise 17, "twLib.IterItems.ConstructInstance", "IterItems is restricted to one rank or less"
            
            
        End If
        
        ' we use size rather than count from a rank because the input item may be a
        ' multidimensional array with no specified setFTS used
        Set p.FTS = FTS(0, Size - 1, 1)
        
        p.Offset = p.FTS.From
        
        Return Me
        
    End Function
    
    Private Function SetFTSByFTS(ByRef ipFTS As FTS) As IterItems
    
        If ipFTS Is Nothing Then
            Set p.FTS = FTS.Deb(0, Size - 1, 1)
        Else
            Set p.FTS = ipFTS
        End If
        
        p.Offset = p.FTS.From
        If VBA.IsEmpty(p.FTS.To) Then
            ' Indexes provided by the ranks object are the true object indexes
            ' so we use the rank count to get the obased lastindex
            p.FTS.To = Ranks.Item(p.FTS.Rank).count - 1
        End If
        
        p.FTS.Step = VBA.Abs(p.FTS.Step) * IIf(p.FTS.From <= p.FTS.To, 1, -1)
        Return Me
    End Function

    '@Description("Sets the range, step and rank to be iterated.  ipFrom and ipTo should be specified as offsets from the first index")
    Public Function SetFTS _
    ( _
        Optional ByRef ipFromOrFTS As Variant = 0, _
        Optional ByRef ipTo As Variant = Empty, _
        Optional ByRef ipStep As Double = 1, _
        Optional ByVal ipRank As Long = 1 _
    ) As IterItems
        
        Dim myFts As FTS
        If VBA.IsObject(ipFromOrFTS) Then
        
        
            If VBA.TypeName(ipFromOrFTS) = "FTS" Then
                Set myFts = ipFromOrFTS
                Return SetFTSByFTS(myFts)
            End If
            
            If ipFromOrFTS Is Nothing Then
                Set myFts = ipFromOrFTS
                Return SetFTSByFTS(myFts)
            End If
            
        End If

        Dim myRank As Long = IIf(ipRank < 0, 1, ipRank)
        
        'Dim myFrom As Long = IIf(ipFromOrFTS < 0, 0, ipFromOrFTS)
        Dim myFrom As Long
        If ipFromOrFTS < 0 Then
            myFrom = 0
        Else
        	myFrom = CLng(ipFromOrFTS)
        End If
        
        Dim myTo As Variant = IIf(VBA.IsEmpty(ipTo), Ranks.Item(ipRank).count - 1, ipTo)
        
        Dim myStep As Double = IIf(ipStep = 0, 1, ipStep)
        myStep = VBA.Abs(myStep) * IIf(myFrom <= ipTo, 1, -1)
        
        Set p.FTS = FTS(myFrom, myTo, myStep, myRank)
        
        p.Offset = p.FTS.From
        
        Return Me

    End Function
    
    
    Private Function CanIncByOffset(Optional ByVal ipOffset As Long) As Boolean
    
        Dim myTryIndex As Long = p.Offset + (p.FTS.Step * ipOffset)
        
        If p.FTS.Step > 0 Then
            Return IIf(myTryIndex <= p.FTS.To, True, False)
        Else
            Return IIf(myTryIndex >= p.FTS.To, True, False)
        End If
        
    End Function
    
    
    Private Function CanDecByOffset(ByVal ipOffset As Long) As Boolean
    
        Dim myTryIndex As Long = p.Offset - (p.FTS.Step * ipOffset)
        
        If p.FTS.Step > 0 Then
            Return IIf(myTryIndex >= p.FTS.From, True, False)
        Else
            Return IIf(myTryIndex <= p.FTS.From, True, False)
        End If
        
    End Function
    
    '@Description("Move to the next item by 'Step'. Optionally can specify the number of steps.  NB A step may be defined as greater than one in the SetSpan method.")
    Public Function MoveNext(Optional ByVal ipOffset As Long = 1) As Boolean
        If HostMeta Is Nothing Then
            Return False
        ElseIf HostMeta.IsNotQueryable Then
            Return False
        End If
       If CanIncByOffset(ipOffset) Then
            p.Offset += (p.FTS.Step * ipOffset)
            Return True
        	
        Else
            If p.Circular Then
                MoveToStart
            Else
                Return False
            End If
        End If

    End Function
    
    Public Function MovePrev(Optional ByVal ipOffset As Long = 1) As Boolean
        If HostMeta Is Nothing Then
            Return False
        ElseIf HostMeta.IsNotQueryable Then
            Return False
        End If
        If CanDecByOffset(ipOffset) Then
            p.Offset -= (p.FTS.Step * ipOffset)
            Return True
        Else
            If p.Circular Then
                MoveToEnd
            Else
                Return False
            End If
        End If
        
    End Function
    

    '@Description("Returns the current offset from the first index")
    Public Function Index(ByRef ipOffset As Long) As Long
        ' p.offset is the current position.
        ' ipOffset is the position relative to the current position
        Return p.Offset + ipOffset
    End Function
    
    
    '@Description("Returns the Item at the specified offset from the current position")
    Public Property Get Item(ByRef ipOffset As Long) As Variant
   
        If HostMeta Is Nothing Then
            Return Null
        ElseIf HostMeta.IsNotQueryable Then
            Return Null
        End If
        
        Dim myIndex As Long
        Select Case True
        
            Case IsArray
            
                myIndex = FirstRank.FirstIndex + p.Offset + ipOffset
                If myIndex < FirstRank.FirstIndex Or myIndex > FirstRank.LastIndex Then
                    Return Null
                Else
                    Return Cargo(myIndex)
                End If
                
                
            Case IsItemByIndex0
                
                myIndex = FirstRank.FirstIndex + p.Offset + ipOffset
                If myIndex < FirstRank.FirstIndex Or myIndex > FirstRank.LastIndex Then
                    Return Null
                Else
                    Return Cargo.Item(myIndex)
                End If
               
                
                
            Case IsItemByIndex1
            
                myIndex = FirstRank.FirstIndex + p.Offset + ipOffset
                If myIndex < FirstRank.FirstIndex Or myIndex > FirstRank.LastIndex Then
                    Return Null
                Else
                    Return Cargo.Item(myIndex)
                End If
              
                
            
            Case IsItemByToArray
            
                myIndex = FirstRank.FirstIndex + p.Offset + ipOffset
                If myIndex < FirstRank.FirstIndex Or myIndex > FirstRank.LastIndex Then
                    Return Null
                Else
                    Return p.Items(myIndex + 1)
                End If
               
                
                
            Case IsItemByKey
            
                myIndex = p.Offset + ipOffset
                If myIndex < 0 Or myIndex > p.Keys.Count - 1 Then
                    Return Null
                Else
                    Dim mykey As Variant = p.Keys(myIndex +1)
                    Return Cargo.Item(mykey) 'Return p.Items(myIndex)
                End If
                
               
                
            Case IsString
            
                If VBA.Len(Cargo) = 0 Then
                
                    Return vbNullString
                    
                Else
                
                    myIndex = FirstRank.FirstIndex + p.Offset + ipOffset
                    If myIndex < FirstRank.FirstIndex Or myIndex > FirstRank.LastIndex Then
                        Return Null
                    Else
                        Dim myString As String = Cargo
                        Return VBA.Mid(myString, myIndex, 1)
                    End If
                        
                End If
                
                
            Case Else 'TyeInfo.HoldsSingleItem
            
                Return Cargo
            
        End Select
    
           
    End Property
    
    Public Property Set Item(ByRef ipOffset As Long, ByRef ipItem As Variant)
        If HostMeta Is Nothing Then
            Exit Property
        ElseIf HostMeta.IsNotQueryable Then
            Exit Property
        End If
        If Ranks(1).firstindex + p.Offset + ipOffset > Ranks(1).lastindex Then
        
            Err.Raise 17
            
        End If
        
        If Ranks(1).firstindex + p.Offset + ipOffset < Ranks(1).firstindex Then
        
            Err.Raise 17
            
        End If
        
        If Not VBA.IsObject(ipItem) Then
        
            Err.Raise 17
            
        End If
        
        
        Select Case True
        
            Case IsArray
            
                Err.Raise 17
                
            Case IsItemByIndex0, IsItemByIndex1
            
                If VBA.IsObject(ipItem) Then
                
                    Set Cargo.Item(Ranks(1).firstindex + p.Offset + ipOffset) = ipItem
                    
                Else
                	
                    Cargo.Item(Ranks(1).firstindex + p.Offset + ipOffset) = ipItem
                    
                End If
                
                
            Case IsItemByToArray
            
                If VBA.IsObject(ipItem) Then
                	
                    Set p.Items(Ranks(1).firstindex + p.Offset + ipOffset) = ipItem
                    
                Else
                	
                    p.Items(Ranks(1).firstindex + p.Offset + ipOffset) = ipItem
                    
                End If
                
                
            Case IsItemByKey
                Dim myKey As Variant
                If VBA.IsObject(ipItem) Then
                    Set myKey = p.Keys(p.Offset + ipOffset + 1)  '+ 1
                    Set Cargo.Item(myKey) = ipItem
                    'Set p.Keys(p.Offset + ipOffset) = ipItem
                    
                Else
                    myKey = p.Keys(p.Offset + ipOffset + 1)
                    Cargo.Item(p.Keys(myKey)) = ipItem
                    '.p.Keys(p.Offset + ipOffset) = ipItem
                End If
                
                
            ' Case IsString
            
            '     Dim myString As String = Cargo
            '     Mid(myString, Ranks(1).firstindex + p.Offset + ipOffset) = ipItem
            '     Cargo = myString
                
                
            Case Else
            
              ' If VBA.IsObject(ipItem) Then
               
                    Set Cargo = ipItem
                    
               ' Else
                
                '    Cargo = ipItem
                
              '  End If
                
            
        End Select
    
       ' Return Me
        
    End Property
    
    Public Property Let Item(ByRef ipOffset As Long, ByRef ipItem As Variant)
        
        If HostMeta Is Nothing Then
            Exit Property
        ElseIf HostMeta.IsNotQueryable Then
            Exit Property
        End If
        
        If Ranks(1).firstindex + p.Offset + ipOffset > Ranks(1).lastindex Then
        
            Err.Raise 17
            
        End If
        
        If Ranks(1).firstindex + p.Offset + ipOffset < Ranks(1).firstindex Then
        
            Err.Raise 17
            
        End If
        
        If VBA.IsObject(ipItem) Then
        
            Err.Raise 17
            
        End If
        
        
        Select Case True
        
            Case IsListArray
                Dim myArrayIndex As Long = Ranks(1).firstindex + p.Offset + ipOffset
                'Cargo is returning a copy of the array so any changes made here will not be reflected
                'in the copy held by cargo.  This means we have to have a Meta Item method to allow arrays to be updated
                If VBA.IsObject(ipItem) Then
                    
                    Set HostMeta.Item(Ranks(1).firstindex + p.Offset + ipOffset) = ipItem
                    
                Else
                	
                    HostMeta.Item(Ranks(1).firstindex + p.Offset + ipOffset) = ipItem
                    
                End If
                
                
            Case IsItemByIndex0, IsItemByIndex1
            
                'Err.Raise 17
                If VBA.IsObject(ipItem) Then
                
                    Set Cargo.Item(Ranks(1).firstindex + p.Offset + ipOffset) = ipItem
                    
                Else
                	
                    Cargo.Item(Ranks(1).firstindex + p.Offset + ipOffset) = ipItem
                    
                End If
                
                
            Case IsItemByToArray
            
                'Err.Raise 17
                ' If VBA.IsObject(ipItem) Then
                	
                '     Set p.Items(Ranks(1).firstindex + p.Offset + ipOffset) = ipItem
                    
                ' Else
                	
                '     p.Items(Ranks(1).firstindex + p.Offset + ipOffset) = ipItem
                    
                ' End If
                
                
            Case IsItemByKey
            
                'Err.Raise 17
            
                If VBA.IsObject(ipItem) Then
                    
                    Set Cargo.Item(p.Keys(p.Offset + ipOffset + 1)) = ipItem
                    
                Else
                
                     Cargo.Item(p.Keys(p.Offset + ipOffset + 1)) = ipItem
                    
                End If
                
                
            Case IsString
            
                Dim myString As String = Cargo
                Mid(myString, Ranks(1).firstindex + p.Offset + ipOffset) = ipItem
                Cargo = myString
                
                
            Case Else
            
              ' If VBA.IsObject(ipItem) Then
               
                   ' Set Cargo = ipItem
                    
               ' Else
                
                    Cargo = ipItem
                
              '  End If
                
            
        End Select
    
       ' Return Me
        
    End Property
    
    '@Description("Equvalent of Item(x)= yyy but allows for the fluent interface, i.e returns Me.")
    Public Function SetItem(ByRef ipItem As Variant, Optional ByRef ipOffset As Long) As IterItems
        If HostMeta Is Nothing Then
            Return Me
        ElseIf HostMeta.IsNotQueryable Then
            Return Me
        End If
        If Ranks(1).firstindex + p.Offset + ipOffset > Ranks(1).lastindex Then
        
            Return Me
            
        End If
        
        If Ranks(1).firstindex + p.Offset + ipOffset < Ranks(1).firstindex Then
        
            Return Me
            
        End If
        
        
        Select Case True
        
            Case IsListArray
                Dim myArrayIndex As Long = Ranks(1).firstindex + p.Offset + ipOffset
                'Cargo is returning a copy of the array so any changes made here will not be reflected
                'in the copy held by cargo.  This means we have to have a Meta Item method to allow arrays to be updated
                If VBA.IsObject(ipItem) Then
                    
                    Set HostMeta.Item(Ranks(1).firstindex + p.Offset + ipOffset) = ipItem
                    
                Else
                	
                    HostMeta.Item(Ranks(1).firstindex + p.Offset + ipOffset) = ipItem
                    
                End If
                
                
            Case IsItemByIndex0, IsItemByIndex1
            
                If VBA.IsObject(ipItem) Then
                
                    Set Cargo.Item(Ranks(1).firstindex + p.Offset + ipOffset) = ipItem
                    
                Else
                	
                    Cargo.Item(Ranks(1).firstindex + p.Offset + ipOffset) = ipItem
                    
                End If
                
                
            Case IsItemByToArray
            
                If VBA.IsObject(ipItem) Then
                	
                    Set p.Items(Ranks(1).firstindex + p.Offset + ipOffset) = ipItem
                    
                Else
                	
                    p.Items(Ranks(1).firstindex + p.Offset + ipOffset) = ipItem
                    
                End If
                
                
            Case IsItemByKey
            
                If VBA.IsObject(ipItem) Then
                    
                    Set Cargo.Item(p.Keys(p.Offset + ipOffset)) = ipItem
                    
                Else
                
                     Cargo.Item(p.Keys(p.Offset + ipOffset)) = ipItem
                    
                End If
                
                
            Case IsString
            
                Dim myString As String = Cargo
                Mid(myString, Ranks(1).firstindex + p.Offset + ipOffset) = ipItem
                Cargo = myString
                
                
            Case Else
            
               If VBA.IsObject(ipItem) Then
               
                    Set Cargo = ipItem
                    
                Else
                
                    Cargo = ipItem
                
                End If
                
            
        End Select
    
        Return Me
        
    End Function
    
    '@Description("True sets the MoveNext/Prev methods to automatically wrap around.")
    Public Property Get Circular() As Boolean
        Return p.Circular
    End Property
    
    Public Property Set Circular(ByVal ipCircular As Boolean)
        p.Circular = ipCircular
    End Property
    
    
    ' not sure about the validity of this method
    ' as the item wil not always be a variant
    Private Function IsEmpty(Optional ByVal ipOffset As Long = 0) As Boolean
        Return VBA.IsEmpty(Item(ipOffset))
    End Function
    
    Private Function IsNotEmpty(Optional ByVal ipOffset As Long = 0) As Boolean
        Return Not VBA.IsEmpty(Item(ipOffset))
    End Function
   
    Public Function ItemIsEmpty(Optional ByVal ipOffset As Long = 0) As Boolean
        Return VBA.IsEmpty(Item(ipOffset))
    End Function
    
    Public Function ItemIsNotEmpty(Optional ByVal ipOffset As Long = 0) As Boolean
        Return Not VBA.IsEmpty(Item(ipOffset))
    End Function
   
   
    Private Function IsObject(Optional ByVal ipOffset As Long = 0) As Boolean
        Return VBA.IsObject(Item(ipOffset))
    End Function
    
   Private Function IsNotObject(Optional ByVal ipOffset As Long = 0) As Boolean
        Return Not IsObject(Item(ipOffset))
    End Function
    
    Public Function ItemIsObject(Optional ByVal ipOffset As Long = 0) As Boolean
        Return VBA.IsObject(Item(ipOffset))
    End Function
    
    Public Function ItemIsNotObject(Optional ByVal ipOffset As Long = 0) As Boolean
        Return Not IsObject(Item(ipOffset))
    End Function
    
    '@Description("Return the Key at the specified offset from the first index. If the wrapped object is not a dictionary, the key is the native index of the current item adjust for the offset.)"
    Public Function Key(ByRef ipOffset As Long) As Variant
        If IsItemByKey Then
            Return p.Keys(p.Offset + ipOffset + 1)' FirstIndex(1) +
        Else
            ' todo this line will need updating for multidimensional arrays
            Return Ranks(1).FirstIndex + p.Offset + ipOffset
        End If

    End Function
    
    
    Public Function HasNext(Optional ByVal ipOffset As Long = 1) As Boolean
        If HostMeta Is Nothing Then
            Return False
        ElseIf HostMeta.IsNotQueryable Then
            Return False
        End If
        If p.Circular Then
            Return True
        Else
            Return CanIncByOffset(ipOffset)
        End If
    End Function
    
    Public Function HasNoNext(Optional ByVal ipOffset As Long = 1) As Boolean
        If HostMeta Is Nothing Then
            Return True
        ElseIf HostMeta.IsNotQueryable Then
            Return True
        End If
       If p.Circular Then
            Return True
        Else
            Return Not CanIncByOffset(ipOffset)
        End If
    End Function
    
    
    Public Function HasPrev(Optional ByVal ipOffset As Long = 1) As Boolean
        If HostMeta Is Nothing Then
            Return False
        ElseIf HostMeta.IsNotQueryable Then
            Return False
        End If
       If p.Circular Then
            Return True
        Else
            Return CanDecByOffset(ipOffset)
        End If
    End Function
    
    Public Function HasNoPrev(Optional ByVal ipOffset As Long = 1) As Boolean
        If HostMeta Is Nothing Then
            Return True
        ElseIf HostMeta.IsNotQueryable Then
            Return True
        End If
       If p.Circular Then
            Return True
        Else
            Return Not CanDecByOffset(ipOffset)
        End If
    End Function
    
    
    Public Function Count(Optional ipRank As Long = 0) As Long
        Return Size(ipRank)
    End Function
    
    ' Note: First index and last index for meta should be changed to first and last offset
    Public Function LastIndex(Optional ipRank As Long = 1) As Long
        Return Size(ipRank) - 1
    End Function
    
    Public Function FirstIndex() As Long
        Return 0
    End Function
    
    Public Function MoveToStart() As IterItems
        p.Offset = 0
        Return Me
    End Function
    
    Public Function MoveToEnd() As IterItems
        p.Offset = Ranks(1).count - 1
        Return Me
    End Function
    
    
    Public Function MoveToFrom() As IterItems
        p.Offset = p.FTS.From
    End Function
    
    Public Function MoveToTo() As IterItems
        p.Offset = p.FTS.To
    End Function
    
    ' Public Function MoveBy(ByVal ipOffset As Long) As IterItems
    '     p.Offset += ipOffset
    ' End Function
    
    
    Public Property Get TypeName() As String
        Return MY_NAME
    End Property
    
End Class
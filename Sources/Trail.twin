Class Trail
    Attribute VB_GlobalNameSpace = False
    Attribute VB_Creatable = True
    Attribute VB_PredeclaredId = True
    Attribute VB_Exposed = True

    ' A class which provides
    ' - a log of where a coordinate has been
    ' - a log of the number of times a coordinate has been visited
    ' - the means move that Coordinate
    ' - Methods relating to the current position and another position
    
    Option Explicit

    Const MY_TYPENAME                           As String = "Trail"


    Private Type XYMovement

        NS                                      As long
        WE                                      As long

    End Type


    Public Type Bounds

        MinX                                    As Long
        MinY                                    As Long
        MaxX                                    As Long
        MaxY                                    As Long
        
    End Type


    Public Enum UpType

        UpIncY = 0
        UpDecY
        
    End Enum


    Public Enum CompassPoints

        FourWays = 4
        EightWays = 8
        
    End Enum


    Public Enum Direction

        North = 0
        East = 90
        South = 180
        West = 270
        
        NW = 315
        NE = 45
        SE = 135
        SW = 225
        
        Forward = 1
        Backward = 2
        Left = 3
        Right = 4
        
    End Enum


    Private Type Properties

        Current                                 As coord
        
        Direction                               As Direction
        CompassPoints                           As CompassPoints
        
        CoordFirstRepeatVisit                   As coord
        CoordMostRecentRepeatVisit              As coord
        
        IsRepeatVisit                           As boolean
        'Heading                                 As String
        UpType                                  As UpType
        
    End Type

    Private p As Properties


    Private Type State

        Origin                                  As Coord
        
        DirectionMap                            As Lookup
        MovementMap                             As Lookup
        
        Mover                                   As XYMovement
        TurnAngle                               As long
        
        Visited                                 As KvpH ' holds a list of visited coordinates as Keys and the number of visits as Items
        Track                                   As Seq  ' A sequential record of the movenent of the coord
        
        IsBounded                               As Boolean
        Limits                                  As Bounds
        ' AllowedSteps                            As long
        ' AttemptedSteps                          As Long
        
    End Type

    Private s                               As state

    '@DefaultMember
    ' Public Function Deb() As Trail
    '     With New Coord
    '         Return .ConstructInstance(Coord.Deb(0, 0), Four, UpIncY)
    '     End With
    ' End Function

    ' Public Function Deb(ByVal ipX As Long, ByVal ipY As Long, Optional ipCompassPoints As CompassPoints = four, Optional ipUpType As UpType = UpIncY) As Coord
    '     With New Coord
    '         Return .ConstructInstance(Coord.Deb(ipX, ipY), ipCompassPoints, ipUpType)
    '     End With
    ' End Function


    Public Function Deb(ByRef ipCoord As Coord, Optional ipCompassPoints As CompassPoints = fourway, Optional ipUpType As UpType = UpIncY) As Trail
        With New Trail
            Return .ConstructInstance(ipCoord, ipCompassPoints, ipUpType)
        End With
    End Function


    ' Public Function Deb(ByVal ipKVPair As KVPair, Optional ipCompassPoints As CompassPoints = four, Optional ipUpType As UpType = UpIncY) As Coord
    '     Return Deb(Coord.Deb(CLng(ipKVPair.Key(0)), CLng(ipKVPair.Item(0))), ipCompassPoints, ipUpType)
    ' End Function


    Public Function ConstructInstance _
    ( _
        ByRef ipCoord As Coord, _
        ByVal ipCompassPoints As CompassPoints, _
        ByVal ipUpType As UpType _
    ) As Trail
        Set s.Origin = ipCoord.Clone
        
        p.CompassPoints = ipCompassPoints
        p.UpType = ipUpType
        
        Set p.Current = s.Origin.Clone
        
        p.Direction = Direction.North
        Set p.CoordFirstRepeatVisit = Nothing
        Set p.CoordMostRecentRepeatVisit = Nothing
        
        If ipCompassPoints <> FourWay And ipCompassPoints <> Eightway Then
            Err.Raise 17 + vbObjectError, "twLib.Coord.ConstructInstance", "Compass points must be 4 or 8"
        End If
        
        PopulateMovementMap
        PopulateDirectionMap
        
        'direction moved to go north depends on UpType
        s.Mover.WE = s.MovementMap.Item(North)(0)
        s.Mover.NS = s.MovementMap.Item(North)(1)
        
        Set s.Track = Seq.Deb
        Set s.Visited = KvpH.Deb
        s.TurnAngle = IIf(p.CompassPoints = FourWay, 90, 45)
            
        s.IsBounded = False
        s.Track.Add ToString
        s.Visited.Add ToString, 1
        Return Me
        
    End Function

    Private Sub PopulateDirectionMap()
    
        Set s.DirectionMap = Lookup.Deb
        
        With s.DirectionMap
        
            .Add "n", Direction.North
            .Add "north", Direction.North
            .Add "u", Direction.North
            .Add "up", Direction.North
            .Add "^", Direction.North
            
            .Add "s", Direction.South
            .Add "south", Direction.South
            .Add "d", Direction.South
            .Add "down", Direction.South
            .Add "v", Direction.South
            
            
            .Add "w", Direction.West
            .Add "west", Direction.West
            .Add "<", Direction.West
            
            .Add "e", Direction.East
            .Add "east", Direction.East
            .Add ">", Direction.East
            
            
            .Add "nw", Direction.NW
            .Add "ne", Direction.NE
            .Add "se", Direction.SE
            .Add "sw", Direction.SW
            
            .Add "f", Direction.Forward
            .Add "forward", Direction.Forward
            .Add "forwards", Direction.Forward
        
            .Add "b", Direction.Backward
            .Add "back", Direction.Backward
            .Add "backward", Direction.Backward
            .Add "backwards", Direction.Backward
            
            .Add "l", Direction.Left
            .Add "left", Direction.Left
            
            .Add "r", Direction.Right
            .Add "right", Direction.Right
        
        End With
    End Sub
    
    
    Private Sub PopulateMovementMap()

        Set s.MovementMap = Lookup.Deb
        If p.UpType = UpIncY Then
            With s.MovementMap
            
                .Add Direction.North, Array(0, 1)
                .Add Direction.NE, Array(1, 1)
                .Add Direction.East, Array(1, 0)
                .Add Direction.SE, Array(1, -1)
                .Add Direction.South, Array(0, -1)
                .Add Direction.SW, Array(-1, -1)
                .Add Direction.West, Array(-1, 0)
                .Add Direction.NW, Array(-1, 1)
                
            End With
            
        Else
            
            With s.MovementMap
            
                .Add Direction.North, Array(0, -1)
                .Add Direction.NE, Array(1, -1)
                .Add Direction.East, Array(1, 0)
                .Add Direction.SE, Array(1, 1)
                .Add Direction.South, Array(0, 1)
                .Add Direction.SW, Array(-1, 1)
                .Add Direction.West, Array(-1, 0)
                .Add Direction.NW, Array(-1, -1)
                
            End With
            
        End If
        
    End Sub


    Private Sub TurnLeft()
        
        p.Direction -= s.TurnAngle
        If p.Direction < 0 Then
            p.Direction = IIf(p.CompassPoints = FourWay, 270, 315)
        End If
        
        Dim myMovement As Variant = s.MovementMap.Item(p.Direction)
        s.Mover.WE = myMovement(0)
        s.Mover.NS = myMovement(1)
        
    End Sub
        
    Public Sub TurnRight()

        p.Direction += s.TurnAngle
        If p.Direction >= 360 Then
            p.Direction = IIf(p.CompassPoints = FourWay, 0, 0)
        End If
        
        Dim myMovement As Variant = s.MovementMap.Item(p.Direction)
        s.Mover.WE = myMovement(0)
        s.Mover.NS = myMovement(1)
        
    End Sub


    Public Property Get CoordOfFirstRepeatVisit() As Coord
        Return p.CoordFirstRepeatVisit
    End Property


    Public Property Get CoordOfMostRecentRepeatVisit() As Coord
        Return p.CoordMostRecentRepeatVisit
    End Property

    Public Function IsCurrentCoord(ByRef ipCoord As Coord) As Boolean
        Return (ipCoord.X = p.Current.X) And (ipCoord.Y = p.Current.Y)
    End Function
    
    Public Function IsAtOrigin() As Boolean
        Return (s.Origin.X = p.Current.X) And (s.Origin.Y = p.Current.Y)
    End Function


    Public Function Reset() As Coord
        p.Current.X = s.Origin.X
        p.Current.Y = s.Origin.Y
        s.Track.Clear
        s.Visited.Clear
        Return Me
    End Function


    Public Property Get X() As Long
        X = p.Current.X
    End Property


    Public Property Get Y() As Long
        Y = p.Current.Y
    End Property


    Public Property Get ToString() As String
        Return p.Current.ToString
    End Property


    ' Public Function Clone() As Coord
    '     Return Deb(s.OriginX, s.OriginY, CLng(IIf(p.TurnAngle = 90, FOUR_COMPASS_POINTS, EIGHT_COMPASS_POINTS))).MoveTo(p.CurrentX, p.CurrentY)
    ' End Function


    ' Public Function MoveTo(ByVal ipX As Long, ipY As Long) As Coord

    '     If s.Blocked IsNot Nothing Then
        
    '         If s.Blocked.HoldsKey(CStr(ipX) & Char.twComma & CStr(ipY)) Then
    '             Return Me
    '         End If
            
    '     End If
        
    '     p.CurrentX = ipX
    '     p.CurrentY = ipY
    '     If s.IsBounded Then
    '         EnforceBounds
    '     End If
    '         Return Me
    ' End Function


    Public Sub Move(ByVal ipDirection As String, Optional ByVal ipDistance As Long = 1)

        SetMoverByDirection ipDirection, ipDistance
        
        Dim mySteps As Long
        For mySteps = 1 To VBA.Abs(ipDistance)
        	ApplyMover
        Next
    End Sub
    
    Private Sub SetMoverByDirection(ByVal ipDirection As String, ByVal ipDistance As Long)
        Dim myDirection As Long = s.DirectionMap.Item(VBA.LCase$(ipDirection))
        
        Select Case myDirection
        
            Case North, NE, East, SE, South, SW, West, NW
            
                s.Mover.WE = s.MovementMap.Item(myDirection)(0)
                s.Mover.NS = s.MovementMap.Item(myDirection)(1)
                
            Case Direction.Left
            
                TurnLeft
                
            Case Direction.Right
            
                TurnRight
                
            Case Direction.Forward
            
                'no action needed as s.mover is already pointing the way we wish to go
                
            Case Direction.Backward
            
                s.Mover.WE = -s.Mover.WE
                s.Mover.NS = -s.Mover.NS
                
        End Select
        
        If ipDistance < 0 Then
        
            s.Mover.WE = -s.Mover.WE
            s.Mover.NS = -s.Mover.NS
            
        End If
        
    End Sub
    
    
    Private Sub ApplyMover()
    
        p.Current.X += s.Mover.WE
        p.Current.Y += s.Mover.NS
            
        If s.IsBounded Then
            EnforceBounds
        End If
        
        If s.Track.Last = p.Current.ToString Then
            Exit Sub
        End If
        
        s.Track.Add p.Current.ToString
        
        If s.Visited.HoldsKey(p.Current.ToString) Then
            
            s.Visited.Item(p.Current.ToString) += 1
            
            If p.CoordFirstRepeatVisit Is Nothing Then
            
                Set p.CoordFirstRepeatVisit = p.Current.Clone
            
            End If
            
            Set p.CoordMostRecentRepeatVisit = p.Current.Clone
            p.IsRepeatVisit = True
        Else
        
            s.Visited.Add p.Current.ToString, 1
            p.IsRepeatVisit = False
            
        End If

    End Sub

    Public Function IsFourWays() As Boolean
        Return p.CompassPoints = FourWays
    End Function
    
    Public Function IsEIghtWays() As Boolean
        Return p.CompassPoints = EightWays
    End Function
    
    Public Function AdjacentIsDiagonal(ByRef ipCoord As Coord) As Boolean
        Return (ipCoord.X <> p.Current.X) And (ipCoord.Y <> p.Current.Y)
    End Function
    
    Public Function IsAdjacent(ByRef ipCoord As Coord) As Boolean
        
        If IsCurrentCoord(ipCoord) Then Return False
        	
        If ipCoord.X < p.Current.X - 1 Then Return False
        If ipCoord.X > p.Current.X + 1 Then Return False
        If ipCoord.Y < p.Current.Y - 1 Then Return False
        If ipCoord.Y > p.Current.Y - 1 Then Return False
        	
        If IsFourWays And AdjacentIsDiagonal(ipCoord) Then Return False
        
        Return True
        
    End Function
    
    '@Description(Moves to an adjacent coord if provided coord is an adjacent coord)
    Public Function MoveTo(ByRef ipCoord As Coord) As Trail
    	    
        If IsCurrentCoord(ipCoord) Then
            Return Me
        End If
        
        ' Exit if compass is fourway and movement is diagonal
        If IsFourWays Then
            If AdjacentIsDiagonal(ipCoord) Then
                Return Me
            End If
        End If
        
        If ipCoord.X > p.Current.X + 1 Then Return Me
        If ipCoord.X < p.Current.X - 1 Then Return Me
        If ipCoord.Y > p.Current.Y + 1 Then Return Me
        If ipCoord.Y < p.Current.Y - 1 Then Return Me
        
        s.Mover.WE = ipCoord.X - p.Current.X
        s.Mover.NS = ipCoord.Y - p.Current.Y
        
        ApplyMover
        
    End Function
    

    Private Sub EnforceBounds()

        If p.Current.X > s.Limits.MaxX Then p.Current.X = s.Limits.MaxX
        If p.Current.X < s.Limits.MinX Then p.Current.X = s.Limits.MinX
        If p.Current.Y > s.Limits.MaxY Then p.Current.Y = s.Limits.MaxY
        If p.Current.Y < s.Limits.MinY Then p.Current.Y = s.Limits.MinY
        
    End Sub


    Public Function SetBounds(ByVal ipMinX As Long, ByVal ipMinY As Long, ByVal ipMaxX As Long, ByVal ipMaxY As Long) As Coord
        
            s.IsBounded = True
            
            s.Limits.MinX = ipMinX
            s.Limits.MinY = ipMinY
            s.Limits.MaxX = ipMaxX
            s.Limits.MaxY = ipMaxY
        
            Return Me
            
    End Function


    Public Property Get IsBounded() As Boolean
        Return s.IsBounded
    End Property


    Public Function Manhatten(Optional ByRef ipcoord As Coord = Nothing) As Long
        If ipcoord Is Nothing Then
            Return Abs(p.Current.X - s.Origin.X) + Abs(p.Current.Y - s.Origin.Y)
        Else
        	Return Abs(ipcoord.X - s.Origin.X) + Abs(ipcoord.Y - s.Origin.Y)
        End If
    End Function


    ' Public Function Manhatten(ByVal ipCoord As String) As Long
    '     Dim mycoord As Coord = Coord.Deb(ipCoord)
    '     Return Manhatten(mycoord.X, mycoord.Y)
    ' End Function

    Public Function ManhattenFrom(ByRef ipCoord As Coord) As Long
        Return Abs(p.Current.X - ipCoord.X) + Abs(p.Current.Y - ipCoord.Y)
    End Function

    Public Function Visited() As KvpH
        Return s.Visited
    End Function

    Public Function Track() As Seq
        Return s.Track
    End Function

    'Public Function MapHeading() As Double
        ' Heading when the NS is positive moving up
        ' Debug.Print "Need to fix Heading"
        ' Dim myDx As Double
        ' myDx = CDbl(p.CurrentX - s.OriginX)
        
        ' Dim myDy As Double
        ' myDy = CDbl(p.CurrentY - s.OriginY)
        
        ' Dim myAngle As Double
        ' myAngle = Maths.ATan2(myDy, myDx) * Maths.RadiansToDegrees
        
        ' If myAngle < 0 Then
        
        '   '  myAngle = myAngle + p.HeadingDatum + 360   ' This is simular to doing
        '                                 ' 360 Math.Atan2(y1 - y2, x1 - x2) * (180 / Math.PI)
                                        
        ' End If
        
        ' Heading = myAngle
    
    'End Function

    ' Public Function VDUHeading() As Double
    '     ' Heading when the Y axis is positive moving down
    ' End Function

    ' Public Property Get TurnAngle() As Long
    '     Return p.TurnAngle
    ' End Property

    Public Property Get CompassPoints() As Long
        Return p.CompassPoints
    End Property


    ' Public Function CoordOfFirstRepeatVisit() As String
    '     Return p.FirstRepeatVisit
    ' End Function
    
    Public Function clone() As Trail
    
        Dim myS As State
    End Function
    
    Friend Function CloneS(ipState As State) As State
    
        With ipState
            .DirectionMap = s.DirectionMap.Clone
            .IsBounded = s.IsBounded
            .Limits = s.Limits
            .MovementMap = s.MovementMap.Clone
            .Mover = s.Mover
            .Origin = s.Origin.Clone
            .Track = s.Track.Clone
            .TurnAngle = s.TurnAngle
            .Visited = s.Visited.Clone
        End With
        
    End Function
    
    ' Friend Sub SetPrivateS(ByRef ip
    
    ' Friend Function CloneP(ByRef) As Properties
    
    
    ' End Function
    
    

    Public Property Get TypeName() As String
        Return MY_TYPENAME
    End Property

End Class
Class KvpH
    Attribute VB_GlobalNameSpace = False
    Attribute VB_Creatable = True
    Attribute VB_PredeclaredId = True
    Attribute VB_Exposed = True
    Option Explicit
    '@Description("Dictionary derived from cHashD2 by Olaf Schmidt")
    
    Private Const MY_TYPENAME                       As String = "KvpH"
    
    
    Implements cHashD2 Via Host
  

    Private CurrentIndex As Long
    Private Const MinValue As Long = 65
    Private Const MaxValue As Long = 123
    Private Const E_INVALIDARGS As Long = &H80070057
    Private Const S_OK As Long = 0
    Private Const S_FALSE As Long = 1
    
    Public Enum MirrorType
    
        ByAllValues = 0                 ' Returns a KvpH of KvpH where the Outer KvpH has the Host Values as Keys, and the InnerKvp are Host Keys vs Index 
        ByFirstValue = 0                ' Returns an KvpH of two KvpH.  KvpH(1) is first found Host Value vs Key, the second is Host Key vs subsequent found host values
        
    End Enum
    
    ' Private Sub New()
    '     Set Host = cHashD2.Deb
    ' End Sub

    Public Function Deb() As KvpH
        With New KvpH
            Return .ConstructInstance
        End With
    End Function

    Friend Function ConstructInstance() As KvpH
        Set Host = New cHashD2
        Return Me
    End Function

    ' Public Function ReInit(Optional ByVal ExpectedMaxCount As Long, Optional ByVal EnsureUniqueKeys As Boolean) As KvpH
    '     Return Host.ReInit(ExpectedMaxCount, EnsureUniqueKeys)
    ' End Function
    Public Function HoldsKey(ByRef ipKey As Variant) As Boolean
        Return Host.Exists(ipKey)
    End Function

    Public Function LacksKey(ByRef ipKey As Variant) As Boolean
        Return Not Me.Exists(ipKey)
    End Function
    
    ' current fails if only one of the items is an object
    Public Function HoldsItem(ByRef ipItem As Variant) As Boolean
        
        Dim myItem As Variant
        Dim myItems As Variant = Me.Items
        For Each myItem In myItems
            If VBA.IsObject(ipItem) And VBA.IsObject(myItem) Then
                If ObjPtr(ipItem) = ObjPtr(myItem) Then
                    Return True
               End If
            ElseIf VBA.IsObject(ipItem) Or VBA.IsObject(myItem) Then
                Return False
            Else
                If myItem = ipItem Then
                    Return True
                End If
            End If
        Next
        Return False
    End Function

    Public Function LacksItem(ByRef ipItem As Variant) As Boolean
        Dim myItem As Variant
        Dim myItems As Variant = Me.Items
        For Each myItem In myItems
            If VBA.IsObject(ipItem) And VBA.IsObject(myItem) Then
                If VarPtr(ipItem) = VarPtr(myItem) Then
                    Return False
               End If
            ElseIf (Not VBA.IsObject(ipItem)) And (Not VBA.IsObject(myItem)) Then
                If myItem = ipItem Then
                    Return False
                End If
            End If
        Next
        
        Return True
        
    End Function

    Public Function AddPairs(ByRef ipKeys As Variant, ByRef ipItems As Variant) As KvpH
        
        
        ' i.e. when ipKeys is a single item and a string it needs to be encapulated into an array
        ' to prevent iteritems iterating the string as a sequence of characters rather than a single string
        Dim myKeys As IterItems
        If ArrayInfo.IsNotArray(ipKeys) And TypeInfo.IsString(ipKeys) Then
        
            Set myKeys = IterItems(Array(ipKeys))
            
        Else
        	
            Set myKeys = IterItems(ipKeys)
            
        End If
        
        ' Same process for the Items collection
        Dim myItems As IterItems
        
        If ArrayInfo.IsNotArray(ipItems) And TypeInfo.IsString(ipItems) Then
            Set myItems = IterItems(Array(ipItems))
        Else
        	Set myItems = IterItems(ipItems)
            
        End If
        Do
             Add myKeys.Item(0), myItems.Item(0)
        Loop While myKeys.MoveNext And myItems.MoveNext
        
        Return Me
        
    End Function
    
    Public Function Clone() As KvpH
        Return KvpH.Deb.AddPairs(Me.Keys, Me.Items)
    End Function
    
    Friend Function AddKnownArrayPairs(ByRef ipKeysArray As Variant, ByRef ipItemsArray As Variant) As KvpH
    
        AddPairs ipKeysArray, ipItemsArray
        ' Dim myItemIndex As Long = LBound(ipItemsArray)
        ' Dim myKey As Variant
        ' For Each myKey In ipKeysArray
        
        '     If myItemIndex <= UBound(ipItemsArray) Then
            
        '         Add myKey, ipItemsArray(myItemIndex)
        '         myItemIndex += 1
                
        '     End If
            
        ' Next
        
        Return Me
        
    End Function

    ' is this a pointless function for a dicttionary. We should only ever need to reverse the keys when extracted as an array (after sorting?)
    Public Function Reverse() As KvpH
        Return KvpH.Deb.AddPairs(Me.KeysSeq.Reverse, Me.ItemsSeq.Reverse)
    End Function
    
    Public Function TypeName() As String
        Return MY_TYPENAME
    End Function
    
     Public Function MapIt(ByVal ipMapper As IMapper) As KvpH

        Dim myH As KvpH = KvpH.Deb
   
        'Dim myI As IterNum = IterNum(FirstIndex, LastIndex)
        Dim myI As IterItems = IterItems(Me)
        Do
            myH.Add myI.Key(0), ipMapper.ExecMapper(myI.Item(0))    '(s.Host(myI.Item))
        Loop While myI.MoveNext

         Return myH

    End Function
    
    
    Public Function FilterIt(ByVal ipComparer As IComparer) As KvpH

        Dim myH As KvpH = KvpH.Deb
        Dim myI As IterItems = IterItems(Me)
        Do
            If ipComparer.ExecCmp(myI.Item(0)) Then
                myH.Add myI.Key(0), myI.Item(0)
            End If
        Loop While myI.MoveNext
        
        Return myH
        
    End Function
    
    
    Public Function CountIt(ByVal ipComparer As IComparer) As Long
        
        Dim myCount As Long = 0
        Dim myI As IterItems = IterItems(Me)
        Do
       	    DoEvents
            If ipComparer.ExecCmp(myI.Item(0)) Then
                myCount += 1
            End If
        Loop While myI.MoveNext

        Return myCount

    End Function
    
    
    Public Function KeyOf(ByVal ipItem As Variant) As Variant
        Return KeyByIndex(ItemsSeq.IndexOf(ipItem) - 1)
    End Function
    
    
    Public Function ReduceIt(ByRef ipReducer As IReducer) As Variant
        Return ipReducer.ExecReduction(Host.Items)
    End Function


    Public Function KeysSeq() As Seq
        Return Seq.Deb(Host.Keys)
    End Function
    
    
    Public Function ItemsSeq() As Seq
        Return Seq.Deb(Host.Items)
    End Function
    
    
    Public Function PairsSeq() As Seq
        Return Seq.Deb(Host.Pairs)
    End Function
    
    
    
    Public Property Get FirstKey() As Variant
        If Count = 0 Then
             Err.Raise 17, "Lib.KvpH.FirstKey: Seq has no items"
        Else
            Dim myKey As Variant = KeyByIndex(0)
        	Return myKey
        End If
    End Property
    
    Public Property Get LastKey() As Variant
        If Count = 0 Then
            Err.Raise 17, "Lib.KvpH.LastKey: Seq has no items"
        Else
            Dim myKey As Variant = KeyByIndex(Host.Count - 1)
        	Return myKey
        End If
    End Property
    
    Public Property Get FirstItem() As Variant
        If Host.Count = 0 Then
            Err.Raise 17, "Lib.KvpH.FirstItem: Seq has no items"
        Else
            Dim myKey As Variant = KeyByIndex(0)
            Return Host.Item(myKey)
        End If
    End Property
    
    
    Public Property Set FirstItem(ByRef ipItem As Variant)
        
        If Host.Count = 0 Then
            Err.Raise 17, "Lib.KvpH.FirstItem: Seq has no items"
        Else
            Dim myKey As Variant = KeyByIndex(0)
        	Item(myKey) = ipItem
        End If
           
    End Property
    
    Public Property Let FirstItem(ByRef ipItem As Variant)
        
        If Host.Count = 0 Then
            Err.Raise 17, "Lib.KvpH.FirstItem: Seq has no items"
        Else
            Dim myKey As Variant = KeyByIndex(0)
        	Item(myKey) = ipItem
        End If
           
    End Property
    
    Public Property Get LastItem() As Variant
        If Host.Count = 0 Then
            Err.Raise 17, "Lib.KvpH.LastItem: Seq has no items"
        Else
            Dim myKey As Variant = Host.KeyByIndex(Host.Count - 1)
        	Return Host.Item(myKey)
        End If
    End Property
    
    Public Property Set LastItem(ByRef ipItem As Variant)
        
        If Host.Count = 0 Then
            Err.Raise 17, "Lib.KvpH.LastItem: Seq has no items"
        Else
            Dim myKey As Variant = KeyByIndex(Host.Count - 1)
        	Item(myKey) = ipItem
        End If
           
    End Property
    
    
    Public Property Let LastItem(ByRef ipItem As Variant)
        
        If Host.Count = 0 Then
            Err.Raise 17, "Lib.KvpH.LastItem: Seq has no items"
        Else
            Dim myKey As Variant = KeyByIndex(Host.Count - 1)
        	Item(myKey) = ipItem
        End If
           
    End Property
    
    
    Public Property Get FirstPair() As KVPair
        If Host.Count = 0 Then
            Err.Raise 17, "Lib.KvpH.FirstPair: Seq has no items"
        Else
            Return KVPair.Deb(FirstKey, FirstItem)
        End If
    End Property
    
    
    Public Property Get LastPair() As KVPair
        If Host.Count = 0 Then
            Err.Raise 17, "Lib.KvpH.LastPair: Seq has no items"
        Else
            Return KVPair.Deb(LastKey, LastItem)
        End If
    End Property
    
    '@Description( returns a Kvp with values as keys.  Each Value is linked to a Kvp of Key vs Index for the host value
    Public Function Mirror(Optional ByVal ipMirrorType As MirrorType = MirrorType.ByAllValues) As KvpH
        
        If ipMirrorType = MirrorType.ByAllValues Then
        
            Return MirrorByAllValues
        Else
    
            Return MirrorByFirstValue
    
        End If
        
    End Function
    
    
    ' Public Function Merge(ByRef ipInput As KvpH) As KvpH
    
    '     Dim myInputs As IterItems = IterItems(ipInput)
    '     Do
    '     	Dim myItem As Variant = myInputs(0)
    '         If HoldsKey(myInputs.Key) Then
            
    '             Item(myInputs.Key).add myItem
            
            
    '         Else
            	
    '             Add myInputs.Key, myItem
                
                
    '         End If
            
    '     Loop While myInputs.MoveNext
    
    ' End Function
    
    '@Description("Returns an KvpH of two KvpH.  Item(1) is an KvpH of the first found Host value vs Host Key. .Item(2) is a copy of the original KvpH with the first values removed (Host Key vs Host Value).")
    Private Function MirrorByAllValues() As KvpH
    
        Dim myKvpH As KvpH = KvpH.Deb
        
        Dim myIter As IterItems = IterItems(Host)
        
        Do
        
            If myKvpH.LacksKey(myIter(0)) Then
            
                myKvpH.Add myIter(0), KvpH.Deb
                
                
            End If
               
            myKvpH.Item(myIter.Item(0)).add myIter.Key(0), myIter.Index(0)
                
        Loop While myIter.MoveNext
        
        Return myKvpH

    End Function
    
    Private Function MirrorByFirstValue() As KvpH
    
        Const FirstValues As Long = 1
        Const OtherValues As Long = 2
        
        Dim myKvpH As KvpH = KvpH.Deb
        myKvpH.Add FirstValues, KvpH.Deb
        myKvpH.Add OtherValues, KvpH.Deb
        
        Dim myIter As IterItems = IterItems(Host)
        Do
            If myKvpH.Item(FirstValues).LacksKey(myIter.Item(0)) Then
            
                myKvpH.Item(FirstValues).add myIter.Item(0), myIter.Key(0)
                
                
            Else
            
                myKvpH.Item(OtherValues).add myIter.Key(0), myIter.Item(0)
                    
                    
            End If
            
        Loop While myIter.MoveNext
               
        Return myKvpH
        
    End Function
    
    '@Description("Returns an KvpH of Values vs Values count")
    Public Function Freq() As KvpH
        
        Dim myKvpH As KvpH = KvpH.Deb
        Dim myIter As IterItems = IterItems(Host)
        Do
        	If myKvpH.HoldsKey(myIter.Item(0)) Then
                myKvpH.Item(myIter.Item(0)) += 1
            Else
            	myKvpH.Add myIter.Item(0), 1
            End If
        Loop While myIter.MoveNext
        
        Return myKvpH
        
    End Function
    
    
    '==============================
    Public Function Set(ByVal ipSet As SetOf, ByRef ipRHS As KvpH) As KvpH
    
    	    ' Dim myLHS As Seq = Seq.Deb(ipLHS)
            ' Dim myRHS As Seq = Seq.Deb(ipRHS)
            
            Select Case ipSet
            
                Case SetOf.InBoth:              Return Both(Me, ipRHS)
                Case SetOf.InHostOnly:          Return LHSOnly(Me, ipRHS)
                Case SetOf.InParamOnly:         Return LHSOnly(ipRHS, Me) ' note reversal of params
                Case SetOf.NotInBoth:           Return NotBoth(Me, ipRHS)
                Case SetOf.Unique:              Return CombineUnique(Me, ipRHS)
                
            End Select
            
    End Function
    
   
    Private Function LHSOnly(ByRef ipLHS As KvpH, ByRef ipRHS As KvpH) As KvpH

        Dim myResult As KvpH = KvpH.Deb
        Dim myH As IterItems = IterItems(ipLHS)
        Do
            If ipRHS.LacksKey(myH.Key(0)) And myResult.LacksKey(myH.Key(0)) Then
                myResult.Add myH.Key(0), myH.Item(0)
            End If
            
        Loop While myH.MoveNext
        
        Return myResult
        
    End Function

    Private Function Both(ByRef ipLHS As KvpH, ByRef ipRHS As KvpH) As KvpH

        Dim myResult As KvpH = KvpH.Deb
        Dim myLHS As IterItems = IterItems(ipLHS)
        Do
            If ipRHS.HoldsKey(myLHS.Key(0)) Then
                myResult.Add myLHS.Key(0), myLHS.Item(0)
            End If
        Loop While myLHS.MoveNext

        Return myResult
        
    End Function


    Private Function NotBoth(ByRef ipLHS As KvpH, ByRef ipRHS As KvpH) As KvpH

        'Return KvpH.Deb(Me.LHSOnly(ipLHS, ipRHS)).MergeUnique(LHSOnly(ipRHS, ipLHS)) ' note the reversal of the parameters
            Dim myResult As KvpH = KvpH.Deb
            If ipLHS.Count > 0 Then
                Dim myLHS As IterItems = IterItems(ipLHS)
                Do
                    
                    If ipRHS.LacksKey(myLHS.Key(0)) Then
                        myResult.Add myLHS.Key(0), myLHS.Item(0)
                    End If
                Loop While myLHS.MoveNext
            End If
            If ipRHS.Count > 0 Then
                Dim myRHS As IterItems = IterItems(ipRHS)
                Do
                    If ipLHS.LacksKey(myRHS.Key(0)) Then
                        myResult.Add myRHS.Key(0), myRHS.Item(0)
                    End If
                Loop While myRHS.MoveNext
            End If
    End Function

    Private Function CombineUnique(ByRef ipLHS As KvpH, ByRef ipRHS As KvpH) As KvpH
        Dim myResult As KvpH = KvpH.Deb
        Dim myI As IterItems = IterItems(ipRHS)
        Do
        	DoEvents
            If myResult.Count = 0 Then
            	myResult.Add myI.Key(0), myI.Item(0)
            ElseIf myResult.LacksKey(myI.Key(0)) Then
                myResult.Add myI.Key(0), myI.Item(0)
            End If
        Loop While myI.MoveNext
        Return myResult
    End Function
    
    Public Function MergeUnique(ByRef ipRHS As KvpH) As KvpH
        
        If ipRHS.Count = 0 Then
            Return Me
        End If
        
        Dim myI As IterItems = IterItems(ipRHS)
        Do
        	DoEvents
            If Me.Count = 0 Then
            	Me.Add myI.Key(0), myI.Item(0)
            ElseIf Me.LacksKey(myI.Key(0)) Then
                Me.Add myI.Key(0), myI.Item(0)
            End If
        Loop While myI.MoveNext
        Return Me
    End Function
    
End Class
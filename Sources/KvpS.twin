Class KvpS

	Attribute VB_GlobalNameSpace = False
    Attribute VB_Creatable = True
    Attribute VB_PredeclaredId = True
    Attribute VB_Exposed = True
    Option Explicit
    '@Description("Copy of KvpH but based on Scripting.Dictionary")
    
    Private Const MY_TYPENAME                       As String = "KvpS"
    
    
    Implements Scripting.Dictionary Via Host
  

    Private CurrentIndex As Long
    Private Const MinValue As Long = 65
    Private Const MaxValue As Long = 123
    Private Const E_INVALIDARGS As Long = &H80070057
    Private Const S_OK As Long = 0
    Private Const S_FALSE As Long = 1
    
    ' move this enum to interface
    ' Public Enum MirrorType
    
    '     ByAllValues = 0                 ' Returns a Kvp of Kvp where the Outer Kvp has the Host Values as Keys, and the InnerKvp are Host Keys vs Index 
    '     ByFirstValue = 0                ' Returns an Kvp of two Kvp.  Kvp(1) is first found Host Value vs Key, the second is Host Key vs subsequent found host values
        
    ' End Enum
    
    ' Private Sub New()
    '     Set Host = cHashD2.Deb
    ' End Sub

    Public Function Deb() As KvpS
        With New KvpS
            Return .ConstructInstance
        End With
    End Function

    Friend Function ConstructInstance() As KvpS
        Set Host = New Scripting.Dictionary
        Return Me
    End Function

    ' Public Function ReInit(Optional ByVal ExpectedMaxCount As Long, Optional ByVal EnsureUniqueKeys As Boolean) As KvpS
    '     Return Host.ReInit(ExpectedMaxCount, EnsureUniqueKeys)
    ' End Function
    Public Function HoldsKey(ByRef ipKey As Variant) As Boolean
        Return Host.Exists(ipKey)
    End Function

    Public Function LacksKey(ByRef ipKey As Variant) As Boolean
        Return Not Me.Exists(ipKey)
    End Function
    
    ' current fails if only one of the items is an object
    Public Function HoldsItem(ByRef ipItem As Variant) As Boolean
        
        Dim myItem As Variant
        Dim myItems As Variant = Me.Items
        For Each myItem In myItems
            If VBA.IsObject(ipItem) And VBA.IsObject(myItem) Then
                If ObjPtr(ipItem) = ObjPtr(myItem) Then
                    Return True
               End If
            ElseIf VBA.IsObject(ipItem) Or VBA.IsObject(myItem) Then
                Return False
            Else
                If myItem = ipItem Then
                    Return True
                End If
            End If
        Next
        Return False
    End Function

    Public Function LacksItem(ByRef ipItem As Variant) As Boolean
        Dim myItem As Variant
        Dim myItems As Variant = Me.Items
        For Each myItem In myItems
            If VBA.IsObject(ipItem) And VBA.IsObject(myItem) Then
                If VarPtr(ipItem) = VarPtr(myItem) Then
                    Return False
               End If
            ElseIf (Not VBA.IsObject(ipItem)) And (Not VBA.IsObject(myItem)) Then
                If myItem = ipItem Then
                    Return False
                End If
            End If
        Next
        
        Return True
        
    End Function

    Public Function AddPairs(ByRef ipKeys As Variant, ByRef ipItems As Variant) As KvpS
        
        
        ' i.e. when ipKeys is a single item and a string it needs to be encapulated into an array
        ' to prevent iteritems iterating the string as a sequence of characters rather than a single string
        Dim myKeys As IterItems
        If ArrayInfo.IsNotArray(ipKeys) And TypeInfo.IsString(ipKeys) Then
        
            Set myKeys = IterItems(Array(ipKeys))
            
        Else
        	
            Set myKeys = IterItems(ipKeys)
            
        End If
        
        ' Same process for the Items collection
        Dim myItems As IterItems
        
        If ArrayInfo.IsNotArray(ipItems) And TypeInfo.IsString(ipItems) Then
            Set myItems = IterItems(Array(ipItems))
        Else
        	Set myItems = IterItems(ipItems)
            
        End If
        Do
             Add myKeys.Item(0), myItems.Item(0)
        Loop While myKeys.MoveNext And myItems.MoveNext
        
        Return Me
        
    End Function
    
    '@|desciption("Removes all key value pairs from the instance")
    Public Sub Clear()
        Host.RemoveAll
    End Sub
    
    Public Function Clone() As KvpS
        Return KvpS.Deb.AddPairs(Me.Keys, Me.Items)
    End Function
    
    Friend Function AddKnownArrayPairs(ByRef ipKeysArray As Variant, ByRef ipItemsArray As Variant) As KvpS
    
        AddPairs ipKeysArray, ipItemsArray
        ' Dim myItemIndex As Long = LBound(ipItemsArray)
        ' Dim myKey As Variant
        ' For Each myKey In ipKeysArray
        
        '     If myItemIndex <= UBound(ipItemsArray) Then
            
        '         Add myKey, ipItemsArray(myItemIndex)
        '         myItemIndex += 1
                
        '     End If
            
        ' Next
        
        Return Me
        
    End Function

    Public Sub RemoveByIndex(ByVal ipIndex As Long)
        Remove KeyByIndex(ipIndex)
    End Sub
    
    ' ' is this a pointless function for a dicttionary. We should only ever need to reverse the keys when extracted as an array (after sorting?)
    ' Public Function Reverse() As KvpS
    '     Return KvpS.Deb.AddPairs(Me.KeysSeq.Reverse, Me.Items.Reverse)
    ' End Function
    
    Public Function TypeName() As String
        Return MY_TYPENAME
    End Function
    
     Public Function MapIt(ByVal ipMapper As IMapper) As KvpS

        Dim myH As KvpS = KvpS.Deb
   
        'Dim myI As IterNum = IterNum(FirstIndex, LastIndex)
        Dim myI As IterItems = IterItems(Me)
        Do
            myH.Add myI.Key(0), ipMapper.ExecMapper(myI.Item(0))    '(s.Host(myI.Item))
        Loop While myI.MoveNext

         Return myH

    End Function
    
    
    Public Function FilterIt(ByVal ipComparer As IComparer) As KvpS

        Dim myH As KvpS = KvpS.Deb
        Dim myI As IterItems = IterItems(Me)
        Do
            If ipComparer.ExecCmp(myI.Item(0)) Then
                myH.Add myI.Key(0), myI.Item(0)
            End If
        Loop While myI.MoveNext
        
        Return myH
        
    End Function
    
    
    Public Function CountIt(ByVal ipComparer As IComparer) As Long
        
        Dim myCount As Long = 0
        Dim myI As IterItems = IterItems(Me)
        Do
       	    DoEvents
            If ipComparer.ExecCmp(myI.Item(0)) Then
                myCount += 1
            End If
        Loop While myI.MoveNext

        Return myCount

    End Function
    
    Public Function KeyByIndex(ByVal ipIndex As Long) As Variant
        Return Host.Keys(ipIndex)
    End Function
    
    Public Function KeyOf(ByVal ipItem As Variant) As Variant
        Return KeyByIndex(Items.IndexOf(ipItem) - 1)
    End Function
    
    
    Public Function ReduceIt(ByRef ipReducer As IReducer) As Variant
        Return ipReducer.ExecReduction(Host.Items)
    End Function


    Public Function KeysSeq() As Seq
        Return Seq.Deb(Host.Keys)
    End Function
    
    Public Function IndexByKey(ipKey As Variant) As Long
    
        Dim myIndex As Long
        Dim myKey As Variant
        For Each myKey In Host.Keys
            If myKey = ipKey Then
                Return myIndex
            End If
            myIndex += 1
            
        Next
        
        Return -1
        
    End Function
    
    
    Public Property Get ItemByIndex(ByVal ipIndex As Long) As Variant
        Return Host.Items(ipIndex)
    End Property


    Public Property Let ItemByIndex(ByVal ipIndex As Long, RHS As Variant)
    
        Dim myKey As Variant = Host.Keys(ipIndex)
        'Assign Host.Item(myKey), RHS
        If VBA.IsObject(RHS) Then
            Set Host.Item(myKey) = RHS
        Else
        	    Host.Item(myKey) = RHS
        End If
        
    End Property


    Public Property Set ItemByIndex(ByVal ipIndex As Long, RHS As Variant)
    
        Dim myKey As Variant = Host.Keys(ipIndex)
        'Assign Host.Item(myKey), RHS
        If VBA.IsObject(RHS) Then
            Set Host.Item(myKey) = RHS
        Else
        	    Host.Item(myKey) = RHS
        End If
        
    End Property
    
    
    Public Function Items(Optional ByVal ipSeqType As st__SeqType = st_seq) As Variant
    
        Dim myItem As Variant
        Select Case ipSeqType
        
            Case st_Array:          Return Host.Items
                
            Case st_Seq:            Return Seq.Deb(Items)
                
            Case st_Collection:     
                
                Dim myC As Collection = New Collection
                
                For Each myItem In Items
                	myC.Add myItem
                Next
                
                Return myC
                
            Case st_wCollection:  Return wCollection.Deb(Items)
                
    
            Case Else
                Err.Raise 17 + vbObjectError, _
                    "twLib.KvpC.Items", _
                    "Unexpected ipSeqType"
        End Select
       
    End Function
    
    
    Public Function Pairs(Optional ByVal ipSeqType As st__SeqType = st_seq) As Variant
    
        Dim mySeq As Seq = Seq.Deb
        
        Dim myKey As Variant
        For Each myKey In Host
            mySeq.Add Array(myKey, Host.Item(myKey))
        Next
        
        Select Case ipSeqType
        
            Case st_Array:          Return mySeq.ToArray
                
            Case st_Seq:            Return mySeq
                
            Case st_Collection:     Return mySeq.ToCollection
                
            Case st_wCollection:    Return wCollection.Deb(mySeq)
                
    
            Case Else
                Err.Raise 17 + vbObjectError, _
                    "twLib.KvpC.Items", _
                    "Unexpected ipSeqType"
        End Select
    End Function
    
    
    
    Public Property Get FirstKey() As Variant
        If Count = 0 Then
             Err.Raise 17, "Lib.KvpS.FirstKey: Seq has no items"
        Else
            Dim myKey As Variant = KeyByIndex(0)
        	Return myKey
        End If
    End Property
    
    Public Property Get LastKey() As Variant
        If Count = 0 Then
            Err.Raise 17, "Lib.KvpS.LastKey: Seq has no items"
        Else
            Dim myKey As Variant = KeyByIndex(Host.Count - 1)
        	Return myKey
        End If
    End Property
    
    Public Property Get FirstItem() As Variant
        If Host.Count = 0 Then
            Err.Raise 17, "Lib.KvpS.FirstItem: Seq has no items"
        Else
            Dim myKey As Variant = KeyByIndex(0)
            Return Host.Item(myKey)
        End If
    End Property
    
    
    Public Property Set FirstItem(ByRef ipItem As Variant)
        
        If Host.Count = 0 Then
            Err.Raise 17, "Lib.KvpS.FirstItem: Seq has no items"
        Else
            Dim myKey As Variant = KeyByIndex(0)
        	Item(myKey) = ipItem
        End If
           
    End Property
    
    Public Property Let FirstItem(ByRef ipItem As Variant)
        
        If Host.Count = 0 Then
            Err.Raise 17, "Lib.KvpS.FirstItem: Seq has no items"
        Else
            Dim myKey As Variant = KeyByIndex(0)
        	Item(myKey) = ipItem
        End If
           
    End Property
    
    Public Property Get LastItem() As Variant
        If Host.Count = 0 Then
            Err.Raise 17, "Lib.KvpS.LastItem: Seq has no items"
        Else
            Dim myKey As Variant = Host.KeyByIndex(Host.Count - 1)
        	Return Host.Item(myKey)
        End If
    End Property
    
    Public Property Set LastItem(ByRef ipItem As Variant)
        
        If Host.Count = 0 Then
            Err.Raise 17, "Lib.KvpS.LastItem: Seq has no items"
        Else
            Dim myKey As Variant = KeyByIndex(Host.Count - 1)
        	Item(myKey) = ipItem
        End If
           
    End Property
    
    
    Public Property Let LastItem(ByRef ipItem As Variant)
        
        If Host.Count = 0 Then
            Err.Raise 17, "Lib.KvpS.LastItem: Seq has no items"
        Else
            Dim myKey As Variant = KeyByIndex(Host.Count - 1)
        	Item(myKey) = ipItem
        End If
           
    End Property
    
    
    Public Property Get FirstPair() As KVPair
        If Host.Count = 0 Then
            Err.Raise 17, "Lib.KvpS.FirstPair: Seq has no items"
        Else
            Return KVPair.Deb(FirstKey, FirstItem)
        End If
    End Property
    
    
    Public Property Get LastPair() As KVPair
        If Host.Count = 0 Then
            Err.Raise 17, "Lib.KvpS.LastPair: Seq has no items"
        Else
            Return KVPair.Deb(LastKey, LastItem)
        End If
    End Property
    
    
    '@Description( returns a Kvp with values as keys.  Each Value is linked to a Kvp of Key vs Index for the host value
    Public Function Mirror(Optional ByVal ipMirrorType As mt__MirrorType = mt__MirrorType.mt_ByAllValues) As KvpS
        
        If Count = 0 Then
            Return Me
        End If
        
        Select Case ipMirrorType
        
            Case mt_ByAllValues: Return MirrorByAllValues
            Case Return mt_ByFirstValue: Return MirrorByFirstValue
    
            Case Else
                Err.Raise 17 + vbObjectError, _ 
                    "twLib.KvpH.Mirror", _
                    "Mirror type not known"
        End Select
        
    End Function
    
    
    '@Description("Returns an KvpS of two KvpS.  Item(1) is an KvpS of the first found Host value vs Host Key. .Item(2) is a copy of the original KvpS with the first values removed (Host Key vs Host Value).")
    Private Function MirrorByAllValues() As KvpS
    
        Dim myKvpS As KvpS = KvpS.Deb
        
        Dim myIter As IterItems = IterItems(Host)
        
        Do
        
            If myKvpS.LacksKey(myIter(0)) Then
            
                myKvpS.Add myIter(0), KvpS.Deb
                
                
            End If
               
            myKvpS.Item(myIter.Item(0)).add myIter.Key(0), myIter.Index(0)
                
        Loop While myIter.MoveNext
        
        Return myKvpS

    End Function
    
    Private Function MirrorByFirstValue() As KvpS
    
        Const FirstValues As Long = 1
        Const OtherValues As Long = 2
        
        Dim myKvpS As KvpS = KvpS.Deb
        myKvpS.Add FirstValues, KvpS.Deb
        myKvpS.Add OtherValues, KvpS.Deb
        
        Dim myIter As IterItems = IterItems(Host)
        Do
            If myKvpS.Item(FirstValues).LacksKey(myIter.Item(0)) Then
            
                myKvpS.Item(FirstValues).add myIter.Item(0), myIter.Key(0)
                
                
            Else
            
                myKvpS.Item(OtherValues).add myIter.Key(0), myIter.Item(0)
                    
                    
            End If
            
        Loop While myIter.MoveNext
               
        Return myKvpS
        
    End Function
    
    ' '@Description("Returns an KvpS of Values vs Values count")
    ' Public Function Freq() As KvpS
        
    '     Dim myKvpS As KvpS = KvpS.Deb
    '     Dim myIter As IterItems = IterItems(Host)
    '     Do
    '     	If myKvpS.HoldsKey(myIter.Item(0)) Then
    '             myKvpS.Item(myIter.Item(0)) += 1
    '         Else
    '         	myKvpS.Add myIter.Item(0), 1
    '         End If
    '     Loop While myIter.MoveNext
        
    '     Return myKvpS
        
    ' End Function
    
    
    '==============================
    Public Function Set(ByVal ipSet As SetOf, ByRef ipRHS As KvpS) As KvpS
    
    	    ' Dim myLHS As Seq = Seq.Deb(ipLHS)
            ' Dim myRHS As Seq = Seq.Deb(ipRHS)
            
            Select Case ipSet
            
                Case SetOf.InBoth:              Return Both(Me, ipRHS)
                Case SetOf.InHostOnly:          Return LHSOnly(Me, ipRHS)
                Case SetOf.InParamOnly:         Return LHSOnly(ipRHS, Me) ' note reversal of params
                Case SetOf.NotInBoth:           Return NotBoth(Me, ipRHS)
                Case SetOf.Unique:              Return CombineUnique(Me, ipRHS)
                
            End Select
            
    End Function
    
   
    Private Function LHSOnly(ByRef ipLHS As KvpS, ByRef ipRHS As KvpS) As KvpS

        Dim myResult As KvpS = KvpS.Deb
        Dim myH As IterItems = IterItems(ipLHS)
        Do
            If ipRHS.LacksKey(myH.Key(0)) And myResult.LacksKey(myH.Key(0)) Then
                myResult.Add myH.Key(0), myH.Item(0)
            End If
            
        Loop While myH.MoveNext
        
        Return myResult
        
    End Function

    Private Function Both(ByRef ipLHS As KvpS, ByRef ipRHS As KvpS) As KvpS

        Dim myResult As KvpS = KvpS.Deb
        Dim myLHS As IterItems = IterItems(ipLHS)
        Do
            If ipRHS.HoldsKey(myLHS.Key(0)) Then
                myResult.Add myLHS.Key(0), myLHS.Item(0)
            End If
        Loop While myLHS.MoveNext

        Return myResult
        
    End Function


    Private Function NotBoth(ByRef ipLHS As KvpS, ByRef ipRHS As KvpS) As KvpS

        'Return KvpS.Deb(Me.LHSOnly(ipLHS, ipRHS)).MergeUnique(LHSOnly(ipRHS, ipLHS)) ' note the reversal of the parameters
            Dim myResult As KvpS = KvpS.Deb
            If ipLHS.Count > 0 Then
                Dim myLHS As IterItems = IterItems(ipLHS)
                Do
                    
                    If ipRHS.LacksKey(myLHS.Key(0)) Then
                        myResult.Add myLHS.Key(0), myLHS.Item(0)
                    End If
                Loop While myLHS.MoveNext
            End If
            If ipRHS.Count > 0 Then
                Dim myRHS As IterItems = IterItems(ipRHS)
                Do
                    If ipLHS.LacksKey(myRHS.Key(0)) Then
                        myResult.Add myRHS.Key(0), myRHS.Item(0)
                    End If
                Loop While myRHS.MoveNext
            End If
    End Function

    Private Function CombineUnique(ByRef ipLHS As KvpS, ByRef ipRHS As KvpS) As KvpS
        Dim myResult As KvpS = KvpS.Deb
        Dim myI As IterItems = IterItems(ipRHS)
        Do
            If myResult.Count = 0 Then
            	myResult.Add myI.Key(0), myI.Item(0)
            ElseIf myResult.LacksKey(myI.Key(0)) Then
                myResult.Add myI.Key(0), myI.Item(0)
            End If
        Loop While myI.MoveNext
        Return myResult
    End Function
    
    ' Public Function MergeUnique(ByRef ipRHS As KvpS) As KvpS
        
    '     If ipRHS.Count = 0 Then
    '         Return Me
    '     End If
        
    '     Dim myI As IterItems = IterItems(ipRHS)
    '     Do
    '     	DoEvents
    '         If Me.Count = 0 Then
    '         	Me.Add myI.Key(0), myI.Item(0)
    '         ElseIf Me.LacksKey(myI.Key(0)) Then
    '             Me.Add myI.Key(0), myI.Item(0)
    '         End If
    '     Loop While myI.MoveNext
    '     Return Me
    ' End Function

End Class
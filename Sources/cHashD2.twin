Class cHashD2

'========1=========2=========3=========4=========5=========6=========7=========8=========9=========A=========B=========C
    Attribute VB_Creatable = True
    Attribute VB_PredeclaredId = False
    Attribute VB_Exposed = True
    
    Option Explicit
    '@Description("Attempt as refactring cHashD by Olaf Schmidt into easier to read twinBasic)
    
    ' a feature of chasd is that it can cope with duplicate keys, we have to specifically ask for unique keys if
    ' a true dictionary is required.

    ' Start: Unsafe
    Private Type SAFEARRAY1D
        cDims                                   As Integer
        fFeatures                               As Integer
        cbElements                              As Long
        cLocks                                  As Long
        pvData                                  As Long
        cElements1D                             As Long
        lLbound1D                               As Long
    End Type
    
    Private Declare Sub BindArray Lib "kernel32" Alias "RtlMoveMemory" (PArr() As Any, pSrc&, Optional ByVal CB& = 4)
    Private Declare Sub ReleaseArray Lib "kernel32" Alias "RtlMoveMemory" (PArr() As Any, Optional pSrc& = 0, Optional ByVal CB& = 4)

    Private Declare Function VariantCopy Lib "oleaut32" (Dst As Any, Src As Any) As Long
    Private Declare Function VariantCopyInd Lib "oleaut32" (Dst As Any, Src As Any) As Long
    ' End: Unsafe
    

    Private Const NoEntry                       As Variant = Empty
    Private Const DynTakeOver                   As Long = 4         ' fixed HashSlot-amount
    Private Const HMul                          As Long = 3727      ' And Hash - Multiplikator

    Private Type HashTableEntry
        Count                                   As Long
        DataIdxsStat(0 To DynTakeOver - 1)      As Long
        DataIdxsDyn()                           As Long
    End Type
    
    Private Type State
        W()                                     As Integer
        saW                                     As SAFEARRAY1D
        LastExpectedMaxCount                    As Long
        EnsureUniqueKeys                        As Boolean
        LastH                                   As Long
        Count                                   As Long
        DTUB                                    As Long
        HashTableSize                           As Long
        CompareMethod                           As VbCompareMethod
        HashTable()                             As HashTableEntry
        Keys()                                  As variant
        Values()                                As variant  'both pairing-arrays are of type Variant
        FIndexes()                              As Long
        FCount                                  As Long
        FUB                                     As Long 'three vars, to handle the deletes

    End Type

    Private s                                   As state
 
    Private Sub Class_Initialize()
    
        With s.saW
            .cDims = 1
            .cbElements = 2
            .cLocks = 1
            .fFeatures = &H11                                          'FADF_AUTO=&H1 || FADF_FIXEDSIZE=&H10
        End With
        
        BindArray s.W, VBA.VarPtr(s.saW)
    
        s.CompareMethod = vbBinaryCompare
        'at startup we set it up, to behave ideally for up to 16384 Items with unique keys
        ' this means that the cHashD/Hkvp classes have a big memory footprint
        ReInit 16384
        
        If LWC(97) = 0 Then
            InitLWC
        End If
   
    End Sub

    Public Sub ReInit(Optional ByVal ipExpectedMaxCount As Long, Optional ByVal ipEnsureUniqueKeys As Boolean)
    	
        If ipExpectedMaxCount <= 0 Then
            ipExpectedMaxCount = s.LastExpectedMaxCount
        End If
        
        If ipExpectedMaxCount < 128 Then
            ipExpectedMaxCount = 128
        End If
        
        s.LastExpectedMaxCount = ipExpectedMaxCount
        s.EnsureUniqueKeys = ipEnsureUniqueKeys
        
        s.HashTableSize = 16
        Do Until s.HashTableSize * 2 > ipExpectedMaxCount
            s.HashTableSize = s.HashTableSize * 2
        Loop
        
        If s.HashTableSize > 524288 Then
            s.HashTableSize = 524288
        End If
        
        ReDim s.HashTable(0 To s.HashTableSize - 1)
        
        s.DTUB = s.LastExpectedMaxCount
        ReDim s.Keys(0 To s.DTUB)
        ReDim s.Values(0 To s.DTUB)
        s.Count = 0
        s.FCount = 0
        s.FUB = 16
        ReDim s.FIndexes(0 To s.FUB)
        
    End Sub


    Public Sub Clear()
        ReInit
    End Sub


    Public Property Get Count() As Long
        Return s.Count
    End Property


    Public Property Get HasUniqueKeys() As Boolean
        Return s.EnsureUniqueKeys
    End Property


    Public Property Get StringCompareMethod() As VbCompareMethod
        Return s.CompareMethod
    End Property

    Public Property Let StringCompareMode(ByVal ipCOmpareMethod As VbCompareMethod)
        s.CompareMethod = ipCOmpareMethod
    End Property
    
    Public Function Keys() As Variant()
        If s.Count = 0 Then
            Return Array()
        End If
        
        Dim i As Long = 0
        Dim j As Long = 0
        Dim jUbound As Long = UBound(s.Keys)
        Dim V() As Variant:
        ' s.count is the number of items that have been added to the dictionary
        ReDim V(0 To s.Count - 1)
    
        ' revised from original cHashD to ensure that j 
        ' cannot exceed the ubound of s.keys
        For i = 0 To s.Count - 1
        
            Do
                If j > jUbound Then
                    Exit For
                End If
            
                If VBA.IsEmpty(s.Keys(j)) Then
                    j += 1
                Else
                    VariantCopy V(i), ByVal VBA.VarPtr(s.Keys(j))
                    j += 1
                	Exit Do
                End If
                
            Loop
        
        Next
        
        Return V
        
    End Function


    Public Function Items() As Variant()
    
        If s.Count = 0 Then
            Return Array()
        End If
        
        Dim i As Long
        Dim j As Long
        Dim jUbound As Long = UBound(s.Keys)
        Dim V() As Variant:
        ReDim V(0 To s.Count - 1)
    
        ' revised from original cHashD to ensure that j 
        ' cannot exceed the ubound of s.values
        For i = 0 To s.Count - 1
        
            Do
                If j > jUbound Then
                    Exit For
                End If
            
                If VBA.IsEmpty(s.Keys(j)) Then
                    j += 1
                Else
                    VariantCopy V(i), ByVal VBA.VarPtr(s.Values(j))
                    j += 1
                	Exit Do
                End If
                
            Loop
        
        Next
        
        Return V
    End Function

    Public Function Pairs() As Variant() 'hand-out the Key-Values in a Pairs-Array
    
        If s.Count = 0 Then
            Return Array()
        End If
        
        Dim i As Long
        Dim j As Long
        Dim jUbound As Long = UBound(s.Keys)
        Dim V() As Variant:
        ReDim V(0 To s.Count - 1)
    
        ' revised from original cHashD to ensure that j 
        ' cannot exceed the ubound of s.keys
        For i = 0 To s.Count - 1
        
            Do
                If j > jUbound Then
                    Exit For
                End If
            
                If VBA.IsEmpty(s.Keys(j)) Then
                    j += 1
                Else
                    V(i) = Array(s.Keys(j), s.Values(j))
                    j += 1
                	Exit Do
                End If
                
            Loop
        
        Next
        
        Return V
        
    End Function
    
    
    
    Public Function Exists(Key As Variant) As Boolean
        Return FindIndex(Key) >= 0
    End Function

    Public Sub Add(Key As Variant, Item As Variant)
    
        Dim H As Long
        Dim UB As Long
        Dim i As Long
        
        If s.LastH Then
            H = s.LastH
            s.LastH = 0
        ElseIf s.EnsureUniqueKeys Then
            If FindIndex(Key, H) >= 0 Then
                Err.Raise 457
            End If
        Else
            H = -1
            FindIndex Key, H                                                            'a Value of -1 for H will skip the Index-Search, returning only H
        End If
        
        'add the new Pair, prolonging the Keys- and Values-arrays
        If s.DTUB < s.Count Then
            s.DTUB = (s.DTUB + 16) * 1.3
            ReDim Preserve s.Keys(0 To s.DTUB)
            ReDim Preserve s.Values(0 To s.DTUB)
        End If
        
        If s.FCount > 0 Then
            s.FCount = s.FCount - 1
            i = s.FIndexes(s.FCount)
        Else
            i = s.Count
        End If
        
        VariantCopyInd ByVal VBA.VarPtr(s.Values(i)), ByVal VBA.VarPtr(Item)
        VariantCopyInd ByVal VBA.VarPtr(s.Keys(i)), ByVal VBA.VarPtr(Key)
        
        'add the new DataIndex to the proper Hash-Buckets
        Select Case s.HashTable(H).Count
            Case Is < DynTakeOver
                s.HashTable(H).DataIdxsStat(s.HashTable(H).Count) = i
                
            Case DynTakeOver
                ReDim Preserve s.HashTable(H).DataIdxsDyn(DynTakeOver To DynTakeOver + 3)
                s.HashTable(H).DataIdxsDyn(DynTakeOver) = i
                
            Case Else
                UB = UBound(s.HashTable(H).DataIdxsDyn)
                If UB < s.HashTable(H).Count Then
                    UB = (UB + 3) * 1.3
                    ReDim Preserve s.HashTable(H).DataIdxsDyn(DynTakeOver To UB)
                End If
                s.HashTable(H).DataIdxsDyn(s.HashTable(H).Count) = i
                
        End Select
        
        s.HashTable(H).Count = s.HashTable(H).Count + 1
        
        s.Count += 1
        
    End Sub

    Public Sub Remove(Key As Variant)
    
        If s.Count = 0 Then
            Exit Sub
        End If
        
        Dim H As Long
        Dim Idx As Long
        Dim i As Long
        Dim j As Long
        
        Idx = FindIndex(Key, H)
        If Idx < 0 Then
            Err.Raise 5
        End If
        
        For i = 0 To s.HashTable(H).Count - 2
            If i < DynTakeOver Then
                If j = 0 Then
                    If s.HashTable(H).DataIdxsStat(i) = Idx Then
                        j = i + 1
                    End If
                End If
                If j Then
                    If j < DynTakeOver Then
                        s.HashTable(H).DataIdxsStat(i) = s.HashTable(H).DataIdxsStat(j)
                        j += 1
                    Else
                        s.HashTable(H).DataIdxsStat(i) = s.HashTable(H).DataIdxsDyn(j)
                        j += 1
                    End If
                End If
            Else
                If j = 0 Then
                    If s.HashTable(H).DataIdxsDyn(i) = Idx Then
                        j = i + 1
                    End If
                End If
                If j Then
                    s.HashTable(H).DataIdxsDyn(i) = s.HashTable(H).DataIdxsDyn(j)
                    j += 1
                End If
            End If
        Next
        s.HashTable(H).Count = i
        
        If s.FUB < s.FCount Then
            s.FUB = s.FUB + s.FUB
            ReDim Preserve s.FIndexes(0 To s.FUB)
        End If
        s.FIndexes(s.FCount) = Idx
        s.FCount = s.FCount + 1
        
        s.Keys(Idx) = NoEntry
        s.Values(Idx) = NoEntry
        s.Count -= 1
        
    End Sub

    Public Sub RemoveByIndex(ByVal IndexZeroBased As Long)
        Remove KeyByIndex(IndexZeroBased)
    End Sub

    Public Function IndexByKey(Key As Variant) As Long
    
        Dim Idx As Long = FindIndex(Key)
        
        If Idx >= 0 And s.FCount > 0 Then
            AdjustIndex Idx, True
        End If
        
        Return Idx
        
    End Function


    Public Property Get KeyByIndex(ByVal ipIndexZeroBased As Long) As Variant
    
        If ipIndexZeroBased < 0 Or ipIndexZeroBased >= s.Count Then
            Err.Raise 9
        End If
        
        If s.FCount Then
            AdjustIndex ipIndexZeroBased
        End If
        
        VariantCopy KeyByIndex, ByVal VarPtr(s.Keys(ipIndexZeroBased))
        
    End Property


    Public Property Get ItemByIndex(ByVal ipIndexZeroBased As Long) As Variant
    
        If ipIndexZeroBased < 0 Or ipIndexZeroBased >= s.Count Then
            Err.Raise 9
        End If
        
        If s.FCount Then
            AdjustIndex ipIndexZeroBased
        End If
        
        VariantCopy ItemByIndex, ByVal VarPtr(s.Values(ipIndexZeroBased))
        
    End Property


    Public Property Let ItemByIndex(ByVal ipIndexZeroBased As Long, RHS As Variant)
    
        If ipIndexZeroBased < 0 Or ipIndexZeroBased >= s.Count Then
            Err.Raise 9
        End If
        
        If s.FCount Then
            AdjustIndex ipIndexZeroBased
        End If
        
        VariantCopyInd ByVal VarPtr(s.Values(ipIndexZeroBased)), ByVal VarPtr(RHS)
        
    End Property


    Public Property Set ItemByIndex(ByVal ipIndexZeroBased As Long, RHS As Variant)
    
        If ipIndexZeroBased < 0 Or ipIndexZeroBased >= s.Count Then
            Err.Raise 9
        End If
        
        If s.FCount Then
            AdjustIndex ipIndexZeroBased
        End If
        
        VariantCopyInd ByVal VarPtr(s.Values(ipIndexZeroBased)), ByVal VarPtr(RHS)
        
    End Property


    [ DefaultMember ]
    Public Property Get Item(Key As Variant) As Variant
        
        Dim Index As Long = FindIndex(Key)
        
        If Index >= 0 Then
            VariantCopy Item, ByVal VarPtr(s.Values(Index))
        End If
        
    End Property

    ' we don't want the property of Item adding a key if it doesn't exist
    Public Property Let Item(Key As Variant, RHS As Variant)
    
        Dim Index As Long = FindIndex(Key, s.LastH)
        
        'If Index = -1 Then Add Key, RHS Else VariantCopyInd ByVal VarPtr(s.Values(Index)), ByVal VarPtr(RHS)
        If Index = -1 Then
            Err.Raise 17 + vbObjectError, "Lib.cHashD2.LetItem", "Key does not exist"
        Else
        	VariantCopyInd ByVal VarPtr(s.Values(Index)), ByVal VarPtr(RHS)
        End If
        
        s.LastH = 0
        
    End Property

    Public Property Set Item(Key As Variant, RHS As Variant)
    
        Dim Index As Long = FindIndex(Key, s.LastH)
        
        'If Index = -1 Then Add Key, RHS Else VariantCopyInd ByVal VarPtr(s.Values(Index)), ByVal VarPtr(RHS)
        If Index = -1 Then
            Err.Raise 17 + vbObjectError, "Lib.cHashD2SetItem", "Key does not exist"
        Else
        	VariantCopyInd ByVal VarPtr(s.Values(Index)), ByVal VarPtr(RHS)
        End If
        
        s.LastH = 0
        
    End Property
    
    
    Private Function FindIndex(Key As Variant, Optional H As Long) As Long  'return -1, when no Key can be found
        Dim i As Long
        Dim C As Decimal
        Dim D As Double
        Dim L As LongPtr
        Dim F As Single
        Dim VT As VbVarType
        Dim HTUB As Long = s.HashTableSize - 1
        FindIndex = H
        H = HTUB 'init the HashValue (all bits to 1)
        
        VT = VarType(Key)
        Select Case VT
            Case vbString
                s.saW.cElements1D = Len(Key)
                s.saW.pvData = StrPtr(Key)
                If s.CompareMethod = 0 Then
                    For i = 0 To s.saW.cElements1D - 1
                        H = (H + s.W(i)) * HMul And HTUB
                    Next
                    If FindIndex = -1 Then
                        Exit Function                                               'it's a "Hash-Only" Calculation	
                    End If
                    
                    For i = 0 To s.HashTable(H).Count - 1
                        If i < DynTakeOver Then
                            FindIndex = s.HashTable(H).DataIdxsStat(i)
                        Else
                            FindIndex = s.HashTable(H).DataIdxsDyn(i)
                        End If
                        If VarType(s.Keys(FindIndex)) = VT Then
                            If Key = s.Keys(FindIndex) Then
                                Exit Function
                            End If
                        End If
                    Next
                Else
                    For i = 0 To s.saW.cElements1D - 1
                        H = (H + LWC(s.W(i))) * HMul And HTUB
                    Next
                    If FindIndex = -1 Then
                        Exit Function                                               'it's a "Hash-Only" Calculation	
                    End If
                    
                    For i = 0 To s.HashTable(H).Count - 1
                        If i < DynTakeOver Then
                            FindIndex = s.HashTable(H).DataIdxsStat(i)
                        Else
                            FindIndex = s.HashTable(H).DataIdxsDyn(i)
                        End If
                        If VarType(s.Keys(FindIndex)) = VT Then
                            If StrComp(Key, s.Keys(FindIndex), s.CompareMethod) = 0 Then
                                Exit Function
                            End If
                        End If
                    Next
                End If
            
            Case vbObject
                L = ObjPtr(Key)
                s.saW.cElements1D = 2
                s.saW.pvData = VBA.VarPtr(L)
                H = (H + s.W(0)) * HMul And HTUB                                        'loop-unrolling (we have only 2 16Bit integers in the array)
                H = (H + s.W(1)) * HMul And HTUB
                
                If FindIndex = -1 Then
                    Exit Function                                                       'it's a "Hash-Only" Calculation	
                End If
            
                For i = 0 To s.HashTable(H).Count - 1
                    If i < DynTakeOver Then
                        FindIndex = s.HashTable(H).DataIdxsStat(i)
                    Else
                        FindIndex = s.HashTable(H).DataIdxsDyn(i)
                    End If
                    
                    If VarType(s.Keys(FindIndex)) = VT Then
                        If Key Is s.Keys(FindIndex) Then
                            Exit Function
                        End If
                    End If
                Next
            
            Case vbCurrency
                C = Key
                s.saW.cElements1D = 4
                s.saW.pvData = VarPtr(C)
                H = (H + s.W(0)) * HMul And HTUB                                          'loop-unrolling (we have only 4 16Bit integers in the array)
                H = (H + s.W(1)) * HMul And HTUB
                H = (H + s.W(2)) * HMul And HTUB
                H = (H + s.W(3)) * HMul And HTUB
                
                If FindIndex = -1 Then
                    Exit Function                                                           'it's a "Hash-Only" Calculation	
                End If
                
                For i = 0 To s.HashTable(H).Count - 1
                    If i < DynTakeOver Then
                        FindIndex = s.HashTable(H).DataIdxsStat(i)
                    Else
                        FindIndex = s.HashTable(H).DataIdxsDyn(i)
                    End If
                    If VarType(s.Keys(FindIndex)) = VT Then
                        If C = s.Keys(FindIndex) Then
                            Exit Function
                        End If
                    End If
                Next
            
            Case vbLong, vbInteger, vbByte
                L = Key
                s.saW.cElements1D = 2
                s.saW.pvData = VarPtr(L)
                H = (H + s.W(0)) * HMul And HTUB                                            'loop-unrolling (we have only 2 16Bit integers in the array)
                H = (H + s.W(1)) * HMul And HTUB
                
                If FindIndex = -1 Then
                    Exit Function                                                           'it's a "Hash-Only" Calculation	
                End If
                
                For i = 0 To s.HashTable(H).Count - 1
                    If i < DynTakeOver Then
                        FindIndex = s.HashTable(H).DataIdxsStat(i)
                    Else
                        FindIndex = s.HashTable(H).DataIdxsDyn(i)
                    End If
                    
                    Select Case VarType(s.Keys(FindIndex))
                        Case vbLong, vbInteger, vbByte
                            If L = s.Keys(FindIndex) Then
                                Exit Function
                            End If
                    End Select
                Next
        
            Case vbDouble
                D = Key
                s.saW.cElements1D = 4
                s.saW.pvData = VarPtr(D)
                H = (H + s.W(0)) * HMul And HTUB                                    'loop-unrolling (we have only 4 16Bit integers in the array)
                H = (H + s.W(1)) * HMul And HTUB
                H = (H + s.W(2)) * HMul And HTUB
                H = (H + s.W(3)) * HMul And HTUB
                
                If FindIndex = -1 Then
                    Exit Function                                                   'it's a "Hash-Only" Calculation	
                End If
                    
                For i = 0 To s.HashTable(H).Count - 1
                    If i < DynTakeOver Then
                        FindIndex = s.HashTable(H).DataIdxsStat(i)
                    Else
                        FindIndex = s.HashTable(H).DataIdxsDyn(i)
                    End If
                    If VarType(s.Keys(FindIndex)) = VT Then
                        If D = s.Keys(FindIndex) Then
                            Exit Function
                        End If
                    End If
                Next
                
            Case vbDate
                D = Key
                s.saW.cElements1D = 4
                s.saW.pvData = VarPtr(D)
                H = (H + s.W(0)) * HMul And HTUB                                    ' loop-unrolling (we have only 4 16Bit integers in the array)
                H = (H + s.W(1)) * HMul And HTUB
                H = (H + s.W(2)) * HMul And HTUB
                H = (H + s.W(3)) * HMul And HTUB
                
                If FindIndex = -1 Then
                    Exit Function                                                   'it's a "Hash-Only" Calculation	
                End If
                        
                For i = 0 To s.HashTable(H).Count - 1
                    If i < DynTakeOver Then
                        FindIndex = s.HashTable(H).DataIdxsStat(i)
                    Else
                        FindIndex = s.HashTable(H).DataIdxsDyn(i)
                    End If
                    If VarType(s.Keys(FindIndex)) = VT Then
                        If D = s.Keys(FindIndex) Then
                            Exit Function
                        End If
                    End If
                Next
            
            Case vbSingle
                F = Key
                s.saW.cElements1D = 2
                s.saW.pvData = VarPtr(F)
                H = (H + s.W(0)) * HMul And HTUB                                        'loop-unrolling (we have only 2 16Bit integers in the array)
                H = (H + s.W(1)) * HMul And HTUB
                
                If FindIndex = -1 Then
                    Exit Function                                        'it's a "Hash-Only" Calculation	
                End If
                    
                For i = 0 To s.HashTable(H).Count - 1
                    If i < DynTakeOver Then
                        FindIndex = s.HashTable(H).DataIdxsStat(i)
                    Else
                        FindIndex = s.HashTable(H).DataIdxsDyn(i)
                    End If
                    
                    If VarType(s.Keys(FindIndex)) = VT Then
                        If F = s.Keys(FindIndex) Then
                            Exit Function
                        End If
                    End If
                Next
                
        End Select
        
        FindIndex = -1

    End Function

    Private Sub AdjustIndex(Idx As Long, Optional ByVal Inverse As Boolean)
        Dim i As Long
        Dim Incr As Long
        If Inverse Then
            Incr = -1
        Else
            Incr = 1
        End If
        
        For i = 0 To s.FCount - 1
            If s.FIndexes(i) <= Idx Then
                Idx = Idx + Incr
            End If
        Next
    End Sub


    Friend Sub CheckHashDistribution()
        Dim i As Long, Count As Long, cc As Long, Min As Long, Max As Long
        Min = &H7FFFFFFF
        For i = 0 To UBound(s.HashTable)
            Count = s.HashTable(i).Count
            If Count Then
                If Min > Count Then
                    Min = Count
                End If
                
                If Max < Count Then
                    Max = Count
                End If
                
                cc += 1
            End If
        Next
        Debug.Print "Distribution of" ; s.Count ; "entries over a s.HashTable with" ; UBound(s.HashTable) + 1 ; "slots ## "
        Debug.Print "Used-HashSlots ## " ; cc
        Debug.Print "Min-Entries ## " ; Min
        Debug.Print "Max-Entries ## " ; Max
    End Sub

End Class
Class cHashD2

'========1=========2=========3=========4=========5=========6=========7=========8=========9=========A=========B=========C
    Attribute VB_Creatable = True
    Attribute VB_PredeclaredId = False
    Attribute VB_Exposed = True
    
    Option Explicit
    '@Description("Attempt as refactring cHashD by Olaf Schmidt into easier to read twinBasic)
    
    ' a feature of chasd is that it can cope with duplicate keys, we have to specifically ask for unique keys if
    ' a true dictionary is required.

    Private Declare PtrSafe Sub CopyMem Lib "kernel32" Alias "RtlMoveMemory" (ptrToDest As Any, ptrToSource As Any, ByVal Count As Long)

    ' End: Unsafe
    
    ' In-Memory size of types in 16 bit words
    Private Const varByteLen                     As long = 2
    Private Const varIntegerLen                  As long = 2
    Private Const varLongLen                     As Long = 2
    Private Const varLongLongLen                 As Long = 4
    Private Const varSingleLen                   As Long = 2
    Private Const varDoubleLen                   As Long = 4
    Private Const varDecimalLen                  As Long = 8 ' This value should be checked as theoretically is should be 7 as a decimal is 96 bits
    Private Const varObjectLen                   As Long = 2
    Private Const varCurrencyLen                 As Long = 4
    Private Const varDateLen                     As Long = 4

    Private Const NoEntry                       As Variant = Empty
    Private Const DynTakeOver                   As Long = 4         ' fixed HashSlot-amount
    Private Const HMul                          As Long = 3727      ' And Hash - Multiplikator


    Private Type HashTableEntry
    
        Count                                   As Long
        DataIdxsStat(0 To DynTakeOver - 1)      As Long
        DataIdxsDyn()                           As Long
        
    End Type
    
    
    Private Type State
    
        LastExpectedMaxCount                    As Long
        EnsureUniqueKeys                        As Boolean
         LastH                                   As Long
        Count                                   As Long
        DTUB                                    As Long
        HashTableSize                           As Long
        CompareMethod                           As VbCompareMethod
        HashTable()                             As HashTableEntry
        Keys()                                  As variant
        Values()                                As variant          'both pairing-arrays are of type Variant
        FIndexes()                              As Long
        FCount                                  As Long
        FUB                                     As Long             'three vars, to handle the deletes

    End Type

    Private s                                   As state
 
 
    Private Sub Class_Initialize()
 
        s.CompareMethod = vbBinaryCompare
        'at startup we set it up, to behave ideally for up to 16384 Items with unique keys
        ' this means that the cHashD/Hkvp classes have a big memory footprint
        ReInit 16384
        
        If LWC(97) = 0 Then
            InitLWC
        End If
   
    End Sub


    Public Sub ReInit(Optional ByVal ipExpectedMaxCount As Long, Optional ByVal ipEnsureUniqueKeys As Boolean)
    	
        If ipExpectedMaxCount <= 0 Then
            ipExpectedMaxCount = s.LastExpectedMaxCount
        End If
        
        If ipExpectedMaxCount < 128 Then
            ipExpectedMaxCount = 128
        End If
        
        s.LastExpectedMaxCount = ipExpectedMaxCount
        s.EnsureUniqueKeys = ipEnsureUniqueKeys
        
        s.HashTableSize = 16
        Do Until s.HashTableSize * 2 > ipExpectedMaxCount
            s.HashTableSize = s.HashTableSize * 2
        Loop
        
        If s.HashTableSize > 524288 Then
            s.HashTableSize = 524288
        End If
        
        ReDim s.HashTable(0 To s.HashTableSize - 1)
        
        s.DTUB = s.LastExpectedMaxCount
        ReDim s.Keys(0 To s.DTUB)
        ReDim s.Values(0 To s.DTUB)
        s.Count = 0
        s.FCount = 0
        s.FUB = 16
        ReDim s.FIndexes(0 To s.FUB)
        
    End Sub


    Public Sub Clear()
        ReInit
    End Sub


    Public Property Get Count() As Long
        Return s.Count
    End Property


    Public Property Get HasUniqueKeys() As Boolean
        Return s.EnsureUniqueKeys
    End Property


    Public Property Get StringCompareMethod() As VbCompareMethod
        Return s.CompareMethod
    End Property


    Public Property Let StringCompareMode(ByVal ipCompareMethod As VbCompareMethod)
        s.CompareMethod = ipCompareMethod
    End Property
    
    
    Public Function Keys(Optional ByVal ipSeqType As st__SeqType = st_seq) As Variant
        If s.Count = 0 Then
            Return Array()
        End If
        
        Dim i As Long = 0
        Dim j As Long = 0
        Dim jUbound As Long = UBound(s.Keys)
        Dim V() As Variant:
        ' s.count is the number of items that have been added to the dictionary
        ReDim V(0 To s.Count - 1)
    
        ' revised from original cHashD to ensure that j 
        ' cannot exceed the ubound of s.keys
        For i = 0 To s.Count - 1
        
            Do
                If j > jUbound Then
                    Exit For
                End If
            
                If VBA.IsEmpty(s.Keys(j)) Then
                    j += 1
                Else
                    'VariantCopy V(i), ByVal VBA.VarPtr(s.Keys(j))
                    Assign V(i), s.Keys(j)
                    j += 1
                	Exit Do
                End If
                
            Loop
        
        Next
        
        Dim myItem As Variant
        Select Case ipSeqType
        
            Case st_Array:          Return V
                
            Case st_Seq:            Return Seq.Deb(V)
                
            Case st_Collection:     
                
                Dim myC As Collection = New Collection
                
                For Each myItem In V
                	myC.Add myItem
                Next
                
                Return myC
                
            Case st_wCollection:  Return wCollection.Deb(V)
                
    
            Case Else
                Err.Raise 17 + vbObjectError, _
                    "twLib.KvpC.Items", _
                    "Unexpected ipSeqType"
        End Select
        
    End Function


    Public Function Items(Optional ByVal ipSeqType As st__SeqType = st_Seq) As Variant
    
        If s.Count = 0 Then
            Return Array()
        End If
        
        Dim i As Long
        Dim j As Long
        Dim jUbound As Long = UBound(s.Keys)
        Dim V() As Variant:
        ReDim V(0 To s.Count - 1)
    
        ' revised from original cHashD to ensure that j 
        ' cannot exceed the ubound of s.values
        For i = 0 To s.Count - 1
        
            Do
                If j > jUbound Then
                    Exit For
                End If
            
                If VBA.IsEmpty(s.Keys(j)) Then
                    j += 1
                Else
                    'VariantCopy V(i), ByVal VBA.VarPtr(s.Values(j))
                    Assign V(i), s.Values(j)
                    j += 1
                	Exit Do
                End If
                
            Loop
        
        Next
        
        Dim myItem As Variant
        Select Case ipSeqType
        
            Case st_Array:          Return V
                
            Case st_Seq:            Return Seq.Deb(V)
                
            Case st_Collection:     
                
                Dim myC As Collection = New Collection
                
                For Each myItem In V
                	myC.Add myItem
                Next
                
                Return myC
                
            Case st_wCollection:  Return wCollection.Deb(V)
            
            Case Else
                Err.Raise 17 + vbObjectError, _
                    "twLib.KvpC.Keys", _
                    "Unexpected ipSeqType"
        End Select
        
    End Function
    

    Public Function Pairs(Optional ipSeqType As st__SeqType = st_seq) As Variant 'hand-out the Key-Values in a Pairs-Array
    
        If s.Count = 0 Then
            Return Array()
        End If
        
        Dim i As Long
        Dim j As Long
        Dim jUbound As Long = UBound(s.Keys)
        Dim V() As Variant:
        ReDim V(0 To s.Count - 1)
    
        ' revised from original cHashD to ensure that j 
        ' cannot exceed the ubound of s.keys
        For i = 0 To s.Count - 1
        
            Do
                If j > jUbound Then
                    Exit For
                End If
            
                If VBA.IsEmpty(s.Keys(j)) Then
                    j += 1
                Else
                    V(i) = Array(s.Keys(j), s.Values(j))
                    j += 1
                	Exit Do
                End If
                
            Loop
        
        Next
        
        Dim myItem As Variant
        Select Case ipSeqType
        
            Case st_Array:          Return V
                
            Case st_Seq:            Return Seq.Deb(V)
                
            Case st_Collection:     
                
                Dim myC As Collection = New Collection
                
                For Each myItem In V
                	myC.Add myItem
                Next
                
                Return myC
                
            Case st_wCollection:  Return wCollection.Deb(V)
                
    
            Case Else
                Err.Raise 17 + vbObjectError, _
                    "twLib.KvpC.Pairs", _
                    "Unexpected ipSeqType"
        End Select
        
    End Function
    
    
    Public Function Exists(Key As Variant) As Boolean
        Return FindIndex(Key) >= 0
    End Function


    Public Sub Add(Key As Variant, Item As Variant)
    
        Dim H As Long
        Dim UB As Long
        Dim i As Long
        
        If s.LastH Then
            H = s.LastH
            s.LastH = 0
        ElseIf s.EnsureUniqueKeys Then
            If FindIndex(Key, H) >= 0 Then
                Err.Raise 457
            End If
        Else
            H = -1
            FindIndex Key, H                                                            'a Value of -1 for H will skip the Index-Search, returning only H
        End If
        
        'add the new Pair, prolonging the Keys- and Values-arrays
        If s.DTUB < s.Count Then
            s.DTUB = (s.DTUB + 16) * 1.3
            ReDim Preserve s.Keys(0 To s.DTUB)
            ReDim Preserve s.Values(0 To s.DTUB)
        End If
        
        If s.FCount > 0 Then
            s.FCount = s.FCount - 1
            i = s.FIndexes(s.FCount)
        Else
            i = s.Count
        End If
        
        'VariantCopyInd ByVal VBA.VarPtr(s.Values(i)), ByVal VBA.VarPtr(Item)
        'VariantCopyInd ByVal VBA.VarPtr(s.Keys(i)), ByVal VBA.VarPtr(Key)
        Assign s.Values(i), Item
        Assign s.Keys(i), Key
        
        'add the new DataIndex to the proper Hash-Buckets
        Select Case s.HashTable(H).Count
            Case Is < DynTakeOver
                s.HashTable(H).DataIdxsStat(s.HashTable(H).Count) = i
                
            Case DynTakeOver
                ReDim Preserve s.HashTable(H).DataIdxsDyn(DynTakeOver To DynTakeOver + 3)
                s.HashTable(H).DataIdxsDyn(DynTakeOver) = i
                
            Case Else
                UB = UBound(s.HashTable(H).DataIdxsDyn)
                If UB < s.HashTable(H).Count Then
                    UB = (UB + 3) * 1.3
                    ReDim Preserve s.HashTable(H).DataIdxsDyn(DynTakeOver To UB)
                End If
                s.HashTable(H).DataIdxsDyn(s.HashTable(H).Count) = i
                
        End Select
        
        s.HashTable(H).Count = s.HashTable(H).Count + 1
        
        s.Count += 1
        
    End Sub


    Public Sub Remove(Key As Variant)
    
        If s.Count = 0 Then
            Exit Sub
        End If
        
        Dim H As Long
        Dim Idx As Long
        Dim i As Long
        Dim j As Long
        
        Idx = FindIndex(Key, H)
        If Idx < 0 Then
            Err.Raise 5
        End If
        
        For i = 0 To s.HashTable(H).Count - 2
            If i < DynTakeOver Then
                If j = 0 Then
                    If s.HashTable(H).DataIdxsStat(i) = Idx Then
                        j = i + 1
                    End If
                End If
                If j Then
                    If j < DynTakeOver Then
                        s.HashTable(H).DataIdxsStat(i) = s.HashTable(H).DataIdxsStat(j)
                        j += 1
                    Else
                        s.HashTable(H).DataIdxsStat(i) = s.HashTable(H).DataIdxsDyn(j)
                        j += 1
                    End If
                End If
            Else
                If j = 0 Then
                    If s.HashTable(H).DataIdxsDyn(i) = Idx Then
                        j = i + 1
                    End If
                End If
                If j Then
                    s.HashTable(H).DataIdxsDyn(i) = s.HashTable(H).DataIdxsDyn(j)
                    j += 1
                End If
            End If
        Next
        s.HashTable(H).Count = i
        
        If s.FUB < s.FCount Then
            s.FUB = s.FUB + s.FUB
            ReDim Preserve s.FIndexes(0 To s.FUB)
        End If
        s.FIndexes(s.FCount) = Idx
        s.FCount = s.FCount + 1
        
        s.Keys(Idx) = NoEntry
        s.Values(Idx) = NoEntry
        s.Count -= 1
        
    End Sub


    Public Sub RemoveByIndex(ByVal IndexZeroBased As Long)
        Remove KeyByIndex(IndexZeroBased)
    End Sub


    Public Function IndexByKey(Key As Variant) As Long
    
        Dim Idx As Long = FindIndex(Key)
        
        If Idx >= 0 And s.FCount > 0 Then
            AdjustIndex Idx, True
        End If
        
        Return Idx
        
    End Function


    Public Property Get KeyByIndex(ByVal ipIndexZeroBased As Long) As Variant
    
        If ipIndexZeroBased < 0 Or ipIndexZeroBased >= s.Count Then
            Err.Raise 9
        End If
        
        If s.FCount Then
            AdjustIndex ipIndexZeroBased
        End If
        
        'VariantCopy KeyByIndex, ByVal VarPtr(s.Keys(ipIndexZeroBased))
        Assign KeyByIndex, s.Keys(ipIndexZeroBased)
        
    End Property


    Public Property Get ItemByIndex(ByVal ipIndexZeroBased As Long) As Variant
    
        If ipIndexZeroBased < 0 Or ipIndexZeroBased >= s.Count Then
            Err.Raise 9
        End If
        
        If s.FCount Then
            AdjustIndex ipIndexZeroBased
        End If
        
        'VariantCopy ItemByIndex, ByVal VarPtr(s.Values(ipIndexZeroBased))
        Assign ItemByIndex, s.Values(ipIndexZeroBased)
        
    End Property


    Public Property Let ItemByIndex(ByVal ipIndexZeroBased As Long, RHS As Variant)
    
        If ipIndexZeroBased < 0 Or ipIndexZeroBased >= s.Count Then
            Err.Raise 9
        End If
        
        If s.FCount Then
            AdjustIndex ipIndexZeroBased
        End If
        
        'VariantCopyInd ByVal VarPtr(s.Values(ipIndexZeroBased)), ByVal VarPtr(RHS)
        Assign s.Values(ipIndexZeroBased), RHS
    End Property


    Public Property Set ItemByIndex(ByVal ipIndexZeroBased As Long, RHS As Variant)
    
        If ipIndexZeroBased < 0 Or ipIndexZeroBased >= s.Count Then
            Err.Raise 9
        End If
        
        If s.FCount Then
            AdjustIndex ipIndexZeroBased
        End If
        
        'VariantCopyInd ByVal VarPtr(s.Values(ipIndexZeroBased)), ByVal VarPtr(RHS)
        Assign s.Values(ipIndexZeroBased), RHS
        
    End Property


    [ DefaultMember ]
    Public Property Get Item(Key As Variant) As Variant
        
        Dim Index As Long = FindIndex(Key)
        
        If Index >= 0 Then
            'VariantCopy Item, ByVal VarPtr(s.Values(Index))
            Assign Item, s.Values(Index)
            
        End If
        
    End Property


    ' we don't want the property of Item adding a key if it doesn't exist
    Public Property Let Item(Key As Variant, RHS As Variant)
    
        Dim Index As Long = FindIndex(Key, s.LastH)
        
        'If Index = -1 Then Add Key, RHS Else VariantCopyInd ByVal VarPtr(s.Values(Index)), ByVal VarPtr(RHS)
        If Index = -1 Then
            Err.Raise 17 + vbObjectError, "Lib.cHashD2.LetItem", "Key does not exist"
        Else
        	'VariantCopyInd ByVal VarPtr(s.Values(Index)), ByVal VarPtr(RHS)
            Assign s.Values(Index), RHS
            
        End If
        
        s.LastH = 0
        
    End Property


    Public Property Set Item(Key As Variant, RHS As Variant)
    
        Dim Index As Long = FindIndex(Key, s.LastH)
        
        'If Index = -1 Then Add Key, RHS Else VariantCopyInd ByVal VarPtr(s.Values(Index)), ByVal VarPtr(RHS)
        If Index = -1 Then
            Err.Raise 17 + vbObjectError, "Lib.cHashD2SetItem", "Key does not exist"
        Else
        	'VariantCopyInd ByVal VarPtr(s.Values(Index)), ByVal VarPtr(RHS)
            Assign s.Values(Index), RHS
            
        End If
        
        s.LastH = 0
        
    End Property
    
    
    Public Function FindIndex(ByRef Key As Variant, Optional ipHash As Long) As Long

        Dim myVarType As VbVarType = IIf(VBA.IsObject(Key), vbObject, VBA.VarType(Key))
        
        Dim HTUB As Long = s.HashTableSize - 1
        Dim myResult As Long = ipHash                                           ' was FindIndex = H
        ipHash = HTUB                                                           ' init the HashValue (all bits to 1)
        
        Dim myDataAsIntArr As Variant = GetDataAsIntArray(Key)
        
        ipHash = HashIt(ipHash, Key, s.CompareMethod)
        
        If myResult = -1 Then
            Exit Function                                                       'it's a "Hash-Only" Calculation	
        End If
        
        Dim myIndex As Long
        For myIndex = 0 To s.HashTable(ipHash).Count - 1
        
            If myIndex < DynTakeOver Then
                FindIndex = s.HashTable(ipHash).DataIdxsStat(myIndex)
            Else
                FindIndex = s.HashTable(ipHash).DataIdxsDyn(myIndex)
            End If
            
            If If VarType(s.Keys(FindIndex)) = myVarType Then
                If myVarType = vbString Then
                    If s.CompareMethod = vbBinaryCompare Then
                        If Key = s.Keys(FindIndex) Then
                            Exit Function
                        End If
                    Else
                        If StrComp(Key, s.Keys(FindIndex), s.CompareMethod) = 0 Then
                            Exit Function
                        End If
                    End If
                Else
                    If Key = s.Keys(FindIndex) Then
                        Exit Function
                    End If
                End If
            End If
        Next
              
        Return -1
        
    End Function
    
    
   
   

    Private Sub AdjustIndex(Idx As Long, Optional ByVal Inverse As Boolean)
        Dim i As Long
        Dim Incr As Long
        If Inverse Then
            Incr = -1
        Else
            Incr = 1
        End If
        
        For i = 0 To s.FCount - 1
            If s.FIndexes(i) <= Idx Then
                Idx = Idx + Incr
            End If
        Next
    End Sub


    Friend Sub CheckHashDistribution()
        Dim i As Long, Count As Long, cc As Long, Min As Long, Max As Long
        Min = &H7FFFFFFF
        For i = 0 To UBound(s.HashTable)
            Count = s.HashTable(i).Count
            If Count Then
                If Min > Count Then
                    Min = Count
                End If
                
                If Max < Count Then
                    Max = Count
                End If
                
                cc += 1
            End If
        Next
        Debug.Print "Distribution of" ; s.Count ; "entries over a s.HashTable with" ; UBound(s.HashTable) + 1 ; "slots ## "
        Debug.Print "Used-HashSlots ## " ; cc
        Debug.Print "Min-Entries ## " ; Min
        Debug.Print "Max-Entries ## " ; Max
    End Sub


    ' Public Function HashIt(ByRef ipHash As Long, ipDataAsIntArray As Variant, Optional ipCOmparemethod As VbCompareMethod = vbtextcompare) As Long
    Public Function HashIt(ByRef ipHash As Long, key As Variant, Optional ipCOmparemethod As VbCompareMethod = vbtextcompare) As Long

        Dim myDataAsIntArray As Variant = GetDataAsIntArray(key)
        Dim myIndex As Long
        Dim myHash As Long = ipHash
        Dim HTUB As Long = s.HashTableSize - 1
        If ipCOmparemethod = vbBinaryCompare Then
        
            For myIndex = LBound(myDataAsIntArray) To UBound(myDataAsIntArray)
                myHash = (ipHash + myDataAsIntArray(myIndex)) * HMul And HTUB
            Next
            
        Else
        
            For myIndex = LBound(myDataAsIntArray) To UBound(myDataAsIntArray)
                myHash = (ipHash + LWC(myDataAsIntArray(myIndex))) * HMul And HTUB
            Next
            
        End If
        
        Return ipHash
        
    End Function
    
    ' Method below uses code from Module Unsafe
    Public Function GetDataAsIntArray(ByRef ipItem As Variant) As Integer()

        ' Vartype cannot be used freely with objects.
        ' If an object has a default member then
        ' vartype will return the type of the default member rather than vbObject.
        ' Hence the use of an iif to set the value of vartype
        Dim myVarType As VbVarType = IIf(VBA.IsObject(ipItem), vbObject, VBA.VarType(ipItem))
      
        ' The data section of a variant starts at offset 8
        Dim mySourcePtr As LongPtr = VarPtr(ipItem) + 8
        
        ' myLen is the number of 16 bit words that the data of a specifi typoe will occupy
        Dim myLen As Long
        
        Select Case myVarType
            Case vbString
                ' The data part of a variant holding a string is always a reference not actual data
                ' dereferencing to get the actual data can be done using Strptr 
                
                myLen = VBA.Len(ipItem)  ' LenB would give the length in bytes which is not what we want.
                mySourcePtr = VBA.StrPtr(ipItem)
            
            Case vbObject
                ' similar to strings, variant containing onject are always by reference
                ' so we use objPtr to get the actual address of the object
                ' Hashing is done of the address of the object
                myLen = varObjectLen
                mySourcePtr = VBA.ObjPtr(ipItem)
                
            Case vbCurrency
                myLen = varCurrencyLen
            
            Case vbLong, vbInteger, vbByte
                myLen = varLongLen
        
            Case vbDouble
                myLen = varDoubleLen
                
            Case vbDate
                myLen = varDateLen
               
            Case vbSingle
                myLen = varSingleLen
                
            Case vbLongLong
                myLen = varLongLongLen
                
            Case vbDecimal
                ' structure of a decimal is 
                'scale byte
                'sign byte
                'where scale/sign are a 16 bit word
                ' Hi long
                ' where high is a single 32 bit word
                ' low Long '32bit word
                ' med long '32bit word
                ' where low,med comprise one 64 bit value
                ' which a 7 x 16 bit words
                ' this means that the value ,when represented as a set of intergers,
                ' can look odd because 12 bytes for the integer part
                ' run 12,11,10,9,4,3,2,1,8,7,6,5
                'Or As integers
                ' 5,6,1,2,3,4
                myLen = varDecimalLen
                'mySourcePtr =
                
        End Select
        
        Dim myArray() As Integer
        ReDim myArray(0 To myLen - 1)
      
        ' GetArrayInfo is a method in Module Unsafe
        Dim myDestPtr As LongPtr = GetArrayInfo(myArray).SAUdt.pvData
        
        ' if a variant has the VT_BYREF flag set then the value contained by the variant
        ' is a pointer to the actual data, not the data itself.
        
        ' copy the two bytes that hold the myVarType Type
        Dim myInteger As Integer = 0
        CopyMem myInteger, ByVal VarPtr(ipItem), 2
        
        ' check if we need to dereference a pointer to data
        ' but not if we have a string or object
        If (Not myVarType = vbString) And (Not myVarType = vbObject) Then
            If myInteger & VT_BYREF Then
                
                CopyMem mySourcePtr, ByVal mySourcePtr, 4
                
            End If
        End If
        
        ' we can now get the actual data
        CopyMem ByVal myDestPtr, ByVal mySourcePtr, myLen * 2
        
        Return myArray
        
    End Function
    
    
    
End Class
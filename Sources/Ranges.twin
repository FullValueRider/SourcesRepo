Class Ranges

    Attribute VB_GlobalNameSpace = False
    Attribute VB_Creatable = True
    Attribute VB_PredeclaredId = True
    Attribute VB_Exposed = True

    Option Explicit

    Const HAS_START                 As String = "S"
    Const HAS_END                   As String = "E"
    Const HAS_RUN                   As String = "R"
    Const IS_MISSING                As String = "M"
    
    ' Public Type SER
    	
    '     NativeFirst                 As variant
    '     NativeLast                  As variant
    '     Size                        As variant
    '     NativeStart                 As variant
    '     NativeEnd                   As variant
    '     NormStart                   As variant
    '     NormEnd                     As variant
    '     NormFirst                   As variant
    '     Run                         As variant
    '     NormLast                    As variant
        
    ' End Type
    
    
    'supertceded by seq.deb.repeat
    ' Public Function GetNumberSeries(ByVal ipStart As Variant, ByVal ipCount As Long, Optional ByVal ipStep As Variant = 1) As Variant

    '     Dim myArray As Variant
    '     myArray = Empty
    '     GetNumberSeries = myArray
            
    '     If TypeInfo.IsNotNumber(ipStart, ipCount, ipStep) Then Exit Function
        
    '     ReDim myArray(0 To ipCount - 1)
    '     Dim myIndex As Long
    '     For myIndex = 0 To ipCount - 1
            
    '         myArray(myIndex) = ipStart
    '         ipStart = ipStart + ipStep
                
    '     Next
        
    '     GetNumberSeries = myArray
            
    ' End Function

    ' '@Description("Return an array of length ipCount populated with ipItem")
    ' Public Function GetItemSeries(ByVal ipCount As Long, ByVal ipItem As Variant) As Variant
    '     Return Seq.Deb.Repeat(ipItem, ipCount).ToArray
    ' End Function


    Public Function IsInRange(ByVal ipTestItem As Variant, ByVal ipLowerBound As Variant, ByVal ipUpperBound As Variant) As Boolean
        
        If BailOut.When(TypeInfo.IsNotNumber(ipTestItem), alIsNotNumber) Then Return False
        If BailOut.When(TypeInfo.IsNotNumber(ipLowerBound), alIsNotNumber) Then Return False
        If BailOut.When(TypeInfo.IsNotNumber(ipUpperBound), alIsNotNumber) Then Return False
        
        If (ipTestItem < ipLowerBound) Or (ipTestItem > ipUpperBound) Then Return False
        Return True
    End Function


    Public Function IsNotInRange(ByVal ipTestItem As Variant, ByVal ipLowerBound As Variant, ByVal ipUpperBound As Variant) As Boolean
        IsNotInRange = False
        If BailOut.When(TypeInfo.IsNotNumber(ipLowerBound, ipUpperBound), alIsNotNumber) Then Exit Function
        If (ipTestItem >= ipLowerBound) And (ipTestItem <= ipUpperBound) Then Exit Function
        IsNotInRange = True
    End Function


    ' '@Description("Takes any iterable or string. The startindex and endindex should be specified using a 1 based index. The result.items lyst returns the startindex based on the actual indexing used by the iterable")
    '  Friend Function TryStartRunFromAnyStartRunEnd _
    ' ( _
    '     ByVal ipItem As Variant, _
    '     Optional ByVal ipNormStart As Variant, _
    '     Optional ByVal ipRun As Variant, _
    '     Optional ByVal ipNormEnd As Variant, _
    '     Optional ByVal ipRank As PresetOrd = PresetOrd.ArrayFirstRank _
    ' ) As Boolean
    ' Attribute TryStartRunFromAnyStartRunEnd.VB_Description = "Takes any iterable or string. The startindex and endindex should be specified using a 1 based index. The result.items lyst returns the startindex based on the actual indexing used by the iterable"
        
    '     ' Item must be an entity that has an extent, i.e. an iterable or a string
    '     ' ipNormStart , ipNormEnd and ipRun may be negative
    '     '
    '     ' There are 7 scenarios
    '     '   1. No params
    '     '   2. Start only
    '     '   3. Run only
    '     '   4. End only
    '     '   5. Start and Run, Start and Run and End (end is ignored when start and run are provided)
    '     '   6. Start and End
    '     '   7. Run and End
    '     '
    '     ' Where coercion is used a message is retuned about the coercion applied
    '     '
    '     '  To simplify calculations the first and last indexes of each rank of Item are normalised
    '     ' such that the first index is 1

    '     Res.Reset 'NotOkay
    '     TryStartRunFromAnyStartRunEnd = False

    '     Dim myItem As Box
    '     Set myItem = Box(ipItem)

    '     Dim myItemExtents() As Rank
    '     ReDim myItemExtents(1 To myItem.Extent.RankCount)
    
    '     Dim myRank As Long
    '     For myRank = 1 To myItem.Extent.RankCount

    '         Set myItemExtents(myRank) = Rank(1, myItem.Extent(myRank).LastIndex - myItem.Extent(myRank).FirstIndex + 1)


    '     Next

    '     ' Now focus on the specific rank where myRankIndex is an index into myItemExtents
    '     Dim myRankIndex As Long
    '     If ipRank < 1 Then
        
    '         myRankIndex = enums.Preset.Value(ArrayFirstRank)
    '         Res.SetOkay MsgOrd.RankOfZeroResetToOne

    '     Else

    '         myRankIndex = ipRank

    '     End If


    '     ''''**** got to here
    '     Dim myInputExtent As Rank
        
        
        
    '     If Not VBA.IsMissing(ipRun) Then

    '         If BailOut.When(ipRun = 0, RunLengthIsZero) Then Exit Function


    '     End If
            
    '     ' Ensure a legal start index
    '     If Not VBA.IsMissing(ipNormStart) Then
                
    '         If BailOut.When(VBA.Abs(ipNormStart) > myItem.Extent(myRank).Count, StartIndexExceedsItemCount) Then Exit Function
                    
    '         ' This is an intervention because we define start runs as starting from 1 or -1
    '         ' so zero is not an allowed value but is taken to mean 1
    '         If ipNormStart = 0 Then
                    
    '             ipNormStart = 1
    '             '@Ignore FunctionReturnValueDiscarded
    '             Res.SetOkay StartIndexWasZeroResetToOne
                    
                
    '         End If
                
    '     End If
            
    '     ' Ensure a legal end index
    '     If Not VBA.IsMissing(ipNormEnd) Then
                
    '         If VBA.Abs(ipNormEnd) > myItem.Extent(myRank).LastIndex Then
    '             ' intervention to reset end index
    '             ipNormEnd = myItem.Extent(myRank).LastIndex * VBA.Sgn(ipNormEnd)
    '             '@Ignore FunctionReturnValueDiscarded
    '             Res.SetOkay EndIndexResetToCount
        

    '         End If

    '     End If
        
    '     Dim mySelector As String
    '     If Not VBA.IsMissing(ipNormStart) Then mySelector = mySelector & "S"
    '     If Not VBA.IsMissing(ipRun) Then mySelector = mySelector & "R"
    '     If Not VBA.IsMissing(ipNormEnd) Then mySelector = mySelector & "E"

    '     Select Case mySelector
            
    '         Case "SRE", "SR"
                
    '             DeduceStartRunFromAnyStartRun ipNormStart, ipRun, myRank, myItem
                        
                    
    '         Case "SE"
                    
    '             DeduceStartRunFromAnyStartEnd ipNormStart, ipNormEnd, myRank, myItem
                        
                    
    '         Case "S"
                    
    '             DeduceStartRunFromAnyStartOnly ipNormStart, myRank, myItem
                        
                    
    '         Case "R"
                    
    '             DeduceStartRunFromAnyRunOnly ipRun, myRank, myItem
                        
                    
    '         Case "E"
                    
    '             DeduceStartRunFromAnyEndOnly ipNormEnd, myRank, myItem
                

    '         Case "RE"
                        
    '             DeduceStartRunFromAnyRunEnd ipRun, ipNormEnd, myRank, myItem
                
                    
    '         Case ""
                    
    '             DeduceStartRunFromNoStartRunOrEnd myRank, myItem
                        
                    
    '     End Select
            
    '     'iopResult.Item(ResultItemsEnums.StartRun(srStartIndex)) = iopResult.Item(ResultItemsEnums.StartRun(srStartIndex)) + myFirstIndex - 1
    '      TryStartRunFromAnyStartRunEnd = True
    '      Res.SetOkay
    ' End Function

    ' friend Function ValidateStartRunEnd _
    ' ( _
    '     ByRef ipIterable As Box, _
    '     ByVal ipStart As Long, _
    '     ByVal ipRun As Long, _
    '     ByVal ipEnd As Long _
    ' ) As Boolean
    '     ValidateStartRunEnd = False
        
    '     ' Start must be within bounds
    '     ValidateStartRunEnd = True
    ' End Function
        

    ' Friend Sub DeduceStartRunFromAnyStartRun _
    ' ( _
    '     ByVal ipNormStart As Long, _
    '     ByVal ipRun As Long, _
    '     ByVal ipRank As Long, _
    '     ByRef ipEnumerator As Enumerator _
    ' )
            
    '     Dim myStartIndex As Long
    '     Dim myRun As Long
    '     If ipNormStart > 0 And ipRun > 0 Then
                
    '         If ipNormStart + ipRun - 1 <= ipEnumerator.Count(ipRank) Then
                    
    '             myRun = ipRun
    '             myStartIndex = ipNormStart + ipEnumerator.FirstIndex(ipRank) - 1
                                    
    '         Else
                    
    '             myRun = ipEnumerator.Count(ipRank) - ipNormStart + 1
    '             myStartIndex = ipNormStart
    '             Res.SetOkay RunLengthTooLong
                    
                    
    '         End If
                
    '     ElseIf ipNormStart > 0 And ipRun < 0 Then
                
    '         If ipNormStart + ipRun + 1 > 0 Then
                    
    '             myStartIndex = ipEnumerator.FirstIndex
    '             myRun = VBA.Abs(ipRun)
                    
    '         Else
                    
    '             myStartIndex = 1
    '             myRun = ipNormStart
    '             Res.SetOkay RunLengthTooLong
                    
    '         End If
                
                
    '     ElseIf ipNormStart < 0 And ipRun > 0 Then
                
    '         myStartIndex = ipEnumerator.LastIndex(ipRank) + ipNormStart + 1
    '         If myStartIndex + ipRun - 1 <= ipEnumerator.Count(ipRank) Then
                    
    '             myRun = ipRun
                    
    '         Else
                    
    '             myRun = ipEnumerator.Count(ipRank) - myStartIndex + 1
    '             Res.SetOkay RunLengthTooLong
                    
                    
    '         End If
                
    '     Else                                         ' ipNormStart <0 and ipRun <0 then
                
    '         myStartIndex = ipEnumerator.LastIndex(ipRank) + ipNormStart + 1
    '         If myStartIndex + Abs(ipRun) + 1 > 0 Then
                    
    '             myStartIndex = myStartIndex + ipRun + 1
    '             myRun = VBA.Abs(ipRun)
                    
    '         Else
                    
    '             myStartIndex = 1
    '             myRun = ipEnumerator.Count(ipRank) - myStartIndex + 1
                    
    '         End If
                
                
    '     End If
            
    '     ' ' Adjust startindex to align witth the true first index
    '     ' myStartIndex = myStartIndex - 1 + iopResult.Item(ResultItemsEnums.Iterator(IsFirstIndex))
    '      '@Ignore FunctionReturnValueDiscarded
    '      Res.Reset.SetItems myStartIndex, myRun '(Okay)
            
    ' End Sub


    ' Friend Sub DeduceStartRunFromAnyStartEnd _
    ' ( _
    '     ByVal ipNormStart As Long, _
    '     ByVal ipNormEnd As Long, _
    '     ByVal ipRank As Long, _
    '     ByRef ipExtent As Enumerator _
    ' )
                
    '     Dim myStartIndex As Long
    '     Dim myEndIndex As Long
    '     Dim myRun As Long
                
    '     '@Ignore IIfSideEffect
    '     '@Ignore IIfSideEffect
    '     myStartIndex = IIf(ipNormStart > 0, ipNormStart + ipExtent.FirstIndex(ipRank) - 1, ipExtent.LastIndex(ipRank) + ipNormStart + 1)
    '     '@Ignore IIfSideEffect
    '     '@Ignore IIfSideEffect
    '     myEndIndex = IIf(ipNormEnd > 0, ipNormEnd + ipExtent.FirstIndex(ipRank) - 1, ipExtent.LastIndex(ipRank) + ipNormEnd + 1)
                
    '     If myStartIndex < myEndIndex Then
                    
    '         myRun = myEndIndex - myStartIndex + 1
                    
    '     Else
                    
    '         myRun = myStartIndex - myEndIndex + 1
    '         myStartIndex = myEndIndex
                    
    '     End If
                
    '     ' ' Adjust startindex to align witth the true first index
    '     ' myStartIndex = myStartIndex - 1 + iopResult.Item(ResultItemsEnums.Iterator(IsFirstIndex))
    '     '@Ignore FunctionReturnValueDiscarded
    '     Res.Reset.SetItems myStartIndex, myRun '(Okay)
                
    ' End Sub


    ' Friend Sub DeduceStartRunFromAnyStartOnly _
    ' ( _
    '     ByVal ipNormStart As Long, _
    '     ByVal ipRanks As Long, _
    '     ByRef ipExtent As Enumerator _
    ' )

    '     Dim myStartIndex As Long
    '     Dim myRun  As Long
    '     If ipNormStart > 0 Then
                
    '         myStartIndex = ipExtent.FirstIndex + ipNormStart - 1
    '         myRun = ipExtent.Count - ipNormStart + 1
                
    '     Else
            
    '         myStartIndex = ipExtent.LastIndex + ipNormStart + 1
    '         myRun = VBA.Abs(ipNormStart)
                
    '     End If

    '     ' ' Adjust startindex to align witth the true first index
    '     ' myStartIndex = myStartIndex - 1 + iopResult.Item(ResultItemsEnums.Iterator(IsFirstIndex))
    '     '@Ignore FunctionReturnValueDiscarded
    '     Res.Reset.SetItems myStartIndex, myRun '(Okay)

    ' End Sub


    ' Friend Sub DeduceStartRunFromAnyRunOnly(ByVal ipRun As Long, ByVal ipRank As Long, ByRef ipExtent As Enumerator)
                
    '     Dim myStartIndex As Long
    '     Dim myRun As Long
        
    '     If ipRun > 0 Then
        
    '       myStartIndex = ipExtent.FirstIndex(ipRank)
    '       myRun = ipRun
        
        
    '     Else
                
    '       myStartIndex = ipExtent.LastIndex + ipRun + 1
    '       myRun = VBA.Abs(ipRun)
                
                
    '     End If
            
    '     ' ' Adjust startindex to align witth the true first index
    '     ' myStartIndex = myStartIndex - 1 + iopResult.Item(ResultItemsEnums.Iterator(IsFirstIndex))
    '     '@Ignore FunctionReturnValueDiscarded
    '     Res.Reset.SetItems myStartIndex, myRun 'Okay)
            
    ' End Sub


    ' Friend Sub DeduceStartRunFromAnyEndOnly(ByVal ipNormEnd As Long, ByVal ipRank As Long, ByRef ipEnumerator As Enumerator)
            
    '     Dim myStartIndex As Long
    '     Dim myRun As Long
                
    '     If ipNormEnd > 0 Then
            
    '       myStartIndex = ipEnumerator.FirstIndex(ipRank)
    '       myRun = ipNormEnd
            
                
    '     Else
        
    '       myStartIndex = ipEnumerator.FirstIndex(ipRank)
    '       myRun = ipEnumerator.Count(ipRank) + ipNormEnd + 1
                
                
    '     End If
            
    '     ' Adjust startindex to align witth the true first index
            
    '     '@Ignore FunctionReturnValueDiscarded
    '     Res.Reset.SetItems myStartIndex, myRun '(Okay)
            
    ' End Sub


    ' '@Ignore EmptyMethod
    ' 'need to add code ignore for now
    ' Friend Sub DeduceStartRunFromAnyRunEnd(ByVal ipRun As Long, ByVal ipNormEnd As Long, ByVal ipRamk As Long, ByVal myExtent As Enumerator)
    '     'To add code
    ' End Sub


    ' Friend Sub DeduceStartRunFromNoStartRunOrEnd(ByVal ipRank As Long, ByRef ipExtent As Enumerator)
            
    '     ' Dim myFirstIndex As Long
    '     ' myFirstIndex = ipEnumerator.FirstIndex
            
    '     ' Dim myRun As Long
    '     ' myRun = iopExtent.Item(ResultItemsEnums.Iterator(ieCount))
            
    '     ' Adjust startindex to align witth the true first index
    '     'myStartIndex = myStartIndex - 1 + iopResult.Item(ResultItemsEnums.Iterator(IsFirstIndex))
    '     '@Ignore FunctionReturnValueDiscarded
    '     Res.SetOkay.SetItems ipExtent.FirstIndex(ipRank), ipExtent.Count(ipRank)

    ' End Sub

    ' '@Description("Returns the specified subrange in Item(0) of the result")
    ' Public Function TryRange _
    ' ( _
    '     ByVal ipIterable As Variant, _
    '     Optional ByVal ipNormStart As Variant, _
    '     Optional ByVal ipRun As Variant, _
    '     Optional ByVal ipNormEnd As Variant, _
    '     Optional ByVal ipRank As Variant _
    ' ) As Result
    ' Attribute TryRange.VB_Description = "Returns the specified subrange in Item(0) of the result"
    
    '     '@Ignore FunctionReturnValueDiscarded
    '     Res.SetOkay
    '     Set TryRange = Res
    '     Dim myRank As Long
    '     If VBA.IsMissing(ipRank) Then myRank = enums.Preset.Value(ArrayFirstRank) Else myRank = ipRank
            
    '     If Me.TryStartRunFromAnyStartRunEnd(ipIterable, ipNormStart, ipRun, ipNormEnd, myRank) Then Exit Function
    
            
    '     'get startrun
    '     Dim myRangeStartRun As ResultStartRun
    '     Set myRangeStartRun = Res.Items
        
    '    Dim myColl As Collection
    '    Set myColl = New Collection
    
    '     'ToDo: Check if this loop adequatly deals with stacks and queues
    '     Dim myIndex As Long
    '     For myIndex = myRangeStartRun.StartIndex To myRangeStartRun.LastIndex
            
    '        myColl.Add ipIterable(myIndex)
                
    '     Next
        
    '     Set Res.Items.Item(1) = myColl
    '     Set TryRange = Res.SetOkay
        
    ' End Function


    ' Public Function GetIterantFromAnyStartRunEnd _
    ' ( _
    '     ByVal ipFirst As Long, _
    '     ByVal ipLast As Long, _
    '     Optional ByVal ipStart As Variant = Empty, _
    '     Optional ByVal ipRun As Variant = Empty, _
    '     Optional ByVal ipStop As Variant = Empty _
    ' ) As Iterant

    '     If VBA.IsEmpty(ipStart) And VBA.IsEmpty(ipRun) And VBA.IsEmpty(ipStop) Then
            
    '         GetIterantFromAnyStartRunEnd = DecodeIterantFromFirstLast(ipFirst, ipLast)
            
            
    '     ElseIf VBA.IsEmpty(ipStart) And VBA.IsEmpty(ipRun) And (Not VBA.IsEmpty(ipStop)) Then
        
    '         GetIterantFromAnyStartRunEnd = DecodeIterantFromStop(ipFirst, ipLast, ipStop)
            
            
    '     ElseIf VBA.IsEmpty(ipStart) And VBA.IsEmpty(ipRun) And VBA.IsEmpty(ipStop) Then
            
    '     '     GetIterantFromAnyStartRunEnd = DecodeIterantFrom
            
            
    '     ' ElseIf VBA.IsEmpty(ipStart) And VBA.IsEmpty(ipRun) And VBA.IsEmpty(ipStop) Then
            
    '     '     GetIterantFromAnyStartRunEnd = DecodeIterantFrom
            
            
    '     ' ElseIf VBA.IsEmpty(ipStart) And VBA.IsEmpty(ipRun) And VBA.IsEmpty(ipStop) Then
            
    '     '     GetIterantFromAnyStartRunEnd = DecodeIterantFrom
            
        
    '     ' ElseIf VBA.IsEmpty(ipStart) And VBA.IsEmpty(ipRun) And VBA.IsEmpty(ipStop) Then
            
    '     '     GetIterantFromAnyStartRunEnd = DecodeIterantFrom
        
        
    '     ' ElseIf VBA.IsEmpty(ipStart) And VBA.IsEmpty(ipRun) And VBA.IsEmpty(ipStop) Then
            
    '     '     GetIterantFromAnyStartRunEnd = DecodeIterantFrom
        
        
    '     ' ElseIf VBA.IsEmpty(ipStart) And VBA.IsEmpty(ipRun) And VBA.IsEmpty(ipStop) Then
            
    '     '     GetIterantFromAnyStartRunEnd = DecodeIterantFrom
        
        
    
    ' End If

    ' End Function

    ' Friend Function DecodeIterantFromFirstLast(ByVal ipFirst As Long, ByVal ipLast As Long) As Iterant
        
    '     Dim myIterant As Iterant
    '     Set myIterant = Iterant.Deb
    '     With myIterant
        
    '         .Start = ipFirst
    '         .Stop = ipLast
    '         If .Start <.Stop Then
                
    '             .Count = Abs(.Stop -.Start + 1)
    '             .Step = 1
    '         Else
                
    '             .Count = Abs(.Start - .Stop + 1)
    '             .Step = -1
    '         End If
            
    '     End With
        
    '     Set DecodeIterantFromFirstLast = myIterant
        
    ' End Function

    ' Friend Function DecodeIterantFromStop(ByVal ipFirst As Long, ByVal iplast As Long, ByVal ipStop As Long) As Iterant
        
    '     Dim myIterant As Iterant
    '     Set myIterant = Iterant.Deb
        
    '     Dim myFirst As Long
    '     ' Dim myLast As Long
    '     ' Dim myStop As Long
        
    '     ' 'rebase so First = 1
    '     ' myFirst = 0
    '     ' myLast = iplast - ipFirst
    '     ' myStop = ipStop - ipFirst
        
    '     ' If myStop < myFirst Then myStop = myFirst
    '     ' If myStop > myLast Then myStop = myLast
        


    '     With myIterant
        
        
    '         .Stop = ipStop
    '         .Start = ipFirst
    '         If ipFirst < iplast Then
                
                
    '             .Count = Abs(ipStop - ipFirst) + 1
    '             .Step = 1
    '         Else
                
            
    '             .Count = Abs(ipFirst - ipStop) + 1
    '             .Step = -1
    '         End If
            
    '     End With
        
        
        
    '     Set DecodeIterantFromStop = myIterant
    ' End Function
' Comments on ResolveStartEndRun
/*  
    When defining the input/outputs for ResolveStartRunIndex we have to first convert to a normalised indexing.
    This transformation is dictated by the disire to allow Indexes and runs for object in the library to be 
    specified as positive or negative numbers
    e.g.
    A start index of two is two items in from the first index
    A start index of minus two is two items in from the Last index
    The FirstIndex is always specified as 1
    The Negative first index is always specified as -1.
    0 as a first or last index is an illegal normalised index.
    
    FirstIndex and LastIndex are terms used for the indexes of the first and last items in a collection object/array.
    
    The output of ResolveStartEndRun is three item array
    
    Item 0: The positive normalised start index (note not first index)
    Item 1: The Native positive start index
    Item 3: The positive run 
    For Item 1 and 2 -ipNormStart +iprun -1 = ipNormEnd in the respective indexing system
*/ 
    
      '@Description("Returns positive startindex (native), startindex(normalised) and run as a 3 item array _
       from any combination of start End and run inputs. _
       Start and End are values in normalised index that always starts at 1/-1 (LHS/RHS) _
        Indexes and Runs may be be negative values. _
        Positive values count left to right, negative values right to left. _
        Run is ignored if a Start and End are provided.  _
         _
         _
         To convert to the native indexing use Firstindex - startindex+1")
         
         
'=======================================================================================
        /*
        ResolveStartRunEnd was originally written using a UDT called SER. 
        ser was defined in the function below but it proved not possible to pass
        */
        Public Function ResolveStartEndRun _
        ( _
            ByVal ipNativeFirst As Long, _
            ByVal ipNativeLast As Long, _
            Optional ByVal ipNormStart As Variant = Empty, _
            Optional ByVal ipNormEnd As Variant = Empty, _
            Optional ByVal ipRun As Variant = Empty _
        ) As SER
            
            Dim mySER As SER = SER.Deb
            
            If VarInfo.IsNotEmpty(ipRun) And ipRun = 0& Then
                mySER.SetInvalid enums.Alert.Ord(alOutsideBounds), "Run"
                Return mySER
            End If
            
            
        
            With mySER
                ' Known, fixed values
                .NativeFirst = ipNativeFirst
                .NativeLast = ipNativeLast
                .NormFirst = 1
                
                ' calculated fom known values
                .Size = ipNativeLast - ipNativeFirst + 1
                .NormLast = mySER.NormFirst + mySER.Size - 1
                
                ' the optional parameters that we have to calculate
                .NormStart = ipNormStart
                .NormEnd = ipNormEnd
                .Run = ipRun
                
                ' values that are best calculated once the Norm start/end/run values are established
                .NativeStart = Empty
                .NativeEnd = Empty
                
            End With
        
            ' Define a case selector based on mssing values for ipNormStart, ipNormEnd and ipRun
            
            Dim myCase As String = _
            IIf(VBA.IsEmpty(ipNormStart), IS_MISSING, HAS_START) _
            & IIf(VBA.IsEmpty(ipNormEnd), IS_MISSING, HAS_END) _
            & IIf(VBA.IsEmpty(ipRun), IS_MISSING, HAS_RUN)
            
            
            ' at this point we know which parameters have been provided 
        
            Select Case myCase
                    
                Case "MMM":         ResolveMMM mySER
                Case "MMR":         ResolveMMR mySER
                Case "MEM":         ResolveMEM mySER
                Case "MER":         ResolveMER mySER
                Case "SMM":         ResolveSMM mySER
                Case "SMR":         ResolveSMR mySER
                ' Run is ignored if an End is provided
                Case "SEM", "SER":  resolveSEM mySER
                    
            End Select
            'the line below is wrong for a positive run
            mySER.NativeStart = mySER.NativeFirst + (mySER.NormStart - mySER.NormFirst)
            mySER.NativeEnd = mySER.NativeStart + mySER.Run - 1
            
            Return mySER
        End Function


    Friend Sub ResolveMMM(ByRef ipSER As SER)
    
        ipSER.NormStart = ipSER.NormFirst
        ipSER.NormEnd = ipSER.NormLast
        ipSER.Run = ipSER.Size
        
        ipSER.NativeStart = ipSER.NativeFirst
        ipSER.NativeEnd = ipSER.NativeLast
        
    End Sub


    Friend Sub ResolveMMR(ByRef ipSER As SER)
    
        ' NormRun only provided
        ' The run value relates to the start position
        ' so we could choose the start position to be the first
        ' however, from a programming perspective its most likely that a
        ' negative run will be in the context of finishing at last
        ' so for negative run value we set the rule that a negative run
        ' ends at last. to end at the last index
        
        ' check that run does not exceed size
        EnsureInitialRunIsWithinBounds ipSER
        
        If ipSER.IsInvalid Then
            Exit Sub
        End If
        
        If ipSER.Run < 0 Then
            ipSER.NormStart = ipSER.NormLast + ipSER.Run + 1
            ipSER.Run = VBA.Abs(ipSER.Run)
        Else
            ipSER.NormStart = ipSER.NormFirst
        End If
        ipSER.NormEnd = ipSER.NormStart + ipSER.Run - 1
        
    End Sub
    

    Friend Sub ResolveMEM(ByRef ipSER As SER)
        
        ' we only have NormEnd
        
        ' ' ensure that the end value is within bounds
        EnsureInitialNormEndIsWithinBounds ipSER
        
        If ipSER.NormEnd < 0 Then
        
            ipSER.NormEnd = ipSER.NormLast + ipSER.NormEnd + 1
        
            
        End If
        	
        ipSER.NormStart = ipSER.NormFirst
        ipSER.Run = ipSER.NormEnd - ipSER.NormStart + 1
        
    End Sub
    

    Friend Sub ResolveSMM(ByRef ipSER As SER)

        'we only have NormStart
        'ensure start is within bounds
        EnsureInitialNormStartIsWithinBounds ipSER
        
        If ipSER.IsInvalid Then
            Exit Sub
        End If
        
        If ipSER.NormStart < 0 Then
        
            ipSER.NormStart = ipSER.NormLast + ipSER.NormStart + 1
            ipSER.NormEnd = ipSER.NormLast
            ipSER.Run = ipSER.NormEnd - ipSER.NormStart + 1
                
        Else
        
            ipSER.NormEnd = ipSER.NormLast
            ipSER.Run = ipSER.NormEnd - ipSER.NormStart + 1
        
        End If
            
    End Sub
    
    ' when two or more parameters are provided we lso have to manage the risk of 
    ' the calculated Norm vlues being out of bounds 

    Friend Sub ResolveSMR(ByRef ipSER As SER)

        ' we have start and runwe have
          'ensure start is within bounds
        EnsureInitialNormStartIsWithinBounds ipSER
        
        If ipSER.IsInvalid Then
            Exit Sub
        End If
        
        ' check that run does not exceed size
        EnsureInitialRunIsWithinBounds ipSER
        
        If ipSER.IsInvalid Then
            Exit Sub
        End If
        
    
        If ipSER.NormStart < 0 Then
        
            ipSER.NormStart = ipSER.NormLast + ipSER.NormStart + 1
            
        End If
        
            
        ' Now check if including the run pushes start out of bounds
        If ipSER.Run < 0 Then
            ipSER.NormEnd = ipSER.NormStart
            
            If ipSER.NormStart + ipSER.Run + 1 < ipSER.NormFirst Then
            
                ipSER.NormStart = ipSER.NormFirst
                ipSER.Run = ipSER.NormEnd - -ipSER.NormFirst + 1
            
            
                
            Else 'ipSER.NormStart + ipSER.Run > ipSER.NormLast Then
                ' run still <0
                ipSER.NormStart = ipSER.NormStart + ipSER.Run + 1
                ipSER.Run = ipSER.NormEnd - ipSER.NormStart + 1
                
            
            End If
            
        Else
        	'run is now >0
            If ipSER.NormStart + ipSER.Run > ipSER.NormLast Then
            	
                ipSER.NormEnd = ipSER.NormLast
                ipSER.Run = ipSER.NormEnd - ipSER.NormStart + 1
                
            Else
            
                ipSER.NormEnd = ipSER.NormStart + ipSER.Run - 1
            End If
            
            
        End If
        

    End Sub
    
    

    Friend Sub resolveSEM(ByRef ipSER As SER)

        'we only have norm start and end
        'enforce normstart withing bounds
        'ensure start is within bounds
        EnsureInitialNormStartIsWithinBounds ipSER
        
        If ipSER.IsInvalid Then
            Exit Sub
        End If
     
        'ensure that normend Is withing bounds
         EnsureInitialNormEndIsWithinBounds ipSER
         
         If ipSER.IsInvalid Then
            Exit Sub
        End If
        
        
        
        If ipSER.NormStart < 0 Then
        
            ipSER.NormStart = ipSER.NormLast + ipSER.NormStart + 1
        
        End If
        
        If ipSER.NormEnd < 0 Then
            
            ipSER.NormEnd = ipSER.NormLast + ipSER.NormEnd + 1
            
        End If
        
        'check if start < end
        If ipSER.NormStart > ipSER.NormEnd Then
        
            Dim myTmp As Long = ipSER.NormStart
            ipSER.NormStart = ipSER.NormEnd
            ipSER.NormEnd = myTmp
            
        End If
        
        ipSER.Run = ipSER.NormEnd - ipSER.NormStart + 1
        
    End Sub


    Private Sub ResolveMER(ByRef ipSER As SER)
        
        'We have NormEnd and NormRun
        ' run is always measure from normstart
         'ensure that normend Is withing bounds
        EnsureInitialNormEndIsWithinBounds ipSER
        
        If ipSER.IsInvalid Then
            Exit Sub
        End If
        
            ' check that run does not exceed size
        EnsureInitialRunIsWithinBounds ipSER
        
        If ipSER.IsInvalid Then
            Exit Sub
        End If
        
        ' first ensure normend is positive
        If ipSER.NormEnd < 0 Then
        
            ipSER.NormEnd = ipSER.NormLast + ipSER.NormEnd + 1
            
        End If
            
        
        If ipSER.Run < 0 Then
        	
            If ipSER.NormEnd + ipSER.Run - 1 < ipSER.NormFirst Then
            
                ipSER.NormStart = ipSER.NormFirst
                ipSER.Run = ipSER.NormEnd - ipSER.NormStart + 1
            
            Else
            
                ipSER.NormStart = ipSER.NormEnd - ipSER.Run + 1
            
            End If
            
        Else
            ' run is now >0
            If ipSER.NormEnd - ipSER.Run + 1 < ipSER.NormFirst Then
            
                ipSER.NormStart = ipSER.NormFirst
                ipSER.Run = ipSER.NormEnd - ipSER.NormEnd - ipSER.NormStart + 1
            Else
                ipSER.NormStart = ipSER.NormEnd - ipSER.Run + 1
            
            End If
            
        End If
        
    End Sub
    
    
    Private Sub EnsureInitialNormStartIsWithinBounds(ByRef ipSer As SER)
    
        If VBA.Abs(ipSer.NormStart) >= ipSer.NormLast Then
            ipSer.SetInvalid enums.Alert.Ord(alOutsideBounds), "Start"
        End If
        '    ipSer.NormStart = VBA.Sgn(ipSer.NormStart) * ipSer.NormLast
        ' we use elseif to ignore the = condition
        ' ElseIf ipSer.NormStart < ipSer.NormFirst Then
        ' 	ipSer.NormStart = ipSer.NormFirst
        'End If
        
    End Sub
    
    Private Sub EnsureInitialNormEndIsWithinBounds(ByRef ipSer As SER)
    
        If VBA.Abs(ipSer.NormEnd) > ipSer.NormLast Then
            ipSer.SetInvalid enums.Alert.Ord(alOutsideBounds), "End"
        End If
        
           ' ipSer.NormEnd = VBA.Sgn(ipSer.NormEnd) * ipSer.NormLast
        ' we use elseif to ignore the = conditon
    '    SERseIf ipSer.NormEnd > ipSer.NormLast Then
    '     	ipSer.NormEnd = ipSer.NormLast
     '   End If
        
    End Sub
    
    Private Sub EnsureInitialRunIsWithinBounds(ByRef ipSer As SER)
    
        If VBA.Abs(ipSer.Run) > ipSer.Size Then
            ipSer.SetInvalid enums.Alert.Ord(alOutsideBounds), "Run"
        End If
        
    End Sub
    
End Class
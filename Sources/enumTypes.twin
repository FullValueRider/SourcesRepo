Class enumTypes

    Attribute VB_Name = "enumTypes"
    Attribute VB_GlobalNameSpace = False
    Attribute VB_Creatable = True
    Attribute VB_PredeclaredId = True
    Attribute VB_Exposed = True
    '@IgnoreModule UntypedFunctionUsage, FunctionReturnValueDiscarded
    '@Exposed
    '@PredeclaredId
    Option Explicit


    Private Const MY_NAME               As String = "enumTypes"


    Public Enum vt__VARENUM
    ' VARENUM is preallocated by COM
    ' This library provides Ids for all types through the TYpeId enumeration below
    ' TypeId and VARENUM are the same for all VBA Types that have a VarType

    ' enumeration of the types that can be managed by a variant
    'only a small subsection of these types are available in VBA.
    ' https://docp.microsoft.com/en-us/windows/win32/api/wtypes/ne-wtypes-varenum
    ' better explanations at
    ' https://docp.microsoft.com/en-us/openspecs/windows_protocols/ms-oaut/3fe7db9f-5803-4dc4-9d14-5425d3f5461f
        VT_EMPTY = 0                 ' Not specified.
        VT_NULLV = 1                 ' Null.
        VT_I2 = 2                    ' A 2-byte integer.
        VT_I4 = 3                    ' A 4-byte integer.
        VT_R4 = 4                    ' A 4-byte real.
        VT_R8 = 5                    ' An 8-byte real.
        VT_CY = 6                    ' Currency.
        VT_DATE = 7                  ' A date.
        VT_BSTR = 8                  ' A string.
        VT_DISPATCH = 9              ' An IDispatch pointer.
        VT_ERROR = 10                ' An SCODE value.
        VT_BOOL = 11                 ' A Boolean value. True is -1 and false is 0.
        VT_VARIANT = 12              ' A variant pointer.
        VT_UNKNOWN = 13              ' An IUnknown pointer.
        VT_DECIMAL = 14              ' A 16-byte fixed-pointer value.
        VT_I1 = 16                   ' A character.
        VT_UI1 = 17                  ' An unsigned character.
        VT_UI2 = 18                  ' An unsigned short.
        VT_UI4 = 19                  ' An unsigned long.
        VT_I8 = 20                   ' A 64-bit integer.
        VT_UI8 = 21                  ' A 64-bit unsigned integer.
        VT_INT = 22                  ' An integer.
        VT_UINT = 23                 ' An unsigned integer.
        VT_VOID = 24                 ' A C-style void.
        VT_HRESULT = 25              ' An HRESULT value.
        VT_PTR = 26                  ' A pointer type.
        VT_SAFEARRAY = 27            ' A safe array. Use VT_ARRAY in VARIANT.
        VT_CARRAY = 28               ' A C-style array.
        VT_USERDEFINED = 29          ' A user-defined type.
        VT_LPSTR = 30                ' A null-terminated string.
        VT_LPWSTR = 31               ' A wide null-terminated string.
        VT_RECORD = 36               ' A user-defined type.
        VT_INT_PTR = 37              ' A signed machine register size width.
        VT_UINT_PTR = 38             ' An unsigned machine register size width.
        VT_FILETIME = 64             ' A FILETIME value.
        VT_BLOB = 65                 ' Length -prefixed bytep.
        VT_STREAM = 66               ' The name of the stream followp.
        VT_STORAGE = 67              ' The name of the storage followp.
        VT_STREAMED_OBJECT = 68      ' The stream contains an object.
        VT_STORED_OBJECT = 69        ' The storage contains an object.
        VT_BLOB_OBJECT = 70          ' The blob contains an object.
        VT_CFValue = 71              ' A clipboard format.
        VT_CLSID = 72                ' A class ID
        VT_VERSIONED_STREAM = 73     ' A stream with a GUID version.
        VT_BSTR_BLOB = &HFFF         ' Reserved.
        VT_VECTOR = &H1000           ' A simple counted array.
        VT_ARRAY = &H2000            ' A SAFEARRAY pointer.
        VT_BYREF = &H4000            ' A void pointer for local use.
        VT_RESERVED = &H8000
        VT_ILLEGAL = &HFFFF
        VT_ILLEGALMASKED = &HFFF
        VT_TYPEMASK = &HFFF
        
    End Enum

    

    Public Enum ti__TypeId
        
        ' ti_TypeId is a true enumeration used to replace VARENUM for testing of types and type groups
        ' vt_VARENUM should be restricted to determining the content of a Variant
         ti_NoType = -1
         ti_Empty = 0                 ' VT_EMPTY = 0                 ' Not specified.
         ti_Null                      ' VT_NULLV = 1                 ' Null.
         ti_Integer                   ' VT_I2 = 2                    ' A 2-byte integer.
         ti_Long                      ' VT_I4 = 3                    ' A 4-byte integer.
         ti_Single                    ' VT_R4 = 4                    ' A 4-byte real.
         ti_Double                    ' VT_R8 = 5                    ' An 8-byte real.
         ti_Currency                  ' VT_CY = 6                    ' Currency.
         ti_Date                      ' VT_DATE = 7                  ' A date.
         ti_String                    ' VT_BSTR = 8                  ' A string.
         ti_IDispatchPtr              ' VT_DISPATCH = 9              ' An  ti_ispatch pointer.
        
         ti_Object = ti_IDispatchPtr
         ti_Error                     ' VT_ERROR = 10                ' An SCODE value.
         ti_Boolean                   ' VT_BOOL = 11                 ' A Boolean value. True is -1 and false is 0.
         ti_Variant                   ' VT_VARIANT = 12              ' A variant pointer.
         ti_IUnKnownPtr                ' VT_UNKNOWN = 13              ' An IUnknown pointer.
        
         ti_Unknown = ti_IUnKnownPtr
         ti_DataObject = ti_IUnknownPtr
         ti_Decimal                   ' VT_DECIMAL = 14              ' A 16-byte fixed-pointer value.
                                    ' No 15?
                                    
         ti_Char = 16                   ' VT_I1 = 16                   ' A character.
         ti_UChar                     ' VT_UI1 = 17                  ' An unsigned character.
         ti_Byte = ti_UChar
         ti_UInteger                  ' VT_UI2 = 18                  ' An unsigned short.
         ti_ULong                     ' VT_UI4 = 19                  ' An unsigned long.
         ti_LongLong                  ' VT_I8 = 20                   ' A 64-bit integer.
         ti_LongPtr = ti_LongLong
         ti_ULongLong                 ' VT_UI8 = 21                  ' A 64-bit unsigned integer.
         ti_SystemInteger             ' VT_INT = 22                  ' An integer.
         ti_SystemUInteger            ' VT_UINT = 23                 ' An unsigned integer.
         ti_CStyleVoid                ' VT_VOID = 24                 ' A C-style void.
         ti_HResult                   ' VT_HRESULT = 25              ' An HRESULT value.
         ti_Pointer                   ' VT_PTR = 26                  ' A pointer type.
         ti_SafeArray                 ' VT_SAFEARRAY = 27            ' A safe array. Use VT_ARRAY in VARIANT.
         ti_CArray                    ' VT_CARRAY = 28               ' A C-style array.
         ti_UserDefined               ' VT_USERDEFINED = 29          ' A user-defined type.
         ti_CString                   ' VT_LPSTR = 30                ' A null-terminated string.
         ti_WideCString               ' VT_LPWSTR = 31               ' A wide null-terminated string.
         ti_Record                    ' VT_RECORD = 36               ' A user-defined type.
         ti_UserDefinedType = ti_Record
         ti_SystemPointer             ' VT_INT_PTR = 37              ' A signed machine register size width.
         ti_SystemUPointer            ' VT_UINT_PTR = 38             ' An unsigned machine register size width.
        
         ti_FileTime = 64             ' VT_FILETIME = 64             ' A FILETIME value.
         ti_Blob                      ' VT_BLOB = 65                 ' Length -prefixed bytep.
         ti_StreamNameFlag            ' VT_STREAM = 66               ' The name of the stream followp.
         ti_StoragNameFlag            ' VT_STORAGE = 67              ' The name of the storage followp.
         ti_SteamObject               ' VT_STREAMED_OBJECT = 68      ' The stream contains an object.
         ti_StoredObject              ' VT_STORED_OBJECT = 69        ' The storage contains an object.
         ti_BlobObject                ' VT_BLOB_OBJECT = 70          ' The blob contains an object.
         ti_ClipBoardFormat           ' VT_CFValue = 71              ' A clipboard format.
         ti_ClassId                   ' VT_CLSID = 72                ' A class  ti_.
         ti_GuidStream                ' VT_VERSIONED_STREAM = 73     ' A stream with a GUID version.
        
         ti_BStrBlob = &HFFF          ' VT_BSTR_BLOB = &HFFF         ' Reserved.
         ti_Vector = &H1000           ' VT_VECTOR = &H1000           ' A simple counted array.
         ti_SafeArrayPointer = &H2000 ' VT_ARRAY = &H2000            ' A SAFEARRAY pointer.
         ti_Array = ti_SafeArrayPointer
         ti_LocalVoidPointer = &H4000 ' VT_BYREF = &H4000            ' A void pointer for local use.
         ti_Reserved = &H8000         ' VT_RESERVED = &H8000
         ti_Illegal = &HFFFF          ' VT_ILLEGAL = &HFFFF
         ti_IllegalMasked = &HFFF     ' VT_ILLEGALMASKED = &HFFF
         ti_TypeMask = &HFFF          ' VT_TYPEMASK = &HFFF
        
        ' User types should go here in strict alphabetical order
        ' start at &H100
        
       
       'array subtypes
         ti_ListArray
         ti_TableArray
         ti_MathArray

        'User defined types
         ti_ArrayList
         ti_cHashD
         ti_cHashD2
         ti_Collection
         ti_Dictionary
         ti_Extent
         ti_KvpC
         ti_KvpH
         ti_KvpS
         ti_IterArray
         ti_IterConst
         ti_IterItems
         ti_IterNum
         ti_IterStrings
       
         ti_EnumMessage
         ti_EnumPreset
         ti_EnumTypes
    
         ti_KVPair
         ti_Meta
         ti_Nothing ' vartype of nothing is 9 (same as Object) but we want to specifically  ti_entify nothing
         ti_ItemObject
        
         ti_Queue
         ti_Rank
         ti_Seq                 ' &H100
         ti_ScriptingDictionary
         ti_Span
      '   ti_SeqIterator
         ti_Stack
         ti_wCollection
        ' ' type groups go here in strict alphabetical order
        ' ' start at &H800
        
      ' Grouped Types
         ti_Number
         ti_Primitive
         ti_Admin
        
         ti_ItemByIndex0
         ti_ItemByIndex1
         ti_ItemByKey
         ti_ItemByToArray
        
         ti_WrappedEnum
        
        
        
        
    End Enum


    Private Type Properties

        TypeIdToValue                           As KvpH
        TypeIdToName                            As KvpH
        TypeIdToIdName                          As KvpH
        TypeNameToTypeId                        As KvpH
        
    End Type


    Private p                                   As Properties


    Private Sub Class_Initialize()

        If Not Me Is enumTypes Then
        
            Err.Raise _
                vbObjectError + 17, _
                "twLib.EnumTypes.Class_Initialize", _
                "New on class enumTypes is disallowed"
                
        End If
        
        SetupDictionaries
        
    End Sub



        
    Public Sub SetupDictionaries()


        ' Values associated with the enumeration member may be defined at runtime
        Set p.TypeIdToValue = KvpH.Deb
        
        With p.TypeIdToValue
            
            .Add ti_Empty, VT_EMPTY                              ' Not specified.
            .Add ti_Null, VT_NULLV                               ' Null.
            .Add ti_Integer, VT_I2                               ' A 2-byte integer.
            .Add ti_Long, VT_I4                                  ' A 4-byte integer.
            .Add ti_Single, VT_R4                                ' A 4-byte real.
            .Add ti_Double, VT_R8                                ' An 8-byte real.
            .Add ti_Currency, VT_CY                              ' Currency.
            .Add ti_Date, VT_DATE                                ' A date.
            .Add ti_String, VT_BSTR                              ' A string.
            .Add ti_IDispatchPtr, VT_DISPATCH                    ' An  ti_ispatch pointer.
            .Add ti_Object, VT_DISPATCH
            .Add ti_Error, VT_ERROR                              ' An SCODE value.
            .Add ti_Boolean, VT_BOOL                             ' A Boolean value. True is -1 and false is 0.
            .Add ti_Variant, VT_VARIANT                          ' A variant pointer.
            .Add ti_IUnKnownPtr, VT_UNKNOWN                      ' An IUnknown pointer.
            .Add ti_Decimal, VT_DECIMAL                          ' A 16-byte fixed-pointer value.
            .Add ti_Char, VT_I1                                  ' A character.
            .Add ti_UChar, VT_UI1                                ' An unsigned character.
            .Add ti_UInteger, VT_UI2                             ' An unsigned short.
            .Add ti_ULong, VT_UI4                                ' An unsigned long.
            .Add ti_LongLong, VT_I8                              ' A 64-bit integer.
            .Add ti_LongPtr, VT_I8
            .Add ti_ULongLong, VT_UI8                            ' A 64-bit unsigned integer.
            .Add ti_SystemInteger, VT_INT                        ' An integer.
            .Add ti_SystemUInteger, VT_UINT                      ' An unsigned integer.
            .Add ti_CStyleVoid, VT_VOID                          ' A C-style void.
            .Add ti_HResult, VT_HRESULT                          ' An HRESULT value.
            .Add ti_Pointer, VT_PTR                              ' A pointer type.
            .Add ti_SafeArray, VT_SAFEARRAY                      ' A safe array. Use VT_ARRAY in VARIANT.
            .Add ti_CArray, VT_CARRAY                            ' A C-style array.
            .Add ti_UserDefined, VT_USERDEFINED                  ' A user-defined type.
            .Add ti_CString, VT_LPSTR                            ' A null-terminated string.
            .Add ti_WideCString, VT_LPWSTR                       ' A wide null-terminated string.
            .Add ti_Record, VT_RECORD                            ' VBA user-defined type.
            .Add ti_SystemPointer, VT_INT_PTR                    ' A signed machine register size width.
            .Add ti_SystemUPointer, VT_UINT_PTR                  ' An unsigned machine register size width.
            .Add ti_FileTime, VT_FILETIME                        ' A FILETIME value.
            .Add ti_Blob, VT_BLOB                                ' Length -prefixed bytep.
            .Add ti_StreamNameFlag, VT_STREAM                    ' The name of the stream followp.
            .Add ti_StoragNameFlag, VT_STORAGE                   ' The name of the storage followp.
            .Add ti_SteamObject, VT_STREAMED_OBJECT              ' The stream contains an object.
            .Add ti_StoredObject, VT_STORED_OBJECT               ' The storage contains an object.
            .Add ti_BlobObject, VT_BLOB_OBJECT                   ' The blob contains an object.
            .Add ti_ClipBoardFormat, VT_CFValue                  ' A clipboard format.
            .Add ti_ClassId, VT_CLSID                            ' A class  ti_.
            .Add ti_GuidStream, VT_VERSIONED_STREAM              ' A stream with a GUID version.
            .Add ti_BStrBlob, VT_BSTR_BLOB                       ' Reserved.
            .Add ti_Vector, VT_VECTOR                            ' A simple counted array.
            .Add ti_SafeArrayPointer, VT_ARRAY                   ' A SAFEARRAY pointer.
            .Add ti_LocalVoidPointer, VT_BYREF                   ' A void pointer for local use.
            .Add ti_Reserved, VT_RESERVED
            .Add ti_Illegal, VT_ILLEGAL
            .Add ti_IllegalMasked, VT_ILLEGALMASKED
            .Add ti_TypeMask, VT_TYPEMASK

        ' User types should go here in strict alphabetical order
        ' start at &H100
        
            .Add ti_ListArray, NextOrd(&H100)
            .Add ti_TableArray, NextOrd
            .Add ti_MathArray, NextOrd
            
            .Add ti_ArrayList, NextOrd
            .Add ti_Collection, NextOrd
            .Add ti_Dictionary, NextOrd
            .Add ti_Extent, NextOrd
            .Add ti_cHashD, NextOrd
            .Add ti_cHashD2, NextOrd
            .Add ti_KvpC, NextOrd
            .Add ti_KvpH, NextOrd
            .Add ti_KvpS, NextOrd
            .Add ti_IterArray, NextOrd
            .Add ti_IterConst, NextOrd
            .Add ti_IterItems, NextOrd
            .Add ti_IterNum, NextOrd
            .Add ti_IterStrings, NextOrd
        
            .Add ti_KVPair, NextOrd
            .Add ti_Nothing, NextOrd
            .Add ti_ItemObject, NextOrd
            .Add ti_Meta, NextOrd
            .Add ti_Queue, NextOrd
            .Add ti_Rank, NextOrd
            .Add ti_Seq, NextOrd
            .Add ti_Span, NextOrd
            .Add ti_Stack, NextOrd
     
            .Add ti_ScriptingDictionary, NextOrd
            .Add ti_wCollection, NextOrd
        ' type groups go here in strict alphaabetical order
        ' start at &H800
           
            
        '    .Add  ti_ItemByForEachObject, myIterator.Nxt
            .Add ti_ItemByIndex0, NextOrd
            .Add ti_ItemByIndex1, NextOrd
            .Add ti_ItemByKey, NextOrd
            .Add ti_ItemByToArray, NextOrd
            .Add ti_WrappedEnum, NextOrd
            
            .Add ti_EnumMessage, NextOrd(&H800)
            .Add ti_EnumPreset, NextOrd
            .Add ti_EnumTypes, NextOrd
    '
        End With
            
        Set p.TypeIdToIdName = KvpH.Deb
        With p.TypeIdToIdName
            
            .Add ti_Empty, "ti_empty"                           ' Not specified.
            .Add ti_Null, "ti_null"                             ' Null.
            .Add ti_Integer, "ti_integer"                       ' A 2-byte integer.
            .Add ti_Long, "ti_long"                             ' A 4-byte integer.
            .Add ti_Single, "ti_single"                         ' A 4-byte real.
            .Add ti_Double, "ti_double"                         ' An 8-byte real.
            .Add ti_Currency, "ti_currency"                     ' Currency.
            .Add ti_Date, "ti_date"                             ' A date.
            .Add ti_String, "ti_string"                         ' A string.
            .Add ti_IDispatchPtr, "ti_idispatchptr"             ' An  idispatch pointer.
            .Add ti_Error, "ti_error"                           ' An SCODE value.
            .Add ti_Boolean, "ti_boolean"                       ' A Boolean value. True is -1 and false is 0.
            .Add ti_Variant, "ti_variant"                       ' A variant pointer.
            .Add ti_IUnKnownPtr, "ti_iuknownptr"                ' An IUnknown pointer.
            .Add ti_Decimal, "ti_decimal"                       ' A 16-byte fixed-pointer value.
            .Add ti_Char, "ti_char"                             ' A character.
            .Add ti_UChar, "ti_uchar"                           ' An unsigned character.
            .Add ti_UInteger, "ti_uinteger"                     ' An unsigned short.
            .Add ti_ULong, "ti_ulong"                           ' An unsigned long.
            .Add ti_LongLong, "ti_longlong"                     ' A 64-bit integer.
            .Add ti_LongPtr, "ti_longptr"
            .Add ti_ULongLong, "ti_ulonglong"                   ' A 64-bit unsigned integer.
            .Add ti_SystemInteger, "ti_systeminteger"           ' An integer.
            .Add ti_SystemUInteger, "ti_systemuinteger"         ' An unsigned integer.
            .Add ti_CStyleVoid, "ti_cstylevoid"                 ' A C-style void.
            .Add ti_HResult, "ti_hresult"                       ' An HRESULT value.
            .Add ti_Pointer, "ti_pointer"                       ' A pointer type.
            .Add ti_SafeArray, "ti_safearray"                   ' A safe array. Use VT_ARRAY in VARIANT.
            .Add ti_CArray, "ti_carray"                         ' A C-style array.
            .Add ti_UserDefined, "ti_userdefined"               ' A user-defined type.
            .Add ti_CString, "ti_cstring"                       ' A null-terminated string.
            .Add ti_WideCString, "ti_widecstring"               ' A wide null-terminated string.
            .Add ti_Record, "ti_vbaserdefinedtype"              ' A user-defined type.
            .Add ti_SystemPointer, "ti_systempointer"           ' A signed machine register size width.
            .Add ti_SystemUPointer, "ti_systemupointer"         ' An unsigned machine register size width.
            .Add ti_FileTime, "dfiletime "                      ' A FILETIME value.
            .Add ti_Blob, "ti_blob"                             ' Length -prefixed bytep.
            .Add ti_StreamNameFlag, "ti_streamnameflag"         ' The name of the stream followp.
            .Add ti_StoragNameFlag, "ti_storagnameflag"         ' The name of the storage followp.
            .Add ti_SteamObject, "ti_steamobject"               ' The stream contains an object.
            .Add ti_StoredObject, "ti_storedobject"             ' The storage contains an object.
            .Add ti_BlobObject, "ti_blobobject"                 ' The blob contains an object.
            .Add ti_ClipBoardFormat, "ti_clipboardformat"       ' A clipboard format.
            .Add ti_ClassId, "ti_classid"                       ' A class id.
            .Add ti_GuidStream, "ti_guidstream"                 ' A stream with a GUID version.
            .Add ti_BStrBlob, "ti_bstrblob"                     ' Reserved.
            .Add ti_Vector, "ti_vector"                         ' A simple counted array.
            .Add ti_SafeArrayPointer, "ti_safeAaraypointer"     ' A SAFEARRAY pointer.
            .Add ti_LocalVoidPointer, "ti_localvoidpointer"     ' A void pointer for local use.
            .Add ti_Reserved, "ti_reserved"
            .Add ti_Illegal, "ti_illegal"
            .Add ti_IllegalMasked, "ti_illegalmasked"
            .Add ti_TypeMask, "ti_typemask"

        ' User types should go here in strict alphabetical order
        ' start at &H100
            
           
            .Add ti_ListArray, "ti_listarray"
            .Add ti_TableArray, "ti_tablearray"
            .Add ti_MathArray, "ti_matharray"
            
            .Add ti_ArrayList, "ti_arraylist"
            .Add ti_cHashD, "ti_chashd"
            .Add ti_cHashD2, "ti_chashd2"
            .Add ti_Collection, "ti_collection"
            .Add ti_Dictionary, "ti_dictionary"
            .Add ti_Extent, "ti_extent"
            .Add ti_KvpC, "ti_kvpc"
            .Add ti_KvpH, "ti_kvpc"
            .Add ti_KvpS, "ti_kvps"
            
            .Add ti_IterArray, "ti_iterarray"
            .Add ti_IterConst, "ti_iterconst"
            .Add ti_IterItems, "ti_iteritems"
            .Add ti_IterNum, "ti_iternum"
            .Add ti_IterStrings, "ti_iterstrings"
            .Add ti_KVPair, "ti_kvPair"
            .Add ti_Meta, "ti_meta"
            .Add ti_Nothing, "ti_nothing"

            .Add ti_Queue, "ti_queue"
            .Add ti_Seq, "ti_seq"
            .Add ti_Span, "ti_span"
            .Add ti_Stack, "ti_stack"
            .Add ti_ScriptingDictionary, "ti_scriptingdictionary"
            .Add ti_wCollection, "ti_wCollection"
        ' ' type groups go here in strict alphaabetical order
        '     .Add  ti_ItemByForEachObject, "ti_ItemByForEachObject"
            .Add ti_ItemByIndex0, "ti_ItemIndex0"
            .Add ti_ItemByIndex1, "ti_ItemIndex1"
            .Add ti_ItemByKey, "ti_ItemByKey"
            .Add ti_ItemByToArray, "ti_ItemByToArray"
            .Add ti_WrappedEnum, "ti_WrappedEnum"
            
            .Add ti_EnumMessage, "ti_enummessage"
            .Add ti_EnumPreset, "ti_enumpreset"
            .Add ti_EnumTypes, "ti_enumtypes"
            
        End With
        
        Set p.TypeIdToName = KvpH.Deb
        With p.TypeIdToName
            
            .Add ti_Empty, VBA.LCase("Empty")                                    ' Not specified.
            .Add ti_Null, VBA.LCase("Null")                                      ' Null.
            .Add ti_Integer, VBA.LCase("Integer")                                ' A 2-byte integer.
            .Add ti_Long, VBA.LCase("Long")                                      ' A 4-byte integer.
            .Add ti_Single, VBA.LCase("Single")                                  ' A 4-byte real.
            .Add ti_Double, VBA.LCase("Double")                                  ' An 8-byte real.
            .Add ti_Currency, VBA.LCase("Currency")                              ' Currency.
            .Add ti_Date, VBA.LCase("Date")                                      ' A date.
            .Add ti_String, VBA.LCase("String")                                  ' A string.
            .Add ti_IDispatchPtr, VBA.LCase("IDespatchPtr")                      ' An  IDispatch pointer.
            .Add ti_Error, VBA.LCase("Error")                                     ' An SCODE value.
            .Add ti_Boolean, VBA.LCase("Boolean")                                ' A Boolean value. True is -1 and false is 0.
            .Add ti_Variant, VBA.LCase("Variant")                                ' A variant pointer.
            .Add ti_IUnKnownPtr, VBA.LCase("IUknownPtr")                         ' An IUnknown pointer.
            .Add ti_Decimal, VBA.LCase("Decimal")                                ' A 16-byte fixed-pointer value.
            .Add ti_Char, VBA.LCase("Char")                                      ' A character.
            .Add ti_UChar, VBA.LCase("UChar")                                    ' An unsigned character.
            .Add ti_UInteger, VBA.LCase("UInteger")                              ' An unsigned short.
            .Add ti_ULong, VBA.LCase("ULong")                                    ' An unsigned long.
            .Add ti_LongLong, VBA.LCase("LongLong")                              ' A 64-bit integer.
            .Add ti_LongPtr, VBA.LCase("LongPtr")
            .Add ti_ULongLong, VBA.LCase("ULongLong")                            ' A 64-bit unsigned integer.
            .Add ti_SystemInteger, VBA.LCase("SystemInteger")                    ' An integer.
            .Add ti_SystemUInteger, VBA.LCase("SystemUInteger")                  ' An unsigned integer.
            .Add ti_CStyleVoid, VBA.LCase("CStyleVoid")                          ' A C-style void.
            .Add ti_HResult, VBA.LCase("HResult")                                ' An HRESULT value.
            .Add ti_Pointer, VBA.LCase("Pointer")                                ' A pointer type.
            .Add ti_SafeArray, VBA.LCase("SafeArray")                            ' A safe array. Use VT_ARRAY in VARIANT.
            .Add ti_CArray, VBA.LCase("CArray")                                  ' A C-style array.
            .Add ti_UserDefined, VBA.LCase("UserDefined")                        ' A user-defined type.
            .Add ti_CString, VBA.LCase("CString")                                ' A null-terminated string.
            .Add ti_WideCString, VBA.LCase("WideCString")                        ' A wide null-terminated string.
            .Add ti_Record, VBA.LCase("VBAUserDefinedType")                      ' A user-defined type.
            .Add ti_SystemPointer, VBA.LCase("SystemPointer")                    ' A signed machine register size width.
            .Add ti_SystemUPointer, VBA.LCase("SystemUPointer")                  ' An unsigned machine register size width.
            .Add ti_FileTime, VBA.LCase("FileTime ")                             ' A FILETIME value.
            .Add ti_Blob, VBA.LCase("Blob")                                      ' Length -prefixed bytep.
            .Add ti_StreamNameFlag, VBA.LCase("StreamNameFlag")                  ' The name of the stream followp.
            .Add ti_StoragNameFlag, VBA.LCase("StoragNameFlag")                  ' The name of the storage followp.
            .Add ti_SteamObject, VBA.LCase("SteamObject")                        ' The stream contains an object.
            .Add ti_StoredObject, VBA.LCase("StoredObject")                      ' The storage contains an object.
            .Add ti_BlobObject, VBA.LCase("BlobObject")                          ' The blob contains an object.
            .Add ti_ClipBoardFormat, VBA.LCase("ClipBoardFormat")                ' A clipboard format.
            .Add ti_ClassId, VBA.LCase("ClassId")                                ' A class  ti_.
            .Add ti_GuidStream, VBA.LCase("GuidStream")                          ' A stream with a GUID version.
            .Add ti_BStrBlob, VBA.LCase("BStrBlob")                              ' Reserved.
            .Add ti_Vector, VBA.LCase("Vector")                                  ' A simple counted array.
            .Add ti_SafeArrayPointer, VBA.LCase("SafeArrayPointer")              ' A SAFEARRAY pointer.
            .Add ti_LocalVoidPointer, VBA.LCase("LocalVoidPointer")              ' A void pointer for local use.
            .Add ti_Reserved, VBA.LCase("Reserved")
            .Add ti_Illegal, VBA.LCase("Illegal")
            .Add ti_IllegalMasked, VBA.LCase("IllegalMasked")
            .Add ti_TypeMask, VBA.LCase("TypeMask")


            .Add ti_ListArray, "listarray"
            .Add ti_TableArray, "tablearray"
            .Add ti_MathArray, "matharray"
            
            .Add ti_ArrayList, "arraylist"
            .Add ti_cHashD, "chashd"
            .Add ti_cHashD2, "chashd2"
            .Add ti_Collection, "collection"
            .Add ti_Dictionary, "dictionary"
            .Add ti_Extent, "extent"
            .Add ti_KvpC, "kvpc"
            .Add ti_KvpH, "kvph"
            .Add ti_KvpS, "kvps"
            .Add ti_IterArray, "iterarray"
            .Add ti_IterConst, "iterconst"
            .Add ti_IterItems, "iteritems"
            .Add ti_IterNum, "iternum"
            .Add ti_IterStrings, "iterstrings"
            .Add ti_KVPair, "kvPair"
            .Add ti_Meta, "meta"
            .Add ti_Nothing, "nothing"
            .Add ti_ItemObject, "itemobject"

            .Add ti_Queue, "queue"
     '      
            .Add ti_Seq, "seq"
            .Add ti_Stack, "stack"
            .Add ti_ScriptingDictionary, "dictionary"
            .Add ti_wCollection, "wcollection"
        ' ' type groups go here in strict alphaabetical order
            .Add ti_ItemByIndex0, "itembyindex0"
            .Add ti_ItemByIndex0, "itembyindex1"
            .Add ti_ItemByKey, "itembykey"
            .Add ti_ItemByToArray, "itembytoarray"
            .Add ti_WrappedEnum, "wrappedenum"
            
            .Add ti_EnumMessage, "enummessage"
            .Add ti_EnumPreset, "enumpreset"
            .Add ti_EnumTypes, "enumtypes"
            
        End With
        
        ' also compile the reverse lookup
        Set p.TypeNameToTypeId = KvpH.Deb
        Dim myItem As Variant
        Dim myPairs() As Variant
        myPairs = p.TypeIdToIdName.Pairs
        For Each myItem In myPairs
            p.TypeNameToTypeId.Add myItem(1), myItem(0)
        Next
        
            
    End Sub


    Private Sub ValidateOrdinal(ByVal ipTypesOrd As ti__TypeId)
    
        If p.TypeIdToValue.LacksItem(ipTypesOrd) Then
            
            Err.Raise _
                17 + vbObjectError, _
                "No such member", _
                "The enumeration member does not exist"
                
                
            Exit Sub
        End If
    End Sub


    Public Function IdToIdName() As KvpH
        Return p.TypeIdToIdName
    End Function

    Public Function TypeIdToValue() As KvpH
        Return p.TypeIdToValue
    End Function

    Public Function IdToName() As KvpH
        Return p.TypeIdToValue
    End Function

    '@Description("Returns the Typename to Ord dictionary")
    Public Function TypeNameToId() As KvpH
        Return p.TypeNameToTypeId
    End Function

   
    '@Description("Returns the value of a TypeOrd member. for VBA types, the value returned is the same value as returned by vartype")
    Public Property Get Value(ByVal ipTypeOrd As ti__TypeId) As VbVarType
    Attribute Value.VB_UserMemId = 0
        
        ValidateOrdinal ipTypeOrd
        Return p.TypeIdToValue.Item(ipTypeOrd)

    End Property

    '@Description("True is tthe value is equvalent to a TypeOrd member")
    Public Property Get HoldsOrd(ByVal ipTypeOrd As ti__TypeId) As Boolean
        HoldsOrd = p.TypeIdToValue.HoldsKey(ipTypeOrd)
    End Property

    '@Description("True is the value is not equivalent to a TypeOrd member")
    Public Property Get LacksOrd(ByVal ipTypeOrd As ti__TypeId) As Boolean
        LacksOrd = p.TypeIdToValue.LacksKey(ipTypeOrd)
    End Property


    Public Property Get Name() As String
        Name = MY_NAME
    End Property


    Public Property Get Count() As Long
        Count = p.TypeIdToValue.Count
    End Property

    Private Function NextOrd(Optional ByVal ipBase As Variant) As Long

        Static myBase As Long
        If Not VBA.IsMissing(ipBase) Then

            myBase = ipBase
            Return myBase


        End If

        myBase += 1
        Return myBase

    End Function

End Class
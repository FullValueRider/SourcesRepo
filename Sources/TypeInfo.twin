Class TypeInfo

    Attribute VB_GlobalNameSpace = False
    Attribute VB_Creatable = True
    Attribute VB_PredeclaredId = True
    Attribute VB_Exposed = True
    Attribute VB_Description = "Provides metadata on Types"
    
    /*
    
    The TypeInfo class provise MetaData regarding Type Information, specifically
    for Groups of Types.
    
    The following Enumerations are used to emulate the values provided by vbVarType
    Data for items prefixed ti_ comes from the enums.Types class.
    */
    
    Option Explicit
    
    Private Const UNDEFINED_GROUP                   As Long = -2
    Private Const ANY_IN_GROUP                      As Long = -1
    
    Private Const TYPE_BOOLEAN                      As String = "boolean"
    Private Const TYPE_STRING                       As String = "string"
    
    
    /*
        This enumeration defines the group types.  
    */
    Public Enum tg__TypeGroup

        tg_Undefined = UNDEFINED_GROUP
        tg_Any = ANY_IN_GROUP
        
        tg_Number
        tg_Boolean
        tg_Primitive
        tg_Admin

        tg_Array
        tg_ItemByIndex
        tg_ItemByKey
        tg_ItemByArray
        
        tg_WrappedEnum
        
        tg_ZeroBased
        tg_OneBased
        
        tg_Iterable
        tg_ObjectItem
        
        tg_Iterator
    
    End Enum
    
    /*
        Numbers are defined as 
        * Types which are not strings, and
        * VBA supports the addition or subtraction of 1
        A charactertistic of a number is that its value
        fits within the data field of the Variant type
    */
    Public Enum nt__NumberType

        nt_Any = ANY_IN_GROUP
        nt_Byte = ti_UChar
        nt_Currency = ti_Currency
        nt_Date = ti_Date
        nt_Decimal = ti_Decimal
        nt_Double = ti_Double
        nt_Integer = ti_Integer
        nt_Long = ti_Long
        nt_LongLong = ti_LongLong
        nt_Longptr = ti_LongPtr
        nt_Single = ti_Single
            
    End Enum
    
    /*
        Primitives are defined as items that are
        * not an object
        * not an AdminType
    */
    Public Enum pt__PrimitiveType

        pt_Any = ANY_IN_GROUP
        pt_Byte = ti_UChar
        pt_Currency = ti_Currency
        pt_Date = ti_Date
        pt_Decimal = ti_Decimal
        pt_Double = ti_Double
        pt_integer = ti_integer
        pt_Long = ti_Long
        pt_LongLong = ti_LongLong
        pt_Longptr = ti_Longptr
        pt_Single = ti_Single
        pt_Boolean = ti_Boolean
        pt_String = ti_String
            
    End Enum
    
    /*
        AdminTypes are those values which don't easily fit
        the definition of a primitive or an object and are generally used
        to cont_rol the flow of code
    */
    Public Enum at__AdminType
        
        at_Any = ANY_IN_GROUP
        at_Empty = ti_Empty
        at_Null = ti_Null
        at_Nothing = ti_Nothing
        at_Unknown = ti_IUnKnownptr
        at_Error = ti_Error
        
    End Enum
    
    
    Public Enum i0__ItemByIndex0Type
    	
        i0_Any = ANY_IN_GROUP
        i0_ArrayList = ti_ArrayList
        
        
    End Enum
    
    Public Enum i1__ItemByIndex1Type
    	
        i1_Any = ANY_IN_GROUP
        i1_Collection = ti_Collection
        i1_Seq = ti_Seq
        i1_wCollection = ti_wCollection
    End Enum
    
    
    Public Enum ik__ItemByKeyType
        
        ik_any = ANY_IN_GROUP
        ik_cHashD = ti_cHashD
        ik_cHashD2 = ti_cHashD2
        ik_KvpC = ti_KvpC
        ik_KvpH = ti_KvpH
        ik_KvpS = ti_KvpS
        ik_Dictionary = ti_Dictionary
        ik_ScriptingDictionary = ti_ScriptingDictionary
        ik_KVPair = ti_KVPair
        
    End Enum
    
    Public Enum ia__ItemByArrayType
    
        ia_any = ANY_IN_GROUP
        ia_Stack = ti_Stack
        ia_Queue = ti_Queue
    
    End Enum
    
    Public Enum we__WrappedEnumType
    
        we_any = ANY_IN_GROUP
        we_Type = ti_EnumTypes
        we_Preset = ti_EnumPreset
        we_Message = ti_EnumMessage
        
    End Enum
    
    ' Public Enum FirstIndexType
    
    '     fiZero = ti_One
    '     fiOne
    '     fia_ny
        
    ' End Enum
    
    Public Enum it__IteratorTYpe
    
        it_any = ANY_IN_GROUP
        it_Array = ti_IterArray
        it_Const = ti_IterConst
        it_Items = ti_iteritems
        it_String = ti_iterStrings
        it_Number = ti_iternum
        
    End Enum
    
    Public Enum zb__ZeroBasedType
    	
        zb_ArrayList = ti_arraylist
        
    End Enum
    
    Public Enum ob__OneBasedType
    
        ob_Collection = ti_collection
        ob_Seq = ti_seq
        ob_wCollection = ti_wCollection
    End Enum
       
    
    /* 
        The following dictionaries are used to hold the typenames of the 
        Type Groups implemented by this class
        We only generate dictionaries where there are multiple types that
        belong to the group.
       
    */
    Private Type State

        
        Number                              As KvpC
        Primitive                           As KvpC
        Admin                               As KvpC

        ItemByIndex0                        As KvpC
        ItemByIndex1                        As KvpC
        ItemByKey                           As KvpC
        ItemByToArray                       As KvpC
       
        WrappedEnum                         As KvpC
        
        Iterator                            As KvpC
        Container                           As KvpC
      
        
    End Type
    
    Private s                   As state
    
      Private Sub Class_Initialize()
        
        If s.Admin Is Nothing Then
            SetupDictionaries
        End If

    End Sub

    Private Sub SetupDictionaries()

        SetupAdmin
        SetupNumber
        SetupPrimitive
        
        SetupItemByIndex0
        SetupItemByIndex1
        SetupItemByArray
        SetupItemByKey
        SetupWrappedEnums
        
      '  SetupZeroBasedEnumerable
      '  SetupOneBasedEnumerable
        
     '   SetupEnumerableObjects
      '  SetupEnumerables
        
       ' SetupStrings
      '  SetupBooleans
       ' SetupObjects

        SetupIterators
        SetupContainers
      '  SetupTypeGroups
        
    End Sub
    
    Private Sub SetupNumber()
       
        Set s.Number = KvpC.Deb
        
        ' Type which are not strings/objects and which support + 1
        With s.Number
        
            .Add "byte", nt_Byte
            .Add "currency", nt_Currency
            .Add "date", nt_Date
            .Add "decimal", nt_Decimal
            .Add "double", nt_Double
            .Add "integer", nt_Integer
            .Add "long", nt_Long
            .Add "longlong", nt_LongLong
            .Add "longptr", nt_Longptr
            .Add "single", nt_Single
            
        End With

    ' Debug.Print "number", s.Number.TestKeys
    End Sub
    
    
    Public Sub SetupPrimitive()

        Set s.Primitive = KvpC.Deb
        
        With s.Primitive
            
            .AddPairs s.Number.Keys, s.Number.Items
            .Add TYPE_BOOLEAN, pt_Boolean
            .Add TYPE_STRING, pt_String
            
        End With
        
    End Sub
    
    
    Public Sub SetupAdmin()
    
        Set s.Admin = KvpC.Deb
        
        With s.Admin
        
            .Add "empty", at_Empty
            .Add "null", at_Null
            .Add "nothing", at_Nothing
            .Add "unknown", at_Unknown
            .Add "error", at_Error
        
        End With
        
    End Sub
    
    Public Sub SetupItemByIndex0()
    
        Set s.ItemByIndex0 = KvpC.Deb
        With s.ItemByIndex0
        
            .Add "arraylist", ti_ArrayList
        
        End With
        
    End Sub
    
    Public Sub SetupItemByIndex1()
    	
        Set s.ItemByIndex1 = KvpC.Deb
        With s.ItemByIndex1
        
            .Add "collection", ti_Collection
            .Add "seq", ti_Seq
            .Add "wcollection", ti_wCollection
        End With
    End Sub
    
    Public Sub SetupItemByKey()
    
        Set s.ItemByKey = KvpC.Deb
        
        With s.ItemByKey
        
        .Add "chashd", ik_cHashD
        .Add "KvpC", ik_KvpC
        .Add "dictionary", ik_Dictionary
        .Add "KvpH", ik_KvpH
        .Add "scriptingdictionary", ik_ScriptingDictionary
        .Add "kvpair", ik_KVPair
        
        End With
        
    End Sub
    
    Public Sub SetupItemByArray()
    	
        Set s.ItemByToArray = KvpC.Deb
        
        With s.ItemByToArray
        
            .Add "stack", ia_Stack
            .Add "queue", ia_Queue
        End With
        
    End Sub
    
    Public Sub SetupWrappedEnums()
        
        Set s.WrappedEnum = KvpC.Deb
        
        With s.WrappedEnum
            
            .Add we_Type, ti_EnumTypes
            .Add we_Preset, ti_EnumPreset
            .Add we_Message, ti_EnumMessage
        
        End With
        
    End Sub
    
    Public Sub SetupIterators()
    
        Set s.Iterator = KvpC.Deb
        
        With s.Iterator
        	
            .Add it_Array, ti_IterArray
            .Add it_Const, ti_IterConst
            .Add it_Items, ti_IterItems
            .Add it_String, ti_IterStrings
            .Add it_Number, ti_IterNum
        End With
        
    End Sub
    
    Public Sub SetupContainers()
    	
        Set s.Container = KvpC.Deb
        With s.Container
        
            .AddPairs s.ItemByToArray.Keys, s.ItemByToArray.Items
            .AddPairs s.ItemByIndex0.Keys, s.ItemByIndex0.Items
            .AddPairs s.ItemByIndex1.Keys, s.ItemByIndex1.Items
            .AddPairs s.ItemByKey.Keys, s.ItemByKey.Items
            .AddPairs s.WrappedEnum.Keys, s.WrappedEnum.Items
        End With
            
    End Sub
    
    Public Function BaseType(ByRef ipItem As Variant) As String
        Return VBA.Replace(VBA.LCase$(VBA.TypeName(ipItem)), "()", vbNullString)
    End Function
    
    
    Public Function IsNumber(ByRef ipNumber As Variant, Optional ByVal ipNumberType As nt__NumberType = nt_Any) As Boolean
    
        Dim myBaseType As String = TypeInfo.BaseType(ipNumber)
        If ipNumberType = nt_Any Then
            Return s.Number.HoldsKey(myBaseType)
        Else
            Return s.Number.Item(myBaseType) = ipNumberType
        End If
        
    End Function
    
    Public Function IsNotNumber(ByRef ipNumber As Variant, Optional ByVal ipNumberType As nt__NumberType = nt_Any) As Boolean
        
        Dim myBaseType As String = TypeInfo.BaseType(ipNumber)
        If ipNumberType = nt_Any Then
            Return s.Number.LacksKey(myBaseType)
        Else
            Return s.Number.Item(myBaseType) <> ipNumberType
        End If
        
    End Function
    
    
    ' Public Function IsNumbers()
    
    ' End Function
    
    
    Public Function IsBoolean(ByRef ipBoolean As Variant) As Boolean
        Return TypeInfo.BaseType(ipBoolean) = TYPE_BOOLEAN
    End Function
    
    Public Function IsNotBoolean(ByRef ipBoolean As Variant) As Boolean
        Return Not IsBoolean(ipBoolean)
    End Function
    
    
    '@Descript_ion("Returns True if ipString is a String or String().  Objects with Defaultmembers that return strings will return False")
    Public Function IsString(ByRef ipString As Variant) As Boolean
        Return TypeInfo.BaseType(ipString) = TYPE_STRING
    End Function
    
    Public Function IsNotString(ByRef ipString As Variant) As Boolean
    	Return Not IsString(ipString)
    End Function
    
    
    Public Function IsAdmin(ByRef ipAdmin As Variant, Optional ByVal ipAdminType As at__AdminType = at_Any) As Boolean
    	Dim myBaseType As String = TypeInfo.BaseType(ipAdmin)
        If ipAdminType = at_Any Then
            Return s.Admin.HoldsKey(myBaseType)
        Else
            Return s.Admin.Item(myBaseType) = ipAdminType
        End If
    End Function
    
    Public Function IsNotAdmin(ByRef ipAdmin As Variant, Optional ByVal ipAdminType As at__AdminType = at_Any) As Boolean
        Return Not IsAdmin(ipAdmin, ipAdminType)
    End Function
    
    
    Public Function IsPrimitive(ByRef ipPrimitive As Variant, Optional ByVal ipPrimitiveType As pt__PrimitiveType = pt_Any) As Boolean
        Dim myBaseType As String = TypeInfo.BaseType(ipPrimitive)
        If ipPrimitiveType = at_Any Then
            Return s.Primitive.HoldsKey(myBaseType)
        Else
            Return s.Primitive.Item(myBaseType) = ipPrimitiveType
        End If
    End Function
    
    Public Function IsNotPrimitive(ByRef ipPrimitive As Variant, Optional ByVal ipPrimitiveType As pt__PrimitiveType = pt_Any) As Boolean
        Return Not IsPrimitive(ipPrimitive, ipPrimitiveType)
    End Function
    
    
    Public Function IsArray(ByRef ipArray As Variant, Optional ByVal ipArrayType As ArrayType = at_Any) As Boolean
        Return ArrayInfo.IsArray(ipArray, ipArrayType)
    End Function
    
    Public Function IsNotArray(ByRef ipArray As Variant, Optional ByVal ipArrayType As ArrayType = at_Any) As Boolean
        Return ArrayInfo.IsNotArray(ipArray, ipArrayType)
    End Function
    
    Public Function IsItemByIndex0(ByRef ipItemByIndex0 As Variant, Optional ByVal ipItemByIndex0Type As i0__ItemByIndex0Type = i0_Any) As Boolean
    
        Dim myBaseType As String = TypeInfo.BaseType(ipItemByIndex0)
        If ipItemByIndex0Type = i0_Any Then
            Return s.ItemByIndex0.HoldsKey(myBaseType)
        Else
            Return s.ItemByIndex0.Item(myBaseType) <> ipItemByIndex0Type
        End If
    
    End Function
    
    Public Function IsNotItemByIndex0(ByRef ipItemByIndex0 As Variant, Optional ByVal ipItemByIndex0Type As i0__ItemByIndex0Type = i0_Any) As Boolean
        Return Not IsItemByIndex0(ipItemByIndex0, ipItemByIndex0Type)
    End Function
    
    
    Public Function IsItemByIndex1(ByRef ipItemByIndex1 As Variant, Optional ByVal ipItemByIndex1Type As i1__ItemByIndex1Type = i1_Any) As Boolean
    
        Dim myBaseType As String = TypeInfo.BaseType(ipItemByIndex1)
        If ipItemByIndex1Type = i0_Any Then
            Return s.ItemByIndex1.HoldsKey(myBaseType)
        Else
            Return s.ItemByIndex1.Item(myBaseType) <> ipItemByIndex1Type
        End If
    
    End Function
    
    Public Function IsNotItemByIndex1(ByRef ipItemByIndex1 As Variant, Optional ByVal ipItemByIndex1Type As i1__ItemByIndex1Type = i1_Any) As Boolean
        Return Not IsItemByIndex1(ipItemByIndex1, ipItemByIndex1Type)
    End Function
    
    
    Public Function IsItemByKey(ByRef ipItemByKey As Variant, Optional ByVal ipItemByKeyType As ik__ItemByKeyType = ik_Any) As Boolean
    
        Dim myBaseType As String = TypeInfo.BaseType(ipItemByKey)
        If ipItemByKeyType = ik_any Then
            Return s.ItemByKey.HoldsKey(myBaseType)
        Else
            Return s.ItemByKey.Item(myBaseType) <> ipItemByKeyType
        End If
    
    End Function
    
    Public Function IsNotItemByKey(ByRef ipItemByKey As Variant, Optional ByVal ipItemByKeyType As ik__ItemByKeyType = ik_Any) As Boolean
        Return Not IsItemByKey(ipItemByKey, ipItemByKeyType)
    End Function
    
    
    
    Public Function IsItemByToArray(ByRef ipItemByArray As Variant, Optional ByVal ipItemByArrayType As ia__ItemByArrayType = ia_Any) As Boolean
    
        Dim myBaseType As String = TypeInfo.BaseType(ipItemByArray)
        If ipItemByArrayType = ia_any Then
            Return s.ItemByToArray.HoldsKey(myBaseType)
        Else
            Return s.ItemByToArray.Item(myBaseType) <> ipItemByArrayType
        End If
    
    End Function
    
    Public Function IsNotItemByArray(ByRef ipItemByArray As Variant, Optional ByVal ipItemByArrayType As ia__ItemByArrayType = ia_Any) As Boolean
        Return Not IsItemByToArray(ipItemByArray, ipItemByArrayType)
    End Function
    
    
    Public Function IsContainer(ByRef ipContainer As Variant) As Boolean
    
    	Dim myBaseType As String = TypeInfo.BaseType(ipContainer)
        Return s.Container.HoldsKey(myBaseType)
        
    End Function
    
    Public Function IsNotContainer(ByRef ipContainer As Variant) As Boolean
    	Dim myBaseType As String = TypeInfo.BaseType(ipContainer)
        Return s.Container.LacksKey(myBaseType)
    End Function
    
    
    Public Function IsItemObject(ByRef ipObject As Variant) As Boolean
    
        If VBA.IsObject(ipObject) Then
            If IsNotContainer(ipObject) Then
                Return True
            End If
        End If
        
       Return False
        
    End Function
    
    Public Function IsNotItemObject(ByRef ipObject As Variant) As Boolean
        Return Not IsItemObject(ipObject)
    End Function
    
   Public Function IsType(ByVal ipt_ypeOrd As ti__TypeId, ByRef iptestType As Variant) As Boolean
        Return ipt_ypeOrd = enums.Types.TypeNameToId(TypeInfo.BaseType(iptestType))
    End Function
    
End Class